// $Id: $
#ifndef ROOT_WEIGHTS_H 
#define ROOT_WEIGHTS_H 1

static const unsigned int c_Binsm = 20 ; 
static const unsigned int c_Binst = 20 ; 
static const unsigned int c_PiBins = (c_Binsm+2)*(c_Binst+2); // (10+2)*(10+2)
static const unsigned int c_KBins  = (c_Binsm+2)*(c_Binst+2); // (10+2)*(10+2)

TH2D c_hK("c_hK","c_hK",   c_Binsm,0,1,c_Binst,0,1);
TH2D c_hPi("c_hPi","c_hPi",c_Binsm,0,1,c_Binst,0,1);

double c_PiMCWeight[c_PiBins] ;

double c_KMCWeight[c_KBins]  = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.698317, 0, 0, 0, 0, 0, 0, 0, 0.0881882, 0, 0.0488009, 0, 0.0630685, 0.0926125, 0.0568297, 0.246459, 0.133372, 0.275939, 0.242725, 0.00477777, 0, 0.376088, 0, 0, 0, 0, 0, 2.20934, 0, 0.211222, 0, 0.0470443, 0.0534592, 0.0925054, 0.0165777, 0.067389, 0.0606701, 0.179713, 0.235411, 0.345579, 0.0700004, 0.088415, 0.133349, 0.107911, 0.0440697, 0, 0, 0, 0, 0.530646, 0, 0.0612218, 0.125026, 0.110378, 0.00640523, 0.097232, 0.127174, 0.113572, 0.0211017, 0.260524, 0.219951, 0.298075, 0.144941, 0.117258, 0.101798, 0, 0.0292177, 0.590917, 0, 0, 0, 0, 0.269351, 0.226385, 0.0238285, 0.0151236, 0.0193539, 0.119853, 0.0846776, 0.131417, 0.0962734, 0.193855, 0.232276, 0.229752, 0.148943, 0.151866, 0.203271, 0.0879581, 0.0613161, 0, 0, 0, 2.62756, 0.664234, 0.686034, 0.27891, 0.0841042, 0.0473314, 0.0638008, 0.136349, 0.112026, 0.0804488, 0.0945814, 0.25359, 0.267561, 0.149379, 0.111417, 0.0330631, 0.188894, 0.0204587, 0.391686, 0.501406, 0, 0, 0, 0.665676, 0.305177, 0.109823, 0.119547, 0.0792569, 0.0813571, 0.0582657, 0.125371, 0.126923, 0.09183, 0.314549, 0.244553, 0.204972, 0.119948, 0.0614606, 0.185227, 0.292702, 0.199772, 0.318707, 0, 0, 0, 0.438129, 1.02294, 0.120501, 0.10329, 0.231725, 0.101248, 0.14523, 0.148432, 0.12591, 0.129681, 0.243892, 0.213808, 0.173351, 0.181651, 0.141675, 0.18966, 0.274489, 0.505937, 1.43758, 0, 0, 0, 3.49718, 0.787683, 0.44991, 0.08597, 0.192974, 0.127287, 0.109913, 0.174612, 0.154216, 0.100766, 0.296943, 0.271675, 0.168105, 0.154364, 0.165364, 0.147683, 0.308389, 0.298112, 1.58297, 0, 0, 0, 0, 0.434025, 0.512731, 0.163891, 0.242105, 0.136978, 0.197164, 0.100735, 0.137361, 0.116869, 0.305565, 0.309579, 0.178462, 0.196183, 0.158294, 0.293605, 0.58499, 0.194301, 2.35472, 0, 0, 0, 0.291758, 0.456724, 0.586572, 0.37926, 0.0649113, 0.095936, 0.182873, 0.118657, 0.120644, 0.125015, 0.321807, 0.305002, 0.264575, 0.240301, 0.206268, 0.390689, 0.167869, 0.828715, 0.795693, 0, 0, 0, 0.437075, 0.351844, 0.364856, 0.29794, 0.235537, 0.279016, 0.243634, 0.214585, 0.0756772, 0.126745, 0.32943, 0.341471, 0.22823, 0.314768, 0.486444, 0.466358, 0.496903, 0.487734, 0.614658, 0, 0, 0, 0.210607, 0.0790634, 0.441553, 0.460138, 0.530464, 0.443372, 0.327224, 0.312222, 0.256393, 0.237073, 0.376181, 0.371699, 0.431598, 0.317978, 0.523726, 0.613282, 1.22522, 0.881351, 0, 0, 0, 0.154933, 0.0519634, 0.227097, 0.34412, 0.340052, 0.577507, 0.684717, 0.732857, 0.761577, 0.789553, 0.616527, 0.827321, 0.570541, 0.530704, 0.526025, 0.684941, 0.938516, 0.537171, 0.646932, 1.10278, 0, 0, 0, 0.212886, 0.413534, 0.374021, 0.704721, 0.714224, 0.797251, 1.10988, 1.19992, 0.833495, 1.45897, 1.50839, 1.18425, 0.951689, 0.814266, 0.734349, 0.68035, 0.835323, 0.689024, 0, 0, 0, 0, 0.461282, 0.646684, 0.547983, 0.956952, 0.868021, 0.960614, 1.1962, 1.41676, 1.13589, 1.36305, 2.01761, 2.20554, 1.5775, 1.45583, 1.17508, 1.07095, 1.10782, 1.36513, 0.724034, 0, 0, 0, 0.22406, 0.521992, 0.763351, 1.85809, 1.98716, 1.83572, 2.08509, 1.83741, 1.86436, 1.33392, 2.2399, 2.30819, 2.13971, 2.09286, 2.06875, 1.71281, 1.76222, 0.325726, 1.04709, 0, 0, 0, 0.901134, 1.28403, 4.8223, 7.24858, 5.86324, 5.45666, 5.99694, 4.41223, 3.10658, 2.84699, 3.08616, 2.47239, 2.78948, 2.22789, 3.16822, 2.38774, 0.542393, 1.99155, 0, 0, 0, 0, 0.231278, 2.81638, 6.06247, 2.53972, 2.38281, 2.45562, 3.16213, 3.99896, 5.72696, 4.54272, 4.17795, 3.75237, 3.04501, 2.26687, 3.73642, 2.77866, 0.916218, 0.190064, 0, 0, 0, 0, 0, 3.67506, 3.3392, 2.01496, 3.15718, 3.98087, 4.86832, 3.76817, 2.73767, 7.58558, 6.08678, 4.44228, 2.47256, 2.82574, 2.16503, 6.43706, 0.0255747, 0, 0, 0, 0, 0, 0, 5.92456, 2.23039, 5.89952, 4.81573, 8.51772, 14.6402, 6.11301, 4.05009, 3.66058, 8.86189, 5.23079, 4.04379, 3.60827, 2.78546, 4.95898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } ;
double c_KMCWeight2[c_KBins] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.00628, 0, 0, 0, 0, 0, 0, 0, 0.0873828, 0, 0.0463841, 0, 0.0580694, 0.0855798, 0.0538101, 0.237322, 0.122786, 0.267087, 0.214509, 0.00438764, 0, 0.345212, 0, 0, 0, 0, 0, 4.36679, 0, 0.22156, 0, 0.0452507, 0.0541358, 0.089062, 0.0160922, 0.0652231, 0.0581759, 0.171086, 0.224084, 0.333613, 0.0683265, 0.0872202, 0.118997, 0.103134, 0.0486921, 0, 0, 0, 0, 0.513838, 0, 0.0651405, 0.140069, 0.107961, 0.00656597, 0.0930047, 0.12063, 0.105108, 0.0196951, 0.245566, 0.204918, 0.282901, 0.140318, 0.115731, 0.0969324, 0, 0.0270102, 0.578383, 0, 0, 0, 0, 0.317064, 0.245629, 0.0254287, 0.0152922, 0.0191029, 0.117847, 0.0806044, 0.125932, 0.0926956, 0.187037, 0.218922, 0.223157, 0.141427, 0.146644, 0.195981, 0.0839851, 0.0548484, 0, 0, 0, 3.19952, 0.741744, 0.719391, 0.291474, 0.0831644, 0.0474992, 0.0629147, 0.133268, 0.108047, 0.0773032, 0.091706, 0.237485, 0.251061, 0.139996, 0.106348, 0.0321184, 0.185783, 0.020989, 0.368941, 0.498376, 0, 0, 0, 0.740535, 0.350224, 0.11082, 0.124715, 0.0769369, 0.0799413, 0.0570503, 0.121547, 0.121724, 0.0890211, 0.29759, 0.23358, 0.19235, 0.11894, 0.0582414, 0.181245, 0.292462, 0.186122, 0.348759, 0, 0, 0, 0.491375, 1.23682, 0.12966, 0.103083, 0.236127, 0.101188, 0.142189, 0.144423, 0.121029, 0.122418, 0.228977, 0.203094, 0.167337, 0.17431, 0.141702, 0.178786, 0.266902, 0.508426, 1.31228, 0, 0, 0, 4.42281, 0.917225, 0.504333, 0.0872849, 0.194312, 0.126801, 0.110519, 0.171183, 0.146105, 0.0975516, 0.28179, 0.259847, 0.159599, 0.154536, 0.159497, 0.140813, 0.30474, 0.299312, 2.07156, 0, 0, 0, 0, 0.476997, 0.584841, 0.168024, 0.248145, 0.138489, 0.19211, 0.0960412, 0.131986, 0.114716, 0.295036, 0.299231, 0.171649, 0.187937, 0.155417, 0.287675, 0.594532, 0.195384, 2.27245, 0, 0, 0, 0.340225, 0.51292, 0.611792, 0.382051, 0.0655972, 0.0961142, 0.179132, 0.115673, 0.116993, 0.118185, 0.304622, 0.295054, 0.25914, 0.228214, 0.20394, 0.382798, 0.163429, 0.774552, 0.715945, 0, 0, 0, 0.611952, 0.377444, 0.369652, 0.314786, 0.235568, 0.273381, 0.236736, 0.209597, 0.0721901, 0.122188, 0.317381, 0.337133, 0.224782, 0.303853, 0.476473, 0.464321, 0.490844, 0.466988, 0.515621, 0, 0, 0, 0.244881, 0.0898, 0.461348, 0.469664, 0.531184, 0.449784, 0.315187, 0.302586, 0.249988, 0.23119, 0.370936, 0.358022, 0.422271, 0.306905, 0.512288, 0.601715, 1.17953, 0.899475, 0, 0, 0, 0.223796, 0.0586731, 0.248026, 0.36558, 0.353518, 0.569298, 0.664032, 0.716605, 0.744341, 0.784905, 0.618105, 0.796419, 0.550278, 0.527771, 0.521226, 0.69147, 0.961198, 0.531236, 0.641158, 1.32199, 0, 0, 0, 0.264431, 0.435323, 0.392694, 0.720893, 0.714486, 0.783233, 1.08294, 1.18419, 0.808471, 1.38773, 1.4855, 1.15589, 0.928398, 0.817629, 0.744463, 0.678688, 0.80852, 0.724197, 0, 0, 0, 0, 0.612866, 0.675249, 0.573541, 0.960357, 0.856185, 0.932103, 1.15983, 1.38409, 1.0727, 1.34623, 1.95631, 2.12856, 1.58386, 1.46066, 1.18138, 1.0588, 1.10474, 1.50741, 0.732171, 0, 0, 0, 0.273436, 0.520902, 0.777152, 1.85592, 1.95901, 1.75579, 2.01211, 1.76752, 1.77197, 1.29103, 2.16681, 2.25003, 2.10925, 2.10074, 2.08087, 1.72253, 1.80519, 0.357333, 1.29879, 0, 0, 0, 0.987079, 1.33713, 5.06968, 7.2732, 5.68925, 5.29154, 5.72927, 4.22074, 2.97013, 2.65155, 2.95177, 2.43317, 2.8201, 2.1831, 3.16375, 2.39782, 0.54128, 1.929, 0, 0, 0, 0, 0.246335, 3.04562, 6.4462, 2.52572, 2.27489, 2.33949, 3.14423, 3.83315, 5.55788, 4.3989, 4.05942, 3.6376, 3.07643, 2.27679, 3.78021, 2.93838, 0.811821, 0.208029, 0, 0, 0, 0, 0, 3.9463, 3.44937, 1.92035, 3.06294, 3.80225, 4.25812, 3.64027, 2.55216, 7.29018, 5.92283, 4.35749, 2.48052, 2.94117, 2.4299, 6.39884, 0.026832, 0, 0, 0, 0, 0, 0, 5.56647, 2.13721, 6.4151, 4.75569, 8.21498, 13.6082, 5.49387, 3.73178, 3.57454, 7.91873, 5.88933, 3.88151, 3.6662, 3.24523, 5.37282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
} ;

const Int_t c_nptBins = 28 ; 
Double_t c_ptBins[c_nptBins] = {1500,2200,3000,3500,4000,4500,5000,5500,6000,6500,7000,7500,8000,8500,9000,9500,10000,10750,11500,12500,14000,16000,18000,20000,22000,25000,30000,1.e12};
Double_t c_ptWeights[c_nptBins] = { 1.03047, 1.39416, 1.38797, 1.40991, 1.45191, 1.57368, 1.27071, 1.43531, 1.2349, 1.09752, 1.01071, 1.1189, 0.968022, 0.968896, 0.787784, 0.876768, 0.8008, 0.7804, 0.843666, 0.687542, 0.68765, 0.666551, 0.502547, 0.559499, 0.465446, 0.544776, 0.62319, 0.369554 } ;
Double_t c_ptWeights2[c_nptBins] = { 0.666744, 1.07248, 1.23936, 1.40508, 1.41215, 1.43208, 1.33071, 1.32537, 1.1913, 1.09394, 1.0492, 1.07596, 0.993251, 0.985716, 0.885626, 0.863668, 0.848093, 0.817466, 0.871625, 0.688731, 0.747994, 0.703201, 0.625576, 0.599652, 0.569779, 0.605114, 0.600123, 0.451159 } ;

// ####################################################################################################
// *** MC weight ***
double mcWeight(double mp, double thetap, bool pion, unsigned int version=1){
  double w = 0 ;
  int bin = 0 ;
  if (pion){
    bin = c_hPi.FindBin(mp,thetap);
    w = 1. ; // c_PiMCWeight[bin];
  } else {
    bin = c_hK.FindBin(mp,thetap);
    w = (1==version?c_KMCWeight[bin]:c_KMCWeight2[bin]);
  }
  //  if (w==0) std::cout << pion << " " << mp << " " << thetap << " bin " << bin << " has weight " << w << std::endl ;
  return w>0?w:0. ;
}
// ####################################################################################################
inline double  nnEffWeight(double mprime){
  //p0                        =     0.992358   +/-   0.0187521   
  //p1                        =    -0.178629   +/-   0.039336    
  return 0.970823-0.141184*mprime ;
}
// ####################################################################################################
inline double  dataNnEffWeight(double mprime){
    //p0                        =      1.27219   +/-   0.0141117   
    //p1                        =     -0.54569   +/-   0.0275166   
  return 1.27219-0.54569*mprime ;
}
// ####################################################################################################
inline double ptWeight(double PT,unsigned version=1){
  double w = (1==version?c_ptWeights[0]:c_ptWeights2[0]) ;
  for (int i = 0 ; i < c_nptBins-1 ; i++){
    // std::cout << "PT " << PT << " bin " << i << " at " <<   ptBins[i] << " with " << ptWeights[i] << std::endl ;
    if (PT > c_ptBins[i]) w = (1==version?c_ptWeights[i+1]:c_ptWeights2[i+1]); // store this value
  } 
  // std::cout << PT << " PT gets weight " << w << std::endl ;  
  return w; // for cases above 50000 take last bin
}
#endif // ROOT_WEIGHTS_H
