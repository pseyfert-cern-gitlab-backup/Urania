root.exe
.L ../analysis/FourPlots.C 
gStyle->SetPalette(0)
TFile* fnpi = TFile::Open("LambdabMC-Lbpi-Sim08a-1122-1123-1124-1125-NN.root")
TFile* fnk = TFile::Open("LambdabMC-LbK-Sim08a-1127-1128-1129-1137-NN.root")
TFile* fnkpi = TFile::Open("LambdabMC-B2JpsiKpi-Sim08a-1138-1139-NN.root")
TNNppi = (TTree*)fnpi->Get("NetTree")
TNNpK = (TTree*)fnk->Get("NetTree")
TNNKpi = (TTree*)fnkpi->Get("NetTree")
TChain* TNNKK = new TChain("NetTree")
TNNKK->Add("LambdabMC-B2JpsiKK-Sim08a-1134-1135-NN.root")
TChain* TNN = new TChain("NetTree")
TNN->Add("Lambdab-S20r1-1062-NN.root")
TNN->Add("Lambdab-S20-1063-NN.root")
TChain* TT = new TChain("TrainTree")
TT->Add("Lambdab-S20r1-1062-All-SW.root")
TT->Add("Lambdab-S20-1063-All-SW.root")
TNN->AddFriend(TT)
TNN->Draw("tMass[0]:PsipKMass[0]","(sweightLb[0]>-4)*(Category[0]==1)")
TNN->Draw("sweightLb[0]:PsipKMass[0]","(sweightLb[0]>-4)*(Category[0]==1)")

TCut LooseNN("netOutput>-1")
TCut OptimalNN("netOutput>0.552")
TCut OK("ErrorCode==0")
TCut Blind("(PsippiMass<5580 || PsippiMass>5650) || Category!=1")
TCut kstream(OK && "Category==-1")
TCut pistreamUB(OK &&"Category==1")
TCut pistream(OK && pistreamUB && Blind)
Double_t mLb = 5620 ;
Double_t mBd = 5279.5 ;
Double_t mBu = 5279.17 ;
Double_t mBs = 5366.3 ;
const double m_psi = 3096.916 ;
const double m_p   =  938.272 ;
const double m_pi  =  139.570 ;
const double m_Lb  =  5620.0 ;
const double m_K  =  493.677 ;
Double_t win = 20 ;
Double_t lwin = 100 ;
TCut NoKK("abs(PsiKKMass-5366.3)>20")
TCut NoKpi("abs(PsiKpiMass-5279.5)>20")
TCut NopiK("abs(PsipiKMass-5279.5)>20")
TCut NopK("abs(PsipKMass-5620)>20")
TCut NoKp("abs(PsiKpMass-5620)>20")
TCut TruepiK("BKGCAT==31")
TCut TrueKpi("BKGCAT==32")
TCut TrueKK("BKGCAT==33")
TCut TrueKp("BKGCAT==34")
TCut TruepK("BKGCAT==1")
TCut Trueppi("BKGCAT==0")

char* WL = "sweightLb*(sweightLb>-4)*(tCategory==-1)"
char* WB = "sweightBkg*(sweightLb>-4)*(tCategory==-1)"
//------------------------------------------------------------------------------------------------------------
RooPlot* r = SandB(TNN,TNN,"sqrt(pMMass2)",WL,WB,"","N","remove",m_p+m_K,m_Lb-m_psi,50)

//------------------------------------------------------------------------------------------------------------
// Unweighted
//------------------------------------------------------------------------------------------------------------
RooPlot* r = SandB(TNN,TNNpK,"sqrt(pMMass2)",WL,TruepK && "(Category==-1)*(ErrorCode==0)","","N","remove",m_p+m_K,m_Lb-m_psi,50)
SetTitle("m_{pK} [MeV/c^{2}]",r);
// overlay_line(1405,r,1)  // 
overlay_line(1520,r,1)  // 
overlay_line(1600,r,1)
overlay_line(1670,r,1)
overlay_line(1690,r,1)
overlay_line(1800,r,1)
overlay_line(1810,r,1)
overlay_line(1820,r,1)
overlay_line(1830,r,1)
overlay_line(1890,r,1)
overlay_line(2100,r,1)
overlay_line(2350,r,1)
png("pKMass S and MC")
r = SandB(TNN,TNNpK,"sqrt(psiMMass2)",WL,TruepK && "(Category==-1)*(ErrorCode==0)","","N","remove",m_psi+m_K,m_Lb-m_p,50)
SetTitle("m_{J/#psiK} [MeV/c^{2}]",r);
png("psiKMass S and MC")
r = SandB(TNN,TNNpK,"sqrt(psipMass2)",WL,TruepK && "(Category==-1)*(ErrorCode==0)","","N","remove",m_psi+m_p,m_Lb-m_K,50)
SetTitle("m_{J/#psip} [MeV/c^{2}]",r);
png("psipMass S and MC")
r = SandB(TNN,TNNpK,"mprime",WL,TruepK && "(Category==-1)*(ErrorCode==0)","","N","remove",0,1)
SetTitle("m'",r);
png("mprime S and MC")
r = SandB(TNN,TNNpK,"thetaprime",WL,TruepK && "(Category==-1)*(ErrorCode==0)","","N","remove",0,1)
SetTitle("#theta'",r);
png("thetaprime S and MC")
TH1* h = Divide(TNN,TNNpK,"thetaprime",WL,TruepK && "(Category==-1)*(ErrorCode==0)","","N","remove",0,1)
r = NiceRooPlot(h)
SetTitle("#theta'","data/MC",r);
r->Draw()
r->SetMinimum(0.) ; r->SetMaximum(4.0)
png("thetaprime S and MC ratio")


TH2D* h2 = Make2DPlot("h2","m_{pK}^{2} [GeV^{2}/c^{4}]",23,1.9,6.5,"m_{J/#psiK}^{2} [GeV^{2}/c^{4}]",23,12,22.5)
TH2D* h2l = Make2DPlot("h2l","m_{pK}^{2} [GeV^{2}/c^{4}]",900,2,6.5,"m_{J/#psiK}^{2} [GeV^{2}/c^{4}]",1100,12,22)
TH2D* h2mc = Make2DPlot("h2mc","m_{pK}^{2} [GeV^{2}/c^{4}]",23,2,6.5,"m_{J/#psiK}^{2} [GeV^{2}/c^{4}]",23,12,22)
TH2D* h2b = Make2DPlot("h2b","m_{pK}^{2} [GeV^{2}/c^{4}]",23,1.9,6.5,"m_{J/#psip}^{2} [GeV^{2}/c^{4}]",22,16,27)
TH2D* h2c = Make2DPlot("h2c","m_{J/#psiK}^{2} [GeV^{2}/c^{4}]",23,12,22.5,"m_{J/#psip}^{2} [GeV^{2}/c^{4}]",22,16,27)

TNN->Draw("psiMMass2/1e6:pMMass2/1e6 >> h2",WL)
gPad->SetLogz(1)
h2->Draw("COLZ")
png("Colourful Dalitz (K)")

gPad->SetLogz(0)
c1.SetTheta(30);  //theta angle=66 degrees
c1.SetPhi(-40);
h2->Draw("lego2")
png("Dalitz 3D (K)")

TNNpK->Draw("psiMMass2/1e6:pMMass2/1e6 >> h2mc",TruepK && "(Category==-1)*(ErrorCode==0)")
gPad->SetLogz(1)
h2mc->Draw("COLZ")
png("Colourful Dalitz MC (K)")

gPad->SetLogz(0)
c1.SetTheta(30);  //theta angle=66 degrees
c1.SetPhi(-40);
h2mc->Draw("lego2")
png("Dalitz 3D MC (K)")

TH2D* h2s = Make2DPlot("h2s","m'",20,0,1.0,"#theta'",20,0,1.)
TH2D* h2smc = Make2DPlot("h2smc","m'",20,0,1.0,"#theta'",20,0,1.)

TNN->Draw("thetaprime:mprime >> h2s",WL)
gPad->SetLogz(1)
h2s->Draw("COLZ")
png("Colourful Square Dalitz (K)")
gPad->SetLogz(0)
c1.SetTheta(30);  //theta angle=66 degrees
c1.SetPhi(-40);
h2s->Draw("lego2")
png("Square Dalitz 3D (K)")

TNNpK->Draw("thetaprime:mprime >> h2smc",TruepK && "(Category==-1)*(ErrorCode==0)")
gPad->SetLogz(1)
h2smc->Draw("COLZ")
png("Colourful Square Dalitz MC (K)")
gPad->SetLogz(0)
c1.SetTheta(30);  //theta angle=66 degrees
c1.SetPhi(-40);
h2smc->Draw("lego2")
png("Square Dalitz 3D MC (K)")

// ========================== The actual weighting
int nbm = 20
int nbt = 20
TString Tnbm = ""; Tnbm += nbm;
TString Tnbt = ""; Tnbt += nbt;
TH2D* hKD = Make2DPlot("hKD","m'",nbm,0,1,"#theta'",nbt,0,1)
TH2D* hKM = Make2DPlot("hKM","m'",nbm,0,1,"#theta'",nbt,0,1)
TH2D* hKM2 = Make2DPlot("hKM2","m'",nbm,0,1,"#theta'",nbt,0,1)
// Try with a trivial TH2D
//gPad->SetLogy(0)
TNN->Draw("thetaprime:mprime >> hKD",WL)
TNNpK->Draw("thetaprime:mprime >> hKM", "(BKGCAT==1)*(Category==-1)*(ErrorCode==0)")
.L ~/codes/rootmacros/AllMacroes.C
TH2D* hK = Divide2D(&hKD,&hKM)  // crashes
//hKD->Divide(hKM)
hK->Draw("lego2")
Normalise(hK,"A")
gPad->SetLogz(1)
hK->Draw("coltext")
png("Kaon reweighting "+Tnbm+"x"+Tnbt)
for ( int i=0 ; i<(nbm+2)*(nbt+2); i++) { cout << ", " << (hK->GetBinContent(i)>0?hK->GetBinContent(i):0.) ; } cout << endl ;
for ( int i=0 ; i<(nbm+2)*(nbt+2); i++) { cout << ", " << (hK->GetBinContent(i)>0?hK->GetBinError(i):0.) ; } cout << endl ;

TNN->Draw("thetaprime:mprime >> hKD",WL)
TNNpK->Draw("thetaprime:mprime >> hKM2", "(BKGCAT==1)*(Category==-1)*(ErrorCode==0)*PTWeight")
hKD->Divide(hKM2)
hKD->Draw("lego2")
Normalise(hKD,"A")
gPad->SetLogz(1)
hKD->Draw("coltext")
png("Kaon reweighting 2 "+Tnbm+"x"+Tnbt)
for ( int i=0 ; i<(nbm+2)*(nbt+2); i++) { cout << ", " << (hKD->GetBinContent(i)>0?hKD->GetBinContent(i):0.) ; } cout << endl ;

gPad->SetLogz(1)
c1.SetTheta(30);  
c1.SetPhi(-40);
hKD->SetMinimum(0.1)
hKD->Draw("lego2")
png("Kaon reweighting "+Tnbm+"x"+Tnbt+" lego")

TH1D* hKstats = new TH1D("hKstats","hKstats",32,-1.,15)
for ( int i=0 ; i<(nbm+2)*(nbt+2); i++) { hKstats->Fill(hKD->GetBinContent(i)) ; } 
hKstats->Draw()

TH1D* hKstatsL = new TH1D("hKstatsL","hKstatsL",25,-1.5,1.5)
for ( int i=0 ; i<(nbm+2)*(nbt+2); i++) { hKstatsL->Fill(log(hKD->GetBinContent(i))/log(10.)) ; } 
hKstatsL->Draw()

//------------------------------------------------------------------------------------------------------------
// Weighted MC
//------------------------------------------------------------------------------------------------------------

RooPlot* r = ThreeDalitzWeightPlots(TNN,TNNpK,"thetaprime","N","",0,1)
SetTitle("#theta'",r);
png("thetaprime S and MC and WMC")

RooPlot* r = ThreeDalitzWeightPlots(TNN,TNNpK,"mprime","N","",0,1)
SetTitle("m'",r);
png("mprime S and MC and WMC")

RooPlot* r = ThreeDalitzWeightPlots(TNN,TNNpK,"sqrt(pMMass2)","N","remove",m_p+m_K,m_Lb-m_psi,50)
SetTitle("m_{pK} [MeV/c^{2}]",r);
png("pKMass S and MC and WMC")
r = ThreeDalitzWeightPlots(TNN,TNNpK,"sqrt(psiMMass2)","N","remove",m_psi+m_K,m_Lb-m_p,50)
SetTitle("m_{J/#psiK} [MeV/c^{2}]",r);
png("psiKMass S and MC and WMC")
r = ThreeDalitzWeightPlots(TNN,TNNpK,"sqrt(psipMass2)","N","remove",m_psi+m_p,m_Lb-m_K,50)
SetTitle("m_{J/#psip} [MeV/c^{2}]",r);
png("psipMass S and MC and WMC")

//------------------------------------------------------------------------------------------------------------
// 
//------------------------------------------------------------------------------------------------------------

TString W1 = "(Category==-1)*(BKGCAT==1)*(ErrorCode==0)*DalitzWeight*SPDWeight*PTWeight2"
TString W2 = "(Category==-1)*(BKGCAT==1)*(ErrorCode==0)*DalitzWeight2*SPDWeight*PTWeight"
TString Wno = "(Category==-1)*(BKGCAT==1)*(ErrorCode==0)*DalitzWeight*SPDWeight"
TString Wz = "(Category==-1)*(BKGCAT==1)*(ErrorCode==0)*DalitzWeight"
RooPlot* rnn = SevenPlots(TNN,TNNpK,TNNpK,TNNpK,TNNpK,TNNpK,0,"sweightLb*(sweightLb>-4)*(tCategory==-1)",W1,W2,Wno,Wz,"","netOutput","N","remove",0,1,50)
SetTitle("network output",rnn)
png("LbK MC Lb NN with and without PT weights")

RooPlot* rmp = SevenPlots(TNN,TNNpK,TNNpK,TNNpK,TNNpK,TNNpK,0,"sweightLb*(sweightLb>-4)*(tCategory==-1)",W1,W2,Wno,Wz,"1","","mprime","N","remove",0,1,50)
SetTitle("m'",rmp)
png("LbK MC Lb mprime with and without PT weights")

RooPlot* rtp = SevenPlots(TNN,TNNpK,TNNpK,TNNpK,TNNpK,TNNpK,0,"sweightLb*(sweightLb>-4)*(tCategory==-1)",W1,W2,Wno,Wz,"1","","thetaprime","N","remove",0,1,50)
SetTitle("#theta'",rtp)
png("LbK MC Lb thetaprime with and without PT weights")

RooPlot* r1 = SevenPlots(TNN,TNNpK,TNNpK,TNNpK,TNNpK,TNNpK,0,"sweightLb*(sweightLb>-4)*(tCategory==-1)",W1,W2,Wno,Wz,"1","","sqrt(pMMass2)","N","remove",m_p+m_K,m_Lb-m_psi,30)
SetTitle("m_{pK} [MeV/c^{2}]",r1)
png("LbK MC Lb pK Mass with and without PT weights")

RooPlot* r2 = SevenPlots(TNN,TNNpK,TNNpK,TNNpK,TNNpK,TNNpK,0,"sweightLb*(sweightLb>-4)*(tCategory==-1)",W1,W2,Wno,Wz,"1","","sqrt(psipMass2)","N","remove",m_psi+m_p,m_Lb-m_K,30)
SetTitle("m_{J/#psiK} [MeV/c^{2}]",r2)
png("LbK MC Lb Psip mass with and without PT weights")

RooPlot* r3 = SevenPlots(TNN,TNNpK,TNNpK,TNNpK,TNNpK,TNNpK,0,"sweightLb*(sweightLb>-4)*(tCategory==-1)",W1,W2,Wno,Wz,"1","","sqrt(psiMMass2)","N","remove",m_psi+m_K,m_Lb-m_p,30)
SetTitle("m_{J/#psip} [MeV/c^{2}]",r3)
png("LbK MC Lb PsiM with and without PT weights")

//=====================================================================================
// PT weights are in method
//=====================================================================================



