root.exe MCLb2Psippi.root MCLb2PsipK.root $CASTOR_HOME/Lambdab/Tuple-Lbpi.root $CASTOR_HOME/Lambdab/Tuple-LbK.root $CASTOR_HOME/Lambdab/LambdabMC-Lbpi-Sim08a-1122-1123-1124-1125.root $CASTOR_HOME/Lambdab/LambdabMC-LbK-Sim08a-1127-1128-1129-1137.root LambdabMC-Lbpi-Sim08a-1122-1123-1124-1125-NN.root LambdabMC-LbK-Sim08a-1127-1128-1129-1137-NN.root 
_file0->ls()
TTree* THpi = (TTree*)_file0->Get("MCTree")
TTree* THK = (TTree*)_file1->Get("MCTree")
TTree* PHpi = (TTree*)_file2->Get("Lambdab/DecayTuple")
TTree* PHK = (TTree*)_file3->Get("Lambdab/DecayTuple")
TTree* MCppi = (TTree*)_file4->Get("MCTuplepp/MCDecayTree")
TTree* Tppi = (TTree*)_file4->Get("BetaSLambdab2JpsippiDetachedLine_TupleMC/DecayTree")
TTree* MCpK  = (TTree*)_file5->Get("MCTuplepk/MCDecayTree")
TTree* TpK  = (TTree*)_file5->Get("BetaSLambdab2JpsippiDetachedLine_TupleMC/DecayTree")
TTree* Nppi = (TTree*)_file6->Get("NetTree")
TTree* NpK = (TTree*)_file7->Get("NetTree")
MCppi->AddFriend(THpi)
MCppi->Draw("RunNumber:runNumber")
MCpK->AddFriend(THK)
Tppi->AddFriend(Nppi)
TpK->AddFriend(NpK)
Tppi->Draw("B_FullFit_M[0]:PsippiMass[0]","abs(B_FullFit_M[0]-5600)<1000")
TCut TruePsip("abs(pplus_TRUEID)==2212 && Psi_BKGCAT==0 && abs(Psi_MC_MOTHER_ID)==5122 && abs(pplus_MC_MOTHER_ID)==5122")
TCut TrueKaon("abs(piminus_TRUEID)==321 && abs(piminus_MC_MOTHER_ID)==5122")
TCut TruePion("abs(piminus_TRUEID)==211 && abs(piminus_MC_MOTHER_ID)==5122")
TCut KReco("Kminus_Reconstructed==1 && muminus_Reconstructed==1 && muplus_Reconstructed==1 && pplus_Reconstructed==1")
TCut PiReco("piminus_Reconstructed==1 && muminus_Reconstructed==1 && muplus_Reconstructed==1 && pplus_Reconstructed==1")
const double m_psi = 3096.916 ;
const double m_p   =  938.272 ;
const double m_pi  =  139.570 ;
const double m_Lb  =  5620.0 ;
const double m_K  =  493.677 ;
const double m_mu  =  105.6583715 ;
TString BMpi = "sqrt((sqrt(105.6583715**2+muminus_PP_PX**2+muminus_PP_PY**2+muminus_PP_PZ**2)+sqrt(105.6583715**2+muplus_PP_PX**2+muplus_PP_PY**2+muplus_PP_PZ**2)+sqrt(938.272**2+pplus_PP_PX**2+pplus_PP_PY**2+pplus_PP_PZ**2)+sqrt(139.570**2+piminus_PP_PX**2+piminus_PP_PY**2+piminus_PP_PZ**2))**2-(muminus_PP_PX+muplus_PP_PX+piminus_PP_PX+pplus_PP_PX)**2-(muminus_PP_PY+muplus_PP_PY+piminus_PP_PY+pplus_PP_PY)**2-(muminus_PP_PZ+muplus_PP_PZ+piminus_PP_PZ+pplus_PP_PZ)**2)"
TString BMK = "sqrt((sqrt(105.6583715**2+muminus_PP_PX**2+muminus_PP_PY**2+muminus_PP_PZ**2)+sqrt(105.6583715**2+muplus_PP_PX**2+muplus_PP_PY**2+muplus_PP_PZ**2)+sqrt(938.272**2+pplus_PP_PX**2+pplus_PP_PY**2+pplus_PP_PZ**2)+sqrt(493.677**2+Kminus_PP_PX**2+Kminus_PP_PY**2+Kminus_PP_PZ**2))**2-(muminus_PP_PX+muplus_PP_PX+Kminus_PP_PX+pplus_PP_PX)**2-(muminus_PP_PY+muplus_PP_PY+Kminus_PP_PY+pplus_PP_PY)**2-(muminus_PP_PZ+muplus_PP_PZ+Kminus_PP_PZ+pplus_PP_PZ)**2)"
TString BMKasPi = "sqrt((sqrt(105.6583715**2+muminus_PP_PX**2+muminus_PP_PY**2+muminus_PP_PZ**2)+sqrt(105.6583715**2+muplus_PP_PX**2+muplus_PP_PY**2+muplus_PP_PZ**2)+sqrt(938.272**2+pplus_PP_PX**2+pplus_PP_PY**2+pplus_PP_PZ**2)+sqrt(139.570**2+Kminus_PP_PX**2+Kminus_PP_PY**2+Kminus_PP_PZ**2))**2-(muminus_PP_PX+muplus_PP_PX+Kminus_PP_PX+pplus_PP_PX)**2-(muminus_PP_PY+muplus_PP_PY+Kminus_PP_PY+pplus_PP_PY)**2-(muminus_PP_PZ+muplus_PP_PZ+Kminus_PP_PZ+pplus_PP_PZ)**2)"
TString PsiM = "sqrt((sqrt(105.6583715**2+muminus_PP_PX**2+muminus_PP_PY**2+muminus_PP_PZ**2)+sqrt(105.6583715**2+muplus_PP_PX**2+muplus_PP_PY**2+muplus_PP_PZ**2))**2-(muminus_PP_PX+muplus_PP_PX)**2-(muminus_PP_PY+muplus_PP_PY)**2-(muminus_PP_PZ+muplus_PP_PZ)**2)"
TCut PsiMass("abs("+PsiM+"-3096.916)<80")

.L ../analysis/MCStats.C
//==========================================================================================================
// Acceptance (PT weight is irrelevant)
//==========================================================================================================
double rpi = reweightedAcceptance(PHpi,THpi,10); // Weighted: 8.665e+06 1.91668e+06 0.221197 effect: 1.02128
double rK  = reweightedAcceptance(PHK,THK,20);   // Weighted: 8.74841e+06 1.93661e+06 0.221367 effect: 1.03339

double r = rK/rpi ;  
double newK = 16.37*rK ;
double newpi = 15.64*rpi ;
cout << newpi << " & " << newK << " & " << newK/newpi << endl ; // 15.9729 & 16.9165 & 1.05908

double rpi = reweightedAcceptance(PHpi,THpi,10,"DalitzWeightWE*PTWeight2WE"); // Weighted: 8.47325e+06 1.88125e+06 0.222022 effect: 1.02509
double rK  = reweightedAcceptance(PHK,THK,20,"DalitzWeightWE*PTWeight2WE");   // Weighted: 9.70136e+06 2.14374e+06 0.220973 effect: 1.03155

double r = rK/rpi ;  // 
double newK = 16.37*rK ;
double newpi = 15.64*rpi ;
cout << newpi << " & " << newK << " & " << newK/newpi << endl ; // 16.0324 & 16.8864 & 1.05327

double rpi = reweightedAcceptance(PHpi,THpi,10,"DalitzWeightWE*PTWeight2"); // Weighted: 8.65789e+06 1.92224e+06 0.222022 effect: 1.02509
double rK  = reweightedAcceptance(PHK,THK,20,"DalitzWeightWE*PTWeight2");   // Weighted: 9.91223e+06 2.19033e+06 0.220973 effect: 1.03155

double r = rK/rpi ;  // 
double newK = 16.37*rK ;
double newpi = 15.64*rpi ;
cout << newpi << " & " << newK << " & " << newK/newpi << endl ; // 16.0324 & 16.8864 & 1.05327

double rpi = reweightedAcceptance(PHpi,THpi,10,"DalitzWeight*PTWeight2WE"); // Weighted: 8.4802e+06 1.8758e+06 0.221198 effect: 1.02128
double rK  = reweightedAcceptance(PHK,THK,20,"DalitzWeight*PTWeight2WE");   // Weighted: 8.5623e+06 1.89541e+06 0.221367 effect: 1.03339

double r = rK/rpi ;  // 
double newK = 16.37*rK ;
double newpi = 15.64*rpi ;
cout << newpi << " & " << newK << " & " << newK/newpi << endl ; // 15.9729 & 16.9166  1.05908

double rpi = reweightedAcceptance(PHpi,MCppi,10,"DalitzWeight*PTWeight2*exp(0.024*(1000*Lambda_b0_TRUETAU))"); //  Weighted: 8.6653e+06 1.91674e+06 0.221197 effect: 1.02128
double rK  = reweightedAcceptance(PHK,MCpK,20,"DalitzWeight*PTWeight2WE*exp(0.024*(1000*Lambda_b0_TRUETAU))"); //  Weighted: 8.5626e+06 1.89548e+06 0.221367 effect: 1.03339


double r = rK/rpi ;  // 
double newK = 16.37*rK ;
double newpi = 15.64*rpi ;
cout << newpi << " & " << newK << " & " << newK/newpi << endl ; // 15.9729 & 16.9166  1.05908

//==========================================================================================================
// Stats
//==========================================================================================================
MCStats(MCppi,MCpK,Tppi,TpK,"1");
MCStats(MCppi,MCpK,Tppi,TpK,"DalitzWeight*PTWeight2");
MCStats(MCppi,MCpK,Tppi,TpK,"DalitzWeightWE*PTWeight2");
MCStats(MCppi,MCpK,Tppi,TpK,"DalitzWeight*PTWeight2WE");
MCStats(MCppi,MCpK,Tppi,TpK,"DalitzWeightWE*PTWeight2WE");
MCStats(MCppi,MCpK,Tppi,TpK,"exp(0.024*B_TRUETAU)")
MCStats(MCppi,MCpK,Tppi,TpK,"DalitzWeight*PTWeight2*exp(0.024*(1000*B_TRUETAU))")

gPad->SetLogy()
RooPlot* r = SandB(Tppi,TpK,"piminus_ProbNNpi-piminus_ProbNNk","BKGCAT==0","BKGCAT==1","","NM","remove",-1,1)
r->GetXaxis()->SetTitle("M P(#pi)-P(K)")
r->GetYaxis()->SetTitle("dP/d(P(#pi)-P(K))")
r->Draw()
overlay_line(0,r,2)
png("Lbpi and LbK M probs")

// http://lhcb-release-area.web.cern.ch/LHCb-release-area/DOC/STATISTICS/MC11STAT/B2Charm-WG/Generation_Beam3500GeV-md100-MC11-nu2.html
// ppi: Generator level 0.1493\pm0.0004
// pK:  Generator level 0.1575\pm0.0005

//==========================================================================================================
// plots
//==========================================================================================================
gPad->SetLogy()
SandB(MCppi,MCpK,"Lambda_b0_TRUETAU","1","1","1","NMe","remove",0,0.015)
png("MC true PT")
// Means (stats): 0.00142408 (2.08224e+06), 0.00142369 (2.05192e+06)

SandB(MCppi,MCpK,"Lambda_b0_TRUETAU",PiReco,KReco,"1","NMe","remove",0,0.015)
// Means (stats): 0.0014133 (657701), 0.0014119 (635590)

gPad->SetLogy()
RooPlot* r = SandB(Tppi,TpK,"B_M",TruePion,TrueKaon,TruePsip,"NM","remove") // stripped Means (stats): 5616.82 (101324), 5478.07 (180581)
r->SetXTitle("Stripping Mass [MeV/c^{2}]");
overlay_line(4900,r);
overlay_line(6100,r);
png("MC true B_M")


RooPlot* rpsi = SandB(MCppi,MCpK,PsiM,PiReco,KReco,"1","MN","remove",0,4000)
rpsi->GetXaxis()->SetTitle("m_{#mu#mu} [MeV/c^{2}]")
rpsi->GetYaxis()->SetTitle("dP/dm_{#mu#mu}")
rpsi->Draw()
overlay_line(m_psi-80,rpsi,2);
overlay_line(m_psi+80,rpsi,2);
png("Lbpi and LbK mumu mass")

RooPlot* rpsif = SandB(MCppi,MCpK,PsiMass.GetTitle(),PiReco,KReco,"1","NI","remove")
// Means (stats): 0.940954 (657933), 0.94126 (635835)

RooPlot* rbmpi = SandB(MCppi,0,BMpi,PsiMass,"1",PiReco,"M","remove",4500,6500)
rbmpi->GetXaxis()->SetTitle("m_{#mu#mup#pi} [MeV/c^{2}]")
rbmpi->GetYaxis()->SetTitle("dP/dm_{#mu#mup#pi}")
rbmpi->Draw()
overlay_line(5120,rbmpi,2);
overlay_line(6120,rbmpi,2);
png("Lbpi mass")

RooPlot* rbmpif = SandB(MCppi,0,"abs("+BMpi+"-5620)<500",PiReco,PiReco && PsiMass,"1","NI","remove")
// Means (stats): 0.981211 (658368), 0.998969 (619093)

RooPlot* rbmK = SandB(MCpK,0,BMK,PsiMass,"1",KReco,"M","remove",4500,6500)
rbmK->GetXaxis()->SetTitle("m_{#mu#mupK} [MeV/c^{2}]")
rbmK->GetYaxis()->SetTitle("dP/dm_{#mu#mupK}")
rbmK->Draw()
//overlay_line(5120,rbmK,2);
//overlay_line(6120,rbmK,2);
png("LbK mass")

RooPlot* rbmKpi = SandB(MCpK,0,BMKasPi,PsiMass,"1",KReco,"M","remove",4000,6500)
rbmKpi->GetXaxis()->SetTitle("m_{#mu#mup#pi} [MeV/c^{2}]")
rbmKpi->GetYaxis()->SetTitle("dP/dm_{#mu#mup#pi}")
rbmKpi->Draw()
overlay_line(5120,rbmKpi,2);
overlay_line(6120,rbmKpi,2);
png("LbK as pi mass")

RooPlot* rbmpif = SandB(MCpK,0,"abs("+BMKasPi+"-5620)<500",KReco,KReco && PsiMass,"1","NI","remove")
// Means (stats): 0.946776 (636220), 0.971548 (598512)

RooPlot* rpt = SandB(MCppi,0,"piminus_TRUEPT","mprime>0.2","","1","NM","remove",0,2000)
rpt->SetMinimum(0.)
SetTitle("#pi p_{T} [MeV/c^{2}]",rpt)
overlay_line(500.,rpt)
png("true pi PT for mprime<0.2")

//==========================================================================================================
// Dalitz
//==========================================================================================================
gPad->SetLogy(0)
TString MCTruepK2 = "(Kminus_TRUEP_E+pplus_TRUEP_E)**2-(Kminus_TRUEP_X+pplus_TRUEP_X)**2-(Kminus_TRUEP_Y+pplus_TRUEP_Y)**2-(Kminus_TRUEP_Z+pplus_TRUEP_Z)**2"
TString MCTrueppi2 = "(piminus_TRUEP_E+pplus_TRUEP_E)**2-(piminus_TRUEP_X+pplus_TRUEP_X)**2-(piminus_TRUEP_Y+pplus_TRUEP_Y)**2-(piminus_TRUEP_Z+pplus_TRUEP_Z)**2"
TString MCTruepsip2 = "(J_psi_1S_TRUEP_E+pplus_TRUEP_E)**2-(J_psi_1S_TRUEP_X+pplus_TRUEP_X)**2-(J_psi_1S_TRUEP_Y+pplus_TRUEP_Y)**2-(J_psi_1S_TRUEP_Z+pplus_TRUEP_Z)**2"

//MCpK->Draw(MCTruepK2)
//MCppi->Draw(MCTrueppi2)
TProfile* tpK = new TProfile("tpK","tpK",100,m_psi+m_p,m_Lb-m_pi,-1,1)
TProfile* tppi = new TProfile("tppi","tppi",100,m_psi+m_p,m_Lb-m_pi,-1,1)
// Reconstruction efficiency
MCpK->Draw(TString(KReco.GetTitle())+TString(":sqrt(")+MCTruepsip2+TString(") >> tpK"))
MCppi->Draw(TString(PiReco.GetTitle())+TString(":sqrt(")+MCTruepsip2+TString(") >> tppi"))
   
//Double_t m = (sqrt(psipMass2(pv))-m_psi-m_p)/(m_Lb-m_psi-m_p-(isPion()?m_pi:m_K));
// Double_t mp = (1./TMath::Pi())*acos(2*m-1) ;

nbins = 50
TH1D* Kph = new TH1D("Kph","",nbins,0,1)
TH1D* piph = new TH1D("piph","",nbins,0,1)
TH1D* Kall = new TH1D("Kall","",nbins,0,1)
TH1D* piall = new TH1D("piall","",nbins,0,1)
TH1D* Kreco = new TH1D("Kreco","",nbins,0,1)
TH1D* pireco = new TH1D("pireco","",nbins,0,1)
TH1D* Kstrip = new TH1D("Kstrip","",nbins,0,1)
TH1D* pistrip = new TH1D("pistrip","",nbins,0,1)
TH1D* Kok = new TH1D("Kok","",nbins,0,1)
TH1D* piok = new TH1D("piok","",nbins,0,1)
TH1D* Knn = new TH1D("Knn","",nbins,0,1)
TH1D* pinn = new TH1D("pinn","",nbins,0,1)
 
PHK->Draw("mprime >> Kph")
PHpi->Draw("mprime >> piph")
THK->Draw("mprime >> Kall")
THpi->Draw("mprime >> piall")
MCpK->Draw("mprime >> Kreco",KReco)
MCppi->Draw("mprime >> pireco",PiReco)
NpK->Draw("mprime >> Kstrip","BKGCAT==1")
Nppi->Draw("mprime >> pistrip","BKGCAT==0")
NpK->Draw("mprime >> Kok","BKGCAT==1 && Category==-1 && ErrorCode==0")
Nppi->Draw("mprime >> piok","BKGCAT==0 && Category==1 && ErrorCode==0")
NpK->Draw("mprime >> Knn","BKGCAT==1 && Category==-1 && ErrorCode==0 && netOutput>0.552")
Nppi->Draw("mprime >> pinn","BKGCAT==0 && Category==1 && ErrorCode==0 && netOutput>0.552")

TH1* rKacc = Divide(Kall,Kph,"")
TH1* rpiacc = Divide(piall,piph,"")
TH1* rKreco = Divide(Kreco,Kph,"")
TH1* rpireco = Divide(pireco,piph,"")
TH1* rKstrip = Divide(Kstrip,Kph,"")
TH1* rpistrip = Divide(pistrip,piph,"")
TH1* rKok = Divide(Kok,Kph,"")
TH1* rpiok = Divide(piok,piph,"")
TH1* rKnn = Divide(Knn,Kph,"")
TH1* rpinn = Divide(pinn,piph,"")

TH1* rKreco2 = Divide(Kreco,Kall,"E")
TH1* rpireco2 = Divide(pireco,piall,"E")
TH1* rKstrip2 = Divide(Kstrip,Kreco,"E")
TH1* rpistrip2 = Divide(pistrip,pireco,"E")
TH1* rKok2 = Divide(Kok,Kstrip,"E")
TH1* rpiok2 = Divide(piok,pistrip,"E")
TH1* rKnn2 = Divide(Knn,Kok,"E")
TH1* rpinn2 = Divide(pinn,piok,"E")

gPad->SetLogy()
RooPlot* rk = NiceRooPlot(rKacc,rKreco,rKstrip,rKok,rKnn)
rk->SetMinimum(0.0001)
rk->SetMaximum(0.5)
rk->GetXaxis()->SetTitle("m'")
rk->GetYaxis()->SetTitle("Efficiency")
rk->Draw()
png("LbK efficiencies versus m'")

gPad->SetLogy()
RooPlot* rpi = NiceRooPlot(rpiacc,rpireco,rpistrip,rpiok,rpinn)
rpi->SetMinimum(0.0001)
rpi->SetMaximum(0.5)
rpi->GetXaxis()->SetTitle("m'")
rpi->GetYaxis()->SetTitle("Efficiency")
rpi->Draw()
png("Lbpi efficiencies versus m'")

// theta' ------------------------------------------------------------
TH1D* tKph = new TH1D("tKph","",nbins,0,1)
TH1D* tpiph = new TH1D("tpiph","",nbins,0,1)
TH1D* tKall = new TH1D("tKall","",nbins,0,1)
TH1D* tpiall = new TH1D("tpiall","",nbins,0,1)
TH1D* tKreco = new TH1D("tKreco","",nbins,0,1)
TH1D* tpireco = new TH1D("tpireco","",nbins,0,1)
TH1D* tKstrip = new TH1D("tKstrip","",nbins,0,1)
TH1D* tpistrip = new TH1D("tpistrip","",nbins,0,1)
TH1D* tKok = new TH1D("tKok","",nbins,0,1)
TH1D* tpiok = new TH1D("tpiok","",nbins,0,1)
TH1D* tKnn = new TH1D("tKnn","",nbins,0,1)
TH1D* tpinn = new TH1D("tpinn","",nbins,0,1)
 
PHK->Draw("thetaprime >> tKph")
PHpi->Draw("thetaprime >> tpiph")
THK->Draw("thetaprime >> tKall")
THpi->Draw("thetaprime >> tpiall")
MCpK->Draw("thetaprime >> tKreco",KReco)
MCppi->Draw("thetaprime >> tpireco",PiReco)
NpK->Draw("thetaprime >> tKstrip","BKGCAT==1")
Nppi->Draw("thetaprime >> tpistrip","BKGCAT==0")
NpK->Draw("thetaprime >> tKok","BKGCAT==1 && Category==-1 && ErrorCode==0")
Nppi->Draw("thetaprime >> tpiok","BKGCAT==0 && Category==1 && ErrorCode==0")
NpK->Draw("thetaprime >> tKnn","BKGCAT==1 && Category==-1 && ErrorCode==0 && netOutput>0.552")
Nppi->Draw("thetaprime >> tpinn","BKGCAT==0 && Category==1 && ErrorCode==0 && netOutput>0.552")

TH1* trKacc = Divide(tKall,tKph,"")
TH1* trpiacc = Divide(tpiall,tpiph,"")
TH1* trKreco = Divide(tKreco,tKph,"")
TH1* trpireco = Divide(tpireco,tpiph,"")
TH1* trKstrip = Divide(tKstrip,tKph,"")
TH1* trpistrip = Divide(tpistrip,tpiph,"")
TH1* trKok = Divide(tKok,tKph,"")
TH1* trpiok = Divide(tpiok,tpiph,"")
TH1* trKnn = Divide(tKnn,tKph,"")
TH1* trpinn = Divide(tpinn,tpiph,"")

TH1* trKreco2 = Divide(tKreco,tKacc,"E")
TH1* trpireco2 = Divide(tpireco,tpiacc,"E")
TH1* trKstrip2 = Divide(tKstrip,tKreco,"E")
TH1* trpistrip2 = Divide(tpistrip,tpireco,"E")
TH1* trKok2 = Divide(tKok,tKstrip,"E")
TH1* trpiok2 = Divide(tpiok,tpistrip,"E")
TH1* trKnn2 = Divide(tKnn,tKok,"E")
TH1* trpinn2 = Divide(tpinn,tpiok,"E")

gPad->SetLogy()
RooPlot* trk = NiceRooPlot(trKacc,trKreco,trKstrip,trKok,trKnn)
trk->SetMinimum(0.001)
trk->SetMaximum(0.5)
trk->GetXaxis()->SetTitle("#theta'")
trk->GetYaxis()->SetTitle("Efficiency")
trk->Draw()
png("LbK efficiencies versus theta'")

gPad->SetLogy()
RooPlot* trpi = NiceRooPlot(trpiacc,trpireco,trpistrip,trpiok,trpinn)
trpi->SetMinimum(0.001)
trpi->SetMaximum(0.5)
trpi->GetXaxis()->SetTitle("#theta'")
trpi->GetYaxis()->SetTitle("Efficiency")
trpi->Draw()
png("Lbpi efficiencies versus theta'")

// pi vs K =================================================
gPad->SetLogy(0)
RooPlot* rpKa = NiceRooPlot(rpiacc,rKacc)
SetTitle("m'","Efficiency",rpKa)
png("Lbpi and K acceptance efficiencies versus m'")

gPad->SetLogy(0)
RooPlot* trpKa = NiceRooPlot(trpiacc,trKacc)
SetTitle("#theta'","Efficiency",trpKa)
png("Lbpi and K acceptance efficiencies versus theta'")

gPad->SetLogy(0)
RooPlot* rpKr = NiceRooPlot(rpireco2,rKreco2)
SetTitle("m'","Efficiency",rpKr)
png("Lbpi and K reconstruction efficiencies versus m'")

gPad->SetLogy(0)
RooPlot* trpKr = NiceRooPlot(trpireco2,trKreco2)
SetTitle("#theta'","Efficiency",trpKr)
png("Lbpi and K reconstruction efficiencies versus theta'")

gPad->SetLogy(0)
RooPlot* rpKs = NiceRooPlot(rpistrip2,rKstrip2)
SetTitle("m'","Efficiency",rpKs)
png("Lbpi and K stripping efficiencies versus m'")

gPad->SetLogy(0)
RooPlot* trpKs = NiceRooPlot(trpistrip2,trKstrip2)
SetTitle("#theta'","Efficiency",trpKs)
png("Lbpi and K stripping efficiencies versus theta'")

gPad->SetLogy(0)
RooPlot* trpKok2 = NiceRooPlot(trpiok2,trKok2)
SetTitle("#theta'","Efficiency",trpKok2)
png("Lbpi and K OK efficiencies versus theta'")

gPad->SetLogy(0)
RooPlot* rpKok2 = NiceRooPlot(rpiok2,rKok2)
rpKok2->SetMaximum(1.0)
SetTitle("m'",rpKok2)
png("Lbpi and K OK efficiencies versus m'")

gPad->SetLogy(0)
RooPlot* trpKnn2 = NiceRooPlot(trpinn2,trKnn2)
SetTitle("#theta'","Efficiency",trpKnn2)
png("Lbpi and K NN efficiencies versus theta'")

gPad->SetLogy(0)
RooPlot* rpKnn2 = NiceRooPlot(rpinn2,rKnn2)
rpKnn2->SetMaximum(1.0)
SetTitle("m'","Efficiency",rpKnn2)
png("Lbpi and K NN efficiencies versus m'")

gPad->SetLogy(0)
RooPlot* trpKnn = NiceRooPlot(trpinn,trKnn)
SetTitle("#theta'","Efficiency",trpKnn)
png("Lbpi and K total efficiencies versus theta'")

gPad->SetLogy(0)
RooPlot* rpKnn = NiceRooPlot(rpinn,rKnn)
SetTitle("m'","Efficiency",rpKnn)
png("Lbpi and K total efficiencies versus m'")

// pi vs K Up and Down =================================================

nbins = 50
TH1D* UKph = new TH1D("UKph","",nbins,0,1)
TH1D* Upiph = new TH1D("Upiph","",nbins,0,1)
TH1D* UKall = new TH1D("UKall","",nbins,0,1)
TH1D* Upiall = new TH1D("Upiall","",nbins,0,1)
TH1D* UKreco = new TH1D("UKreco","",nbins,0,1)
TH1D* Upireco = new TH1D("Upireco","",nbins,0,1)
TH1D* UKstrip = new TH1D("UKstrip","",nbins,0,1)
TH1D* Upistrip = new TH1D("Upistrip","",nbins,0,1)
TH1D* UKok = new TH1D("UKok","",nbins,0,1)
TH1D* Upiok = new TH1D("Upiok","",nbins,0,1)
TH1D* UKnn = new TH1D("UKnn","",nbins,0,1)
TH1D* Upinn = new TH1D("Upinn","",nbins,0,1)
TH1D* DKph = new TH1D("DKph","",nbins,0,1)
TH1D* Dpiph = new TH1D("Dpiph","",nbins,0,1)
TH1D* DKall = new TH1D("DKall","",nbins,0,1)
TH1D* Dpiall = new TH1D("Dpiall","",nbins,0,1)
TH1D* DKreco = new TH1D("DKreco","",nbins,0,1)
TH1D* Dpireco = new TH1D("Dpireco","",nbins,0,1)
TH1D* DKstrip = new TH1D("DKstrip","",nbins,0,1)
TH1D* Dpistrip = new TH1D("Dpistrip","",nbins,0,1)
TH1D* DKok = new TH1D("DKok","",nbins,0,1)
TH1D* Dpiok = new TH1D("Dpiok","",nbins,0,1)
TH1D* DKnn = new TH1D("DKnn","",nbins,0,1)
TH1D* Dpinn = new TH1D("Dpinn","",nbins,0,1)
 
PHK->Draw("mprime >> DKph", "0.5") // phase space
PHpi->Draw("mprime >> Dpiph", "0.5") // phase space
THK->Draw("mprime >> DKall", "Polarity==-1")
THpi->Draw("mprime >> Dpiall", "Polarity==-1")
MCpK->Draw("mprime >> DKreco",KReco && "Polarity==-1")
MCppi->Draw("mprime >> Dpireco",PiReco && "Polarity==-1")
NpK->Draw("mprime >> DKstrip","BKGCAT==1 && Polarity==-1")
Nppi->Draw("mprime >> Dpistrip","BKGCAT==0 && Polarity==-1")
NpK->Draw("mprime >> DKok","BKGCAT==1 && Category==-1 && ErrorCode==0 && Polarity==-1")
Nppi->Draw("mprime >> Dpiok","BKGCAT==0 && Category==1 && ErrorCode==0 && Polarity==-1")
NpK->Draw("mprime >> DKnn","BKGCAT==1 && Category==-1 && ErrorCode==0 && netOutput>0.552 && Polarity==-1")
Nppi->Draw("mprime >> Dpinn","BKGCAT==0 && Category==1 && ErrorCode==0 && netOutput>0.552 && Polarity==-1")

PHK->Draw("mprime >> UKph", "0.5") // phase space
PHpi->Draw("mprime >> Upiph", "0.5") // phase space
THK->Draw("mprime >> UKall", "Polarity==1")
THpi->Draw("mprime >> Upiall", "Polarity==1")
MCpK->Draw("mprime >> UKreco",KReco && "Polarity==1")
MCppi->Draw("mprime >> Upireco",PiReco && "Polarity==1")
NpK->Draw("mprime >> UKstrip","BKGCAT==1 && Polarity==1")
Nppi->Draw("mprime >> Upistrip","BKGCAT==0 && Polarity==1")
NpK->Draw("mprime >> UKok","BKGCAT==1 && Category==-1 && ErrorCode==0 && Polarity==1")
Nppi->Draw("mprime >> Upiok","BKGCAT==0 && Category==1 && ErrorCode==0 && Polarity==1")
NpK->Draw("mprime >> UKnn","BKGCAT==1 && Category==-1 && ErrorCode==0 && netOutput>0.552 && Polarity==1")
Nppi->Draw("mprime >> Upinn","BKGCAT==0 && Category==1 && ErrorCode==0 && netOutput>0.552 && Polarity==1")

TH1* UrKacc = Divide(UKall,UKph,"")
TH1* Urpiacc = Divide(Upiall,Upiph,"")
TH1* UrKreco = Divide(UKreco,UKph,"")
TH1* Urpireco = Divide(Upireco,Upiph,"")
TH1* UrKstrip = Divide(UKstrip,UKph,"")
TH1* Urpistrip = Divide(Upistrip,Upiph,"")
TH1* UrKok = Divide(UKok,UKph,"")
TH1* Urpiok = Divide(Upiok,Upiph,"")
TH1* UrKnn = Divide(UKnn,UKph,"")
TH1* Urpinn = Divide(Upinn,Upiph,"")

TH1* UrKreco2 = Divide(UKreco,UKall,"E")
TH1* Urpireco2 = Divide(Upireco,Upiall,"E")
TH1* UrKstrip2 = Divide(UKstrip,UKreco,"E")
TH1* Urpistrip2 = Divide(Upistrip,Upireco,"E")
TH1* UrKok2 = Divide(UKok,UKstrip,"E")
TH1* Urpiok2 = Divide(Upiok,Upistrip,"E")
TH1* UrKnn2 = Divide(UKnn,UKok,"E")
TH1* Urpinn2 = Divide(Upinn,Upiok,"E")

TH1* DrKacc = Divide(DKall,DKph,"")
TH1* Drpiacc = Divide(Dpiall,Dpiph,"")
TH1* DrKreco = Divide(DKreco,DKph,"")
TH1* Drpireco = Divide(Dpireco,Dpiph,"")
TH1* DrKstrip = Divide(DKstrip,DKph,"")
TH1* Drpistrip = Divide(Dpistrip,Dpiph,"")
TH1* DrKok = Divide(DKok,DKph,"")
TH1* Drpiok = Divide(Dpiok,Dpiph,"")
TH1* DrKnn = Divide(DKnn,DKph,"")
TH1* Drpinn = Divide(Dpinn,Dpiph,"")

TH1* DrKreco2 = Divide(DKreco,DKall,"E")
TH1* Drpireco2 = Divide(Dpireco,Dpiall,"E")
TH1* DrKstrip2 = Divide(DKstrip,DKreco,"E")
TH1* Drpistrip2 = Divide(Dpistrip,Dpireco,"E")
TH1* DrKok2 = Divide(DKok,DKstrip,"E")
TH1* Drpiok2 = Divide(Dpiok,Dpistrip,"E")
TH1* DrKnn2 = Divide(DKnn,DKok,"E")
TH1* Drpinn2 = Divide(Dpinn,Dpiok,"E")

gPad->SetLogy(0)
RooPlot* rpKa = NiceRooPlot(Drpiacc,DrKacc,Urpiacc,UrKacc)
SetTitle("m'","Efficiency",rpKa)
png("Lbpi and K acceptance efficiencies versus m' UD")

gPad->SetLogy(0)
RooPlot* rpKr = NiceRooPlot(Drpireco2,DrKreco2,Urpireco2,UrKreco2)
SetTitle("m'","Efficiency",rpKr)
png("Lbpi and K reconstruction efficiencies versus m' UD")

gPad->SetLogy(0)
RooPlot* rpKs = NiceRooPlot(Drpistrip2,DrKstrip2,Urpistrip2,UrKstrip2)
SetTitle("m'","Efficiency",rpKs)
SetLimits(0,0.4,rpKs)
png("Lbpi and K stripping efficiencies versus m' UD")

gPad->SetLogy(0)
RooPlot* rpKok2 = NiceRooPlot(Drpiok2,DrKok2,Urpiok2,UrKok2)
SetTitle("m'",rpKok2)
SetLimits(0.4,0.8,rpKok2)
png("Lbpi and K OK efficiencies versus m' UD")

gPad->SetLogy(0)
RooPlot* rpKnn2 = NiceRooPlot(Drpinn2,DrKnn2,Urpinn2,UrKnn2)
rpKnn2->SetMaximum(1.0)
SetTitle("m'","Efficiency",rpKnn2)
SetLimits(0.3,0.8,rpKok2)
png("Lbpi and K NN efficiencies versus m' UD")

gPad->SetLogy(0)
RooPlot* rpKnn = NiceRooPlot(Drpinn,DrKnn,Urpinn,UrKnn)
SetTitle("m'","Efficiency",rpKnn)
png("Lbpi and K total efficiencies versus m' UD")




// theta':m' =============================================================================
nbins = 20
TH2D* t2Kph = Make2DPlot("t2Kph","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2piph = Make2DPlot("t2piph","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2Kall = Make2DPlot("t2Kall","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2piall = Make2DPlot("t2piall","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2Kreco = Make2DPlot("t2Kreco","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2pireco = Make2DPlot("t2pireco","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2Kstrip = Make2DPlot("t2Kstrip","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2pistrip = Make2DPlot("t2pistrip","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2Kok = Make2DPlot("t2Kok","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2piok = Make2DPlot("t2piok","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2Kok2 = Make2DPlot("t2Kok2","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2piok2 = Make2DPlot("t2piok2","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2Knn = Make2DPlot("t2Knn","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2pinn = Make2DPlot("t2pinn","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2Knn2 = Make2DPlot("t2Knn2","m'",nbins,0,1,"#theta'",nbins,0,1)
TH2D* t2pinn2 = Make2DPlot("t2pinn2","m'",nbins,0,1,"#theta'",nbins,0,1)
 
PHK->Draw("thetaprime:mprime >> t2Kph")
PHpi->Draw("thetaprime:mprime >> t2piph")
THK->Draw("thetaprime:mprime >> t2Kall")
THpi->Draw("thetaprime:mprime >> t2piall")
MCpK->Draw("thetaprime:mprime >> t2Kreco",KReco)
MCppi->Draw("thetaprime:mprime >> t2pireco",PiReco)
NpK->Draw("thetaprime:mprime >> t2Kstrip","BKGCAT==1")
Nppi->Draw("thetaprime:mprime >> t2pistrip","BKGCAT==0")
NpK->Draw("thetaprime:mprime >> t2Kok","BKGCAT==1 && Category==-1 && ErrorCode==0")
Nppi->Draw("thetaprime:mprime >> t2piok","BKGCAT==0 && Category==1 && ErrorCode==0")
NpK->Draw("thetaprime:mprime >> t2Knn","BKGCAT==1 && Category==-1 && ErrorCode==0 && netOutput>0.552")
Nppi->Draw("thetaprime:mprime >> t2pinn","BKGCAT==0 && Category==1 && ErrorCode==0 && netOutput>0.552")
NpK->Draw("thetaprime:mprime >> t2Knn2","BKGCAT==1 && Category==-1 && ErrorCode==0 && netOutput>0.552")
Nppi->Draw("thetaprime:mprime >> t2pinn2","BKGCAT==0 && Category==1 && ErrorCode==0 && netOutput>0.552")
NpK->Draw("thetaprime:mprime >> t2Kok2","BKGCAT==1 && Category==-1 && ErrorCode==0")
Nppi->Draw("thetaprime:mprime >> t2piok2","BKGCAT==0 && Category==1 && ErrorCode==0")

gPad->SetLogy(0)
gStyle->SetPalette(0)
t2Kph->Draw("lego2")
png("LbK MC True Dalitz")
t2piph->Draw("lego2")
png("Lbpi MC True Dalitz")

// as histos are overwritten, order is important. Always go up
t2Knn->Divide(t2Kok)
t2pinn->Divide(t2piok)
t2Knn2->Divide(t2Kph)
t2pinn2->Divide(t2piph)
t2Kok->Divide(t2Kstrip)
t2piok->Divide(t2pistrip)
t2Kstrip->Divide(t2Kreco)
t2pistrip->Divide(t2pireco)
t2Kreco->Divide(t2Kall)
t2pireco->Divide(t2piall)
t2Kall->Divide(t2Kph)
t2piall->Divide(t2piph)
t2Kok2->Divide(t2Kph) // overall w/o NN
t2piok2->Divide(t2piph)

t2Kall->Draw("coltext")
png("LbK Dalitz efficiency Acceptance:Phase Space")
t2Kreco->Draw("coltext")
png("LbK Dalitz efficiency Reco:Acceptance")
t2Kstrip->Draw("coltext")
png("LbK Dalitz efficiency Strip:Reco")
t2Kok->Draw("coltext")
png("LbK Dalitz efficiency Presel:Strip")
t2Knn->Draw("coltext")
png("LbK Dalitz efficiency NN:Presel")
t2Knn2->Draw("coltext")
png("LbK Dalitz efficiency NN:Phase Space")
t2Kok2->Draw("coltext")
png("LbK Dalitz efficiency Presel:Phase Space") // the whole thing (w/o NN)

t2piall->Draw("coltext")
png("Lbpi Dalitz efficiency Acceptance:Phase Space")
t2pireco->Draw("coltext")
png("Lbpi Dalitz efficiency Reco:Acceptance")
t2pistrip->Draw("coltext")
png("Lbpi Dalitz efficiency Strip:Reco")
t2piok->Draw("coltext")
png("Lbpi Dalitz efficiency Presel:Strip")
t2pinn->Draw("coltext")
png("Lbpi Dalitz efficiency NN:Presel")
t2pinn2->Draw("coltext")
png("Lbpi Dalitz efficiency NN:Phase Space")
t2piok2->Draw("coltext")
png("Lbpi Dalitz efficiency Presel:Phase Space") // the whole thing (w/o NN)

for ( int i=0 ; i<(nbins+2)*(nbins+2); i++) { cout << ", " << t2Knn2->GetBinContent(i) ; } cout << endl ;
for ( int i=0 ; i<(nbins+2)*(nbins+2); i++) { cout << ", " << t2pinn2->GetBinContent(i) ; } cout << endl ;



//==========================================================================================================
// True Mass
//==========================================================================================================
// look at the tail
gPad->SetLogy()
TCut OK("ErrorCode[0]==0 && netOutput[0]>0.552")
TCut Bad("abs(piminus_PZ-piminus_TRUEP_Z)/piminus_TRUEP_Z>0.05")

RooPlot* rm = SandB(Tppi,TpK,"(Category[0]==1)*B_FullFit_M[0]+(Category[0]==-1)*B_SubpK_M[0]","BKGCAT==0 && Category[0]==1","BKGCAT==1 && Category[0]==-1",OK,"NM","remove",5000,6000)
// same plots as in FitTruth

gPad->SetLogy(1)
RooPlot* rp = SandB(Tppi,TpK,"(piminus_PZ-piminus_TRUEP_Z)/piminus_TRUEP_Z","BKGCAT==0 && Category[0]==1","BKGCAT==1 && Category[0]==-1",OK,"NM","remove",-0.4,0.2)
SetTitle("M (p_{z}^{reco}-p_{z}^{true})/p_{z}^{true}",rp)
png("Delta M Pz on Lbpi and LbK")

RooPlot* rpo = SandB(Tppi,TpK,"(pplus_PZ-pplus_TRUEP_Z)/pplus_TRUEP_Z","BKGCAT==0 && Category[0]==1","BKGCAT==1 && Category[0]==-1",OK,"NM","remove",-0.2,0.2)
SetTitle("p (p_{z}^{reco}-p_{z}^{true})/p_{z}^{true}",rpo)
png("Delta p Pz on Lbpi and LbK")


// Vanya's suggestion
RooPlot* rp2 = SandB(Tppi,0,"(piminus_PZ-piminus_TRUEP_Z)/piminus_TRUEP_Z","piminus_PZ<20000","piminus_PZ>20000",OK && "BKGCAT==0 && Category[0]==1","NM","remove",-0.4,0.2)
SetTitle("M (p_{z}^{reco}-p_{z}^{true})/p_{z}^{true}",rp2)
png("Delta M Pz on Lbpi vs momentum")

SandB(Tppi,0,"(piminus_PZ-piminus_TRUEP_Z)/piminus_TRUEP_Z",!Bad,Bad,OK && "BKGCAT==0 && Category[0]==1","M","remove",-0.4,0.2)
RooPlot* rq = SandB(Tppi,0,"piminus_TRUEP_Z",!Bad,Bad,OK && "BKGCAT==0 && Category[0]==1","LNM","remove")
RooPlot* rq = SandB(Tppi,0,"piminus_TRUEPT",!Bad,Bad,OK && "BKGCAT==0 && Category[0]==1","LNM","remove")
RooPlot* rq = SandB(Tppi,0,"piminus_TRUEID",!Bad,Bad,OK && "BKGCAT==0 && Category[0]==1","NM","remove")
RooPlot* rqp = SandB(Tppi,0,"piminus_TRACK_CHI2NDOF",!Bad,Bad,OK && "BKGCAT==0 && Category[0]==1","NM","remove")
RooPlot* rqk = SandB(Tppi,TpK,"piminus_TRACK_CHI2NDOF","BKGCAT==0 && Category[0]==1","BKGCAT==1 && Category[0]==-1",OK,"NM","remove",0,3)

SetTitle("M Track #chi^{2}/ndf",rqp)
png("Meson Track chi2 Lbpi good and bad")
SetTitle("M Track #chi^{2}/ndf",rqk)
png("Meson Track chi2 Lbpi and LbK")

gPad->SetLogy()
RooPlot* rqi = SandB(Tppi,0,"piminus_isMuon",!Bad,Bad,OK && "BKGCAT==0 && Category[0]==1","NI","remove",-0.5,1.5)
RooPlot* rqi2 = SandB(Tppi,TpK,"piminus_isMuon","BKGCAT==0 && Category[0]==1","BKGCAT==1 && Category[0]==-1",OK,"NI","remove",-0.5,1.5)

RooPlot* rki = SandB(TpK,0,"(piminus_PZ-piminus_TRUEP_Z)/piminus_TRUEP_Z","piminus_isMuon==0","piminus_isMuon==1",OK && "BKGCAT==1 && Category[0]==-1","NM","remove",-0.4,0.2)

SetTitle("M (p_{z}^{reco}-p_{z}^{true})/p_{z}^{true}",rpi)
png("Delta M Pz on Lbpi ismuon 0 and 1")

SetTitle("M (p_{z}^{reco}-p_{z}^{true})/p_{z}^{true}",rki)
png("Delta M Pz on LbK ismuon 0 and 1")


gPad->SetLogy(0)
RooPlot* rpp = TwoProfile(Tppi,TpK,"piminus_TRUEP_Z","abs(piminus_PZ-piminus_TRUEP_Z)/piminus_TRUEP_Z>0.05","BKGCAT==0 && Category[0]==1","BKGCAT==1 && Category[0]==-1",OK,"LM","remove",3e3,2e5,50)  

RooPlot* rt = SandB(Tppi,TpK,"piminus_PZ","BKGCAT==0 && Category[0]==1","BKGCAT==1 && Category[0]==-1",OK,"NML","remove")
RooPlot* rt = SandB(Tppi,TpK,"pplus_PZ","BKGCAT==0 && Category[0]==1","BKGCAT==1 && Category[0]==-1",OK,"NML","remove")
// should I cut at 3000?

SandB(Tppi,0,"mprime[0]","piminus_PZ>3000","","BKGCAT==0 && Category[0]==1","NM","remove",0,1)
SandB(Tppi,0,"thetaprime[0]","piminus_PZ>3000","","BKGCAT==0 && Category[0]==1","N","remove",0,1)

