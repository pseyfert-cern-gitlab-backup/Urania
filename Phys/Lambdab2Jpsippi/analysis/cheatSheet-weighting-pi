root.exe
.L ../analysis/FourPlots.C 
gStyle->SetPalette(0)
TFile* fnpi = TFile::Open("LambdabMC-Lbpi-Sim08a-1122-1123-1124-1125-NN.root")
TFile* fnk = TFile::Open("LambdabMC-LbK-Sim08a-1127-1128-1129-1137-NN.root")
TNNppi = (TTree*)fnpi->Get("NetTree")
TNNpK = (TTree*)fnk->Get("NetTree")
TChain* TNN = new TChain("NetTree")
TNN->Add("Lambdab-S20r1-1062-NN.root")
TNN->Add("Lambdab-S20-1063-NN.root")
TChain* TT = new TChain("WeightTree")
TT->Add("Lambdab-S20X-1062-tree-0.552-SW.root")
TNN->AddFriend(TT)
//TNN->Draw("wMass[0]:PsippiMass[0]","(sweightLb[0]>-3)*(Category[0]==1)")

TCut OptimalNN("netOutput>0.552")
TCut OK("ErrorCode==0")
TCut Trueppi("BKGCAT==0")

char* WL = "sweightLb*(sweightLb>-3)*(wCategory==1)"
char* WLK = "sweightLb*(sweightLb>-3)*(wCategory==-1)"
char* WB = "sweightBkg*(sweightLb>-3)*(wCategory==1)"
char* Wpi1 = "(netOutput>0.552)*(BKGCAT==0)*(Category==1)*(ErrorCode==0)*PTWeight*SPDWeight"
char* Wpi = "(netOutput>0.552)*(BKGCAT==0)*(Category==1)*(ErrorCode==0)*PTWeight*DalitzWeight2*SPDWeight"
char* WK = "(netOutput>0.552)*(BKGCAT==1)*(Category==-1)*(ErrorCode==0)*PTWeight*DalitzWeight2*NNEffWeight*SPDWeight"


// if on lxplus
TChain* T = new TChain("BetaSLambdab2JpsippiDetachedLine_Tuple/DecayTree")
T->Add("root://castorlhcb.cern.ch///castor/cern.ch/user/p/pkoppenb/Lambdab/Lambdab-S20r1-1062.root")
T->Add("root://castorlhcb.cern.ch///castor/cern.ch/user/p/pkoppenb/Lambdab/Lambdab-S20-1063.root")
T->AddFriend(TNN)
T->AddFriend(TT)

TFile* fTpi = TFile::Open("root://castorlhcb.cern.ch///castor/cern.ch/user/p/pkoppenb/Lambdab/LambdabMC-Lbpi-Sim08a-1122-1123-1124-1125.root")
TTree* Tpi = (TTree*)fTpi->Get("BetaSLambdab2JpsippiDetachedLine_TupleMC/DecayTree")
Tpi->AddFriend(TNNppi)
Tpi->Draw("netOutput[0] >> h(100,-1,1)")
Tpi->Draw("B_FullFit_M[0]:PsippiMass[0]", "Category[0]==1 && ErrorCode[0]==0")

TFile* fTK = TFile::Open("root://castorlhcb.cern.ch///castor/cern.ch/user/p/pkoppenb/Lambdab/LambdabMC-LbK-Sim08a-1127-1128-1129-1137.root")
TTree* TK = (TTree*)fTK->Get("BetaSLambdab2JpsippiDetachedLine_TupleMC/DecayTree")
TK->AddFriend(TNNpK)
TK->Draw("netOutput[0] >> h(100,-1,1)")
TK->Draw("B_SubpK_M[0]:PsipKMass[0]", "Category[0]==-1 && ErrorCode[0]==0") 


// ========================== The actual weighting

RooPlot* rm = SandB(TNN,TNNppi,"mprime",WL,Wpi1,"1","N","remove",0,1,50)
RooPlot* rt = SandB(TNN,TNNppi,"thetaprime",WL,Wpi1,"1","N","remove",0,1,50)
rm->SetMinimum(0.)
SetTitle("m'",rm)
png("Lbpi mprime before weighting")
rt->SetMinimum(0.)
SetTitle("#theta'",rt)
png("Lbpi tprime before weighting")

// ========================== The actual weighting
int nbm = 10
int nbt = 20
TString Tnbm = ""; Tnbm += nbm;
TString Tnbt = ""; Tnbt += nbt;
TH2D* hPiD = Make2DPlot("hPiD","m'",nbm,0,1,"#theta'",nbt,0,1)
TH2D* hPiM = Make2DPlot("hPiM","m'",nbm,0,1,"#theta'",nbt,0,1)
TH2D* hPiM2 = Make2DPlot("hPiM2","m'",nbm,0,1,"#theta'",nbt,0,1)
// Try with a trivial TH2D
//gPad->SetLogy(0)
TNN->Draw("thetaprime:mprime >> hPiD",WL)
TNNppi->Draw("thetaprime:mprime >> hPiM", Wpi1)
hPiD->Draw("col")
.L ~/codes/rootmacros/AllMacroes.C
TH2D* hPi = Divide2D(&hPiD,&hPiM)  // extremely shaky
hPi->Draw("lego2")
Normalise(hPi,"A")
gPad->SetLogz(1)
hPi->SetMinimum(0)
hPi->Draw("coltext")
png("Pion reweighting "+Tnbm+"x"+Tnbt)
for ( int i=0 ; i<(nbm+2)*(nbt+2); i++) { cout << ", " << (hPi->GetBinContent(i)>0?hPi->GetBinContent(i):0.) ; } cout << endl ;
for ( int i=0 ; i<(nbm+2)*(nbt+2); i++) { cout << ", " << (hPi->GetBinContent(i)>0?hPi->GetBinError(i):0.) ; } cout << endl ;

gPad->SetLogz(1)
c1.SetTheta(30);  
c1.SetPhi(-40);
hPiD->SetMinimum(0.1)
hPiD->Draw("lego2")
png("Pion reweighting "+Tnbm+"x"+Tnbt+" lego")

TH1D* hPistats = new TH1D("hPistats","hPistats",32,-1.,15)
for ( int i=0 ; i<(nbm+2)*(nbt+2); i++) { hPistats->Fill(hPiD->GetBinContent(i)) ; } 
hPistats->Draw()

TH1D* hPistatsL = new TH1D("hPistatsL","hPistatsL",25,-1.5,1.5)
for ( int i=0 ; i<(nbm+2)*(nbt+2); i++) { hPistatsL->Fill(log(hPiD->GetBinContent(i))/log(10.)) ; } 
hPistatsL->Draw()

//-------------------------------------------------------------------------------
// Check - Do that with LbK in the same plot
// 
RooPlot* rm2 = SandB(TNN,TNNppi,"mprime",WL,Wpi,"1","N","remove",0,1,50)
RooPlot* rt2 = SandB(TNN,TNNppi,"thetaprime",WL,Wpi,"1","N","remove",0,1,50)
rm2->SetMinimum(0.)
SetTitle("m'",rm2)
png("Lbpi mprime after weighting")
rt2->SetMinimum(0.)
SetTitle("#theta'",rt2)
png("Lbpi tprime after weighting")

RooPlot* rtK2 = SandB(TNN,TNNpK,"thetaprime",WLK,WK,"1","N","remove",0,1,50)


//-------------------------------------------------------------------------------
// Check - Do that with LbK in the same plot
// 
RooPlot* rt = FourUnblindedPlots(TNN,TNNppi,TNNpK,"thetaprime",OptimalNN,"N","",0,1,25)
RooPlot* rm = FourUnblindedPlots(TNN,TNNppi,TNNpK,"mprime",OptimalNN,"N","",0,1,25)

rt->SetMinimum(0.)
SetTitle("#theta'",rt)
png("FourUnblindedPlots of theta'")
rm->SetMinimum(0.)
SetTitle("m'",rm)
png("FourUnblindedPlots of m'")

RooPlot* rn = FourUnblindedPlots(TNN,TNNppi,TNNpK,"netOutput","1","N","",0.552,1,25) // No NN cut needed

//-------------------------------------------------------------------------------
Double_t mLb = 5620 ;
Double_t mBd = 5279.5 ;
Double_t mBu = 5279.17 ;
Double_t mBs = 5366.3 ;
const double m_psi = 3096.916 ;
const double m_p   =  938.272 ;
const double m_pi  =  139.570 ;
const double m_Lb  =  5620.0 ;
const double m_K  =  493.677 ;
gPad->SetLogy(0)
RooPlot* r = FourUnblindedPlots(TNN,TNNppi,TNNpK,"sqrt(pMMass2)",OptimalNN,"N","remove",m_p+m_pi,m_Lb-m_psi,25)
r->SetXTitle("m_{pM} [MeV/c^{2}]");
png("B_FourUnblindedPlots_of_pMMass2")
r = FourUnblindedPlots(TNN,TNNppi,TNNpK,"sqrt(psiMMass2)",OptimalNN,"N","remove",m_psi+m_pi,m_Lb-m_p,25)
r->SetXTitle("m_{J/#psiM} [MeV/c^{2}]");
png("B_FourUnblindedPlots_of_psiMMass2")
r = FourUnblindedPlots(TNN,TNNppi,TNNpK,"sqrt(psipMass2)",OptimalNN,"N","remove",m_psi+m_p,m_Lb-m_pi,25)
r->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
png("B_FourUnblindedPlots_of_psipMass2")

gPad->SetLogy(0)
r = FourUnblindedPlots(T,Tpi,TK,"nSPDHits",OptimalNN,"NM","",0,800,40); 
r->SetMinimum(1e-4)
r->Draw()
png("B_FourUnblindedPlots_of_nSPDHits")

gPad->SetLogy(0)
r = FourUnblindedPlots(T,Tpi,TK,"(Category==1)*(B_FullFit _chi2[0])+(Category==-1)*(B_SubpK_chi2[0])",OptimalNN,"NM","remove",0,40,40); 
SetTitle("#Lambda_{b}^{0} DTF #chi^{2}",r)
png("B FourUnblindedPlots_of_B_FullFit_chi2")

r = FourUnblindedPlots(T,Tpi,TK,"(Category==1)*(B_FullFit_ctau[0])+(Category==-1)*(B_SubpK_ctau[0])",OptimalNN,"NM","remove",0.03,3); 
SetTitle("#Lambda_{b}^{0} c#tau [mm]",r)
png("B FourUnblindedPlots_of_B_FullFit_ctau")


// need those too
rp = FourUnblindedPlots(T,Tpi,TK,"B_P",OptimalNN,"N","remove",1000,400000)
rpt = FourUnblindedPlots(T,Tpi,TK,"B_PT",OptimalNN,"N","remove",500,30000)
rpt->SetMinimum(0.)
SetTitle("#Lambda_{b}^{0} p_{T} [MeV/c^{2}]",rpt)
png("B FourUnblindedPlots_of_B_PT")
rp->SetMinimum(0.)
SetTitle("#Lambda_{b}^{0} p [MeV/c^{2}]",rp)
png("B FourUnblindedPlots_of_B_P")

rct1 = SandB(T,TK,"B_SubpK_ctau","sweightLb*(sweightLb>-3)*(Category==-1)","(Category==-1)*(BKGCAT==1)*(ErrorCode==0)*DalitzWeight*SPDWeight*PTWeight2*NNEffWeight",OptimalNN,"NMe2","remove",0.5,4); 

rct2 = SandB(T,Tpi,"B_FullFit_ctau","sweightLb*(sweightLb>-3)*(Category==1)","(Category==1)*(BKGCAT==0)*(ErrorCode==0)*DalitzWeight*SPDWeight*PTWeight2*NNEffWeight",OptimalNN,"NMe2","remove",0.5,4); 


r = FourUnblindedPlots(T,Tpi,TK,"B_ENDVERTEX_CHI2/B_ENDVERTEX_NDOF",OptimalNN,"N","remove",0,5,50); 
r->SetMinimum(0.01)
SetTitle("#Lambda_{b}^{0} vertex #chi^{2}/n_{DOF}",r)
png("B_FourUnblindedPlots_of_B_ENDVERTEX_CHI2")
rip = FourUnblindedPlots(T,Tpi,TK,"B_AllIPchi2",OptimalNN,"NML","",0.01,100); 
SetTitle("#Lambda_{b}^{0} log_{10}(min IP #chi^{2})",rip)
png("B_FourUnblindedPlots_of_B_AllIPchi2")

r = FourUnblindedPlots(T,Tpi,TK,"min(muplus_IPCHI2_OWNPV,muplus_IPCHI2_OWNPV)",OptimalNN,"NML","",0.1,300); 
r->SetMinimum(0.001)
SetTitle("#mu log_{10}(min(IP#chi^{2}))",r)
png("B_FourUnblindedPlots_of_min(muplus_IPCHI2_OWNPV,muplus_IPCHI2_OWNPV)")

r = FourUnblindedPlots(T,Tpi,TK,"pplus_PT",OptimalNN,"NML","",500,10000); 
r = FourUnblindedPlots(T,Tpi,TK,"pplus_PZ",OptimalNN,"NML","",10000,200000); 
SetTitle("p log_{10}(P_{z}c/GeV)]",r)
png("B_FourUnblindedPlots_of_pplus_PZ")

r = FourUnblindedPlots(T,Tpi,TK,"pplus_PZ",OptimalNN,"NM","",1000,20000); 

r = FourUnblindedPlots(T,Tpi,TK,"pplus_IPCHI2_OWNPV",OptimalNN,"NML","",9,10000); 
r->SetMinimum(0.02)
SetTitle("p minimum IP #chi^{2}",r)
png("B_FourUnblindedPlots_of_pplus_IPCHI2_OWNPV")

gPad->SetLogy()
r = FourUnblindedPlots(T,Tpi,TK,"pplus_ProbNNp",OptimalNN,"NM","",0,1); 
r->SetMinimum(0.1)
r->Draw()
png("B_FourUnblindedPlots_of_pplus_ProbNNp")
r = FourUnblindedPlots(T,Tpi,TK,"pplus_ProbNNk",OptimalNN,"NM","",0,1); 
r = FourUnblindedPlots(T,Tpi,TK,"pplus_ProbNNpi",OptimalNN,"NM","",0,1); 


gPad->SetLogy(0)
r = FourUnblindedPlots(T,Tpi,TK,"piminus_PT",OptimalNN,"NML","",500,10000); 
r = FourUnblindedPlots(T,Tpi,TK,"piminus_PZ",OptimalNN,"NML","",3000,100000); 


r = FourUnblindedPlots(T,Tpi,TK,"piminus_P",OptimalNN,"NM","",0,100000); 
SetTitle("Meson P [GeV/c^{2}]",r)
png("B_FourUnblindedPlots_of_piminus_P")


r = FourUnblindedPlots(T,Tpi,TK,"piminus_IPCHI2_OWNPV",OptimalNN,"NML","",5,100000); 
r = FourUnblindedPlots(T,Tpi,TK,"piminus_TRACK_GhostProb",OptimalNN,"NML","",0.003,1); 
r->SetMinimum(0.01)
SetTitle("M Track Ghost log(prob)/log(10.)",r)
png("B_FourUnblindedPlots_of_piminus_TRACK_GhostProb")

r = FourUnblindedPlots(T,Tpi,TK,"pplus_TRACK_GhostProb",OptimalNN,"NML","",0.0003,1); 
r->SetMinimum(0.01)
SetTitle("p Track Ghost log(prob)/log(10.)",r)
png("B_FourUnblindedPlots_of_pplus_TRACK_GhostProb")

r = FourUnblindedPlots(T,Tpi,TK,"piminus_ProbNNghost",OptimalNN,"NML","",0.0001,1); 
r->SetMinimum(0.01)
SetTitle("M ANN Ghost log(prob)/log(10.)",r)
png("B_FourUnblindedPlots_of_pimunus_ProbNNghost")

png("B_FourUnblindedPlots_of_pplus_ProbNNghost")
r = FourUnblindedPlots(T,Tpi,TK,"pplus_ProbNNghost",OptimalNN,"NML","",0.001,1); 
r->SetMinimum(0.01)
SetTitle("p ANN Ghost log(prob)/log(10.)",r)
png("B_FourUnblindedPlots_of_pplus_ProbNNghost",r)

r = FourUnblindedPlots(T,Tpi,TK,"nPV",OptimalNN,"NMI","",1,9); 

gPad->SetLogy(0)
r = FourUnblindedPlots(T,0,0,"2011+(GpsTime-1293840000e6)/(3.15576e13)",OptimalNN,"NM","",2011,2013,24) 
SetTitle("GPS Time in Years",r)
png("B_FourUnblindedPlots_of_GpsTime")

gPad->SetLogy(1)
r = FourUnblindedPlots(T,Tpi,TK,"netOutput",OptimalNN,"NM","",-1,1,100); 
r->SetMinimum(1e-1)
png("B_FourUnblindedPlots_of_netOutput") // done in cheatSheet-NN
//------------------------------------------------------------------------------
// pid
r = FourUnblindedPlots(T,Tpi,TK,"piminus_ProbNNpi",OptimalNN,"NM","",0,1); 
r = FourUnblindedPlots(T,Tpi,TK,"piminus_ProbNNk",OptimalNN,"NM","",0,1); 

rppt = FourUnblindedPlots(T,Tpi,TK,"Psi_PT",OptimalNN,"LNM","",10**2.5,10**4.5); 
rmpt = FourUnblindedPlots(T,Tpi,TK,"max(muplus_PT,muminus_PT)",OptimalNN,"LNM","",10**3,10**4.5); 
rm2pt = FourUnblindedPlots(T,Tpi,TK,"muplus_PT*muminus_PT",OptimalNN,"LNM","",10**6,10**8); 
SetTitle("J/#psi p_{T} [MeV/c^{2}]",rppt)
png("B_FourUnblindedPlots_of_Psi_PT") 
SetTitle("max(#mu p_{T}) [MeV/c^{2}]",rmpt)
png("B_FourUnblindedPlots_of_max_mu_PT") 
SetTitle("(#mu^{+} p_{T})#times(#mu^{-} p_{T}) [MeV^{2}/c^{4}]",rm2pt)
png("B_FourUnblindedPlots_of_muon_PT_product") 

//------------------------------------------------------------------------------
// CP weighting
//------------------------------------------------------------------------------

r = SandB(T,Tpi,"piminus_P/1000.","sweightLb*(sweightLb>-3)*(Category==1)","(Category==1)*(BKGCAT==0)*(ErrorCode==0)*DalitzWeight2*SPDWeight*PTWeight",OptimalNN,"NM","Lbpi weighted pion P",0,100)
SetTitle("#pi p [GeV/c^{2}]",r)
png("Lbpi weighted pion P")
r = SandB(T,TK,"piminus_P/1000.","sweightLb*(sweightLb>-3)*(Category==-1)","(Category==-1)*(BKGCAT==1)*(ErrorCode==0)*DalitzWeight2*SPDWeight*PTWeight",OptimalNN,"NM","LbK weighted kaon P",0,100)
SetTitle("K p [GeV/c^{2}]",r)
png("LbK weighted kaon P")

double kskp[60] = { 0,0,4,16,29,39,46,50,52,50,47,46,44,42,41,38,38,33,31,29,26,24,22,20,18,17,16,14,14,12,12,10,10,8,9,8,7,7,6,6,5,5,4,4,4,4,3,3,3,3,3,2,2,2,2,2,2,2,2,1 };
double kspp[60] = { 0,15,56,65,64,61,60,57,54,52,48,42,42,37,32,30,28,25,23,19,19,18,16,14,12,11,10,10,10,8,7,6,5,6,5,4,4,4,3,3,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0 };

TH1D LbpiP("LbpiP","LbpiP",30,0,100.)
TH1D LbKP("LbKP","LbKP",30,0,100.)
TH1D BdpiP("BdpiP","BdpiP",60,0,100.)
TH1D BdKP("BdKP","BdKP",60,0,100.)

T->Draw("piminus_P/1000. >> LbpiP","sweightLb*(sweightLb>-3)*(Category==1)")
T->Draw("piminus_P/1000. >> LbKP","sweightLb*(sweightLb>-3)*(Category==-1)")

for ( int i = 1; i<=60; i++) BdpiP.SetBinContent(i,kspp[i-1]) ;
for ( int i = 1; i<=60; i++) BdKP.SetBinContent(i,kskp[i-1]) ;
for ( int i = 1; i<=60; i++) BdpiP.SetBinError(i,0.12*sqrt(kspp[i-1])) ;
for ( int i = 1; i<=60; i++) BdKP.SetBinError(i,0.12*sqrt(kskp[i-1])) ;

BdpiP->Rebin(2)
BdKP->Rebin(2)


Normalise(&BdpiP,"A")
Normalise(&BdKP,"A")
Normalise(&LbpiP,"A")
Normalise(&LbKP,"A")

RooPlot* rp = NiceRooPlot(LbpiP,BdpiP,"N")
rp->SetMinimum(0.)
SetTitle("#pi p [GeV/c^{2}]",rp)
png("pion momentum in Lbpi and Bd")
RooPlot* rk = NiceRooPlot(LbKP,BdKP,"N")
rk->SetMinimum(0.)
SetTitle("K p [GeV/c^{2}]",rk)
png("kaon momentum in LbK and Bd")

TH1D* cphrpi = (TH1D*)Divide(&BdpiP,&LbpiP)
TH1D* cphrK = (TH1D*)Divide(&BdKP,&LbKP)

RooPlot* r = NiceRooPlot(*cphrpi,*cphrK)
r->SetMinimum(0.)
r->SetMaximum(7.)
SetTitle("hadron p [GeV/c^{2}]","weight",r)
png("hadron p weights")


for ( int i = 1; i<=30; i++) cout << cphrpi->GetBinContent(i) <<", " ;
cout << endl ;
// 3.65004, 1.12394, 0.81868, 0.77473, 0.841625, 0.781373, 1.07851, 1.04944, 1.2595, 1.10522, 1.2006, 1.51898, 1.21988, 1.92033, 1.29889, 1.21661, 1.93867, 6.49302, 2.89682, 1.93389, 1.37277, 0.563284, 8.21893, 1.6977, 1.29652, -0, 0, 0, 0, -0
for ( int i = 1; i<=30; i++) cout << cphrK->GetBinContent(i) <<", " ;
cout << endl ;
// 0, 0.410801, 0.561519, 0.62277, 0.72081, 0.778347, 0.937498, 1.05921, 1.209, 1.28534, 1.47512, 1.66908, 1.67591, 1.93857, 2.0351, 2.52329, 2.85772, 3.44839, 3.38074, 4.49444, 5.53904, 5.97761, 4.61429, 11.4713, 11.4364, 26.6205, 6.42495, 13.1242, 20.6218, 18.5588

// check
T->Draw("CPWeight:piminus_P",WL)

//cphrK->SetMaximum(10.)
//cphrK->SetMinimum(0.)
//cphrK->Fit("expo","","",5.,100) // -0.873566e+exp(0.0347930*x)

//cphrpi->SetMaximum(5.)
//cphrpi->SetMinimum(0.)
//cphrpi->Fit("pol1","","",0.,80) 

TNN->Draw("wBaryon",WL)  // 0.07747 (11058) 
TNN->Draw("wBaryon",WLK) // 0.0064 (12757)

char* WLcp = "sweightLb*(sweightLb>-3)*(wCategory==1)*CPWeight"
char* WLKcp = "sweightLb*(sweightLb>-3)*(wCategory==-1)*CPWeight"
TNN->Draw("wBaryon",WLcp)  // 0.08395 (11058) 
TNN->Draw("wBaryon",WLKcp) // 0.00534 (12757)





