root.exe 
RooPlot* r = 0 
TString optNN = "0.552"
.L ../analysis/FourPlots.C
gStyle->SetPalette(0)
TString NN = "opt"
TFile* _fileOpt = TFile::Open("Lambdab-S20X-1062-tree-"+optNN+"-SW.root")
W = (TTree*)_fileOpt->Get("WeightTree")
char* WL = "sweightLb*(sweightLb>-3)*(wCategory==1)"
char* WB = "sweightBkg*(sweightLb>-3)*(wCategory==1)"
char* WLB = "sweightLb*(sweightLb>-3)*(wBaryon==1)*(wCategory==1)"
char* WLA = "sweightLb*(sweightLb>-3)*(wBaryon==-1)*(wCategory==1)"
char* WLK = "sweightLb*(sweightLb>-3)*(wCategory==-1)"
char* WBK = "sweightBkg*(sweightLb>-3)*(wCategory==-1)"
char* WLBK = "sweightLb*(sweightLb>-3)*(wBaryon==1)*(wCategory==-1)"
char* WLAK = "sweightLb*(sweightLb>-3)*(wBaryon==-1)*(wCategory==-1)"
char* WLW = "sweightLb*(sweightLb>-3)*(wCategory==1)*(wOneOverEff/30.)"
char* WLWK = "sweightLb*(sweightLb>-3)*(wCategory==-1)*(wOneOverEff/30.)"
char* WLWB = "sweightLb*(sweightLb>-3)*(wCategory==1)*(wOneOverEff/30.)*(wBaryon==1)"
char* WLWA = "sweightLb*(sweightLb>-3)*(wCategory==1)*(wOneOverEff/30.)*(wBaryon==-1)"
char* Wpi = "(netOutput>0.552)*(BKGCAT==0)*(Category==1)*(ErrorCode==0)*PTWeight*DalitzWeight2*SPDWeight"
char* WK = "(netOutput>0.552)*(BKGCAT==1)*(Category==-1)*(ErrorCode==0)*PTWeight*DalitzWeight2*NNEffWeight*SPDWeight"
const double m_psi = 3096.916 ;
const double m_p   =  938.272 ;
const double m_pi  =  139.570 ;
const double m_Lb  =  5620.0 ;
const double m_K  =  493.677 ;
const Double_t mBd = 5279.5 ;
const Double_t mBs = 5370 ;
const Double_t win = 20 ;
TCut net("wnetOutput>-1 && wErrorCode==0")
TCut LbK("wCategory==-1 && wErrorCode==0")
TCut Lbpi("wCategory==1 && wErrorCode==0")

TFile* fnpi = TFile::Open("LambdabMC-Lbpi-Sim08a-1122-1123-1124-1125-NN.root")
TFile* fnk = TFile::Open("LambdabMC-LbK-Sim08a-1127-1128-1129-1137-NN.root")
TNNpi = (TTree*)fnpi->Get("NetTree")
TNNk = (TTree*)fnk->Get("NetTree")
TChain* TNN = new TChain("NetTree")
TNN->Add("Lambdab-S20r1-1062-NN.root")
TNN->Add("Lambdab-S20-1063-NN.root")
//TChain* TSW = new TChain("TrainTree")
//TSW->Add("Lambdab-S20r1-1062-All-SW.root")
//TSW->Add("Lambdab-S20-1063-All-SW.root")
//TNN->AddFriend(TSW)
TNN->AddFriend(W)
//TNN->Draw("PsipKMass[0]:wMass[0]","Category[0]==-1 && RunNumber<90000")
TCut NoNN("netOutput>-1")

TFile *_fileMCK = TFile::Open("LambdabMC-LbK-Sim08a-1127-1128-1129-1137-NN.root")
TTree* MCK = (TTree*)_fileMCK->Get("NetTree")
TCut KSignal("Category==-1 && BKGCAT==1 && ErrorCode==0")

TFile *_fileMCpi = TFile::Open("LambdabMC-Lbpi-Sim08a-1122-1123-1124-1125-NN.root")
TTree* MCpi = (TTree*)_fileMCpi->Get("NetTree")
TCut PiSignal("Category==1 && BKGCAT==0 && ErrorCode==0")

TFile* fK = TFile::Open("LambdabMC-LbK-Sim08a-1127-1128-1129-1137-"+optNN+"-SW.root")
fK->ls()
TFile* fpi = TFile::Open("LambdabMC-Lbpi-Sim08a-1122-1123-1124-1125-"+optNN+"-SW.root")
fpi->ls()
TFile* fKpi = TFile::Open("LambdabMC-B2JpsiKpi-Sim08a-1138-1139-"+optNN+"-SW.root")
TFile* fKK = TFile::Open("LambdabMC-B2JpsiKK-Sim08a-1134-1135-"+optNN+"-SW.root")


TFile* _fileOptFit =  _fileOpt
_fileOptFit->ls()


//======================================================================
// The fit on data
//======================================================================
//----------------------------------------------------------------------
// The peaks
//----------------------------------------------------------------------
_fileOptFit->Get("TC_PsipKFitC")->Draw()
png("TC_PsipKFit-opt")

_fileOptFit->Get("TC_PsippiFitC")->Draw()
png("TC_PsippiFit-opt")

_fileOptFit->Get("TC_PsipKFitBC")->Draw()
png("TC_PsipKFitAB-opt")
_fileOptFit->Get("TC_PsipKFitBp1C")->Draw()
png("TC_PsipKFitABp1-opt")
_fileOptFit->Get("TC_PsipKFitBm1C")->Draw()
png("TC_PsipKFitABm1-opt")

_fileOptFit->Get("TC_PsipKFitABC")->Draw()
png("TC_PsipKFitB-opt")
_fileOptFit->Get("TC_PsipKFitABp1C")->Draw()
png("TC_PsipKFitBp1-opt")
_fileOptFit->Get("TC_PsipKFitABm1C")->Draw()
png("TC_PsipKFitBm1-opt")


_fileOptFit->Get("TC_PsippiFitABC")->Draw()
png("TC_PsippiFitAB-opt")
_fileOptFit->Get("TC_PsippiFitABp1C")->Draw()
png("TC_PsippiFitABp1-opt")
_fileOptFit->Get("TC_PsippiFitABm1C")->Draw()
png("TC_PsippiFitABm1-opt")
_fileOptFit->Get("TC_PsippiFitBC")->Draw()
png("TC_PsippiFitB-opt")
_fileOptFit->Get("TC_PsippiFitBp1C")->Draw()
png("TC_PsippiFitBp1-opt")
_fileOptFit->Get("TC_PsippiFitBm1C")->Draw()
png("TC_PsippiFitBm1-opt")

RooPlot* rpiAB = (RooPlot*)_fileOptFit->Get("PsippiFitAB")
RooPlot* rpiB = (RooPlot*)_fileOptFit->Get("PsippiFitB")
RooPlot* rpi = (RooPlot*)_fileOptFit->Get("PsippiFit")
rpiAB->SetMaximum(700.)
rpiB->SetMaximum(700.)
rpi->SetMaximum(1400.)

rpiAB->Draw()
png("PsippiFitAB-opt")
rpiB->Draw()
png("PsippiFitB-opt")
rpi->Draw()
png("PsippiFit-opt")

// Kaons in non-log
RooPlot* rKAB = (RooPlot*)_fileOptFit->Get("PsipKFitAB")
RooPlot* rKB = (RooPlot*)_fileOptFit->Get("PsipKFitB")
RooPlot* rK = (RooPlot*)_fileOptFit->Get("PsipKFit")

rK->SetMaximum(4000)
rKB->SetMaximum(2000)
rKAB->SetMaximum(2000)

rKAB->Draw()
png("PsipKFitAB-opt")
rKB->Draw()
png("PsipKFitB-opt")
rK->Draw()
png("PsipKFit-opt")

// now also in log

//----------------------------------------------------------------------
// Baryon asymmetry
//----------------------------------------------------------------------

if (gPad) gPad->SetLogy(0)
RooPlot* r = SandB(W,0,"wMass",WLB,WLA,"","","wBaryon",5500,5770,54)    //  5613.58 (447.589), 5612.06 (414.497)
SetTitle("m_{J/#psip#pi} [MeV/c^{2}]",r)
png("B wBaryon")
RooPlot* r = SandB(W,0,"wMass",WLBK,WLAK,"","","wBaryonK",5500,5770,54) 
SetTitle("m_{J/#psipK} [MeV/c^{2}]",r)
png("B wBaryon - K")

//###################################################################################
//----------------------------------------------------------------------------
// sweight
//----------------------------------------------------------------------------
// tmp
TNN->Scan("EventNumber:RunNumber","sweightLb>-3 && sweightLb<1 && abs(wMass-5615)<2 && wCategory==-1")
W->Draw("sweightLb:wMass","sweightLb>-3 && wCategory==-1") // one odd point
W->Draw("sweightNon:wMass","sweightLb>-3 && wCategory==-1") // one odd point
W->Draw("sweightKpi:wMass","sweightLb>-3 && wCategory==-1") // one odd point
W->Draw("sweightKK:wMass","sweightLb>-3 && wCategory==-1") // one odd point
W->Draw("sweightpiK:wMass","sweightLb>-3 && wCategory==-1") // one odd point
W->Draw("sweightKp:wMass","sweightLb>-3 && wCategory==-1") // one odd point
W->Draw("sweightLref:wMass","sweightLb>-3 && wCategory==-1") //  one odd point

W->Scan("sweightLb:sweightNon:sweightKpi:sweightKK:sweightpiK:sweightKp:sweightLref","sweightLb>-3 && sweightLb<0.8 && abs(wMass-5615)<2 && wCategory==-1")
W->Show(250)

TH2D* hLb   = Make2DPlot("hLb","m_{J/#psip#pi} [MeV/c^{2}]",1000,5420,5770,"weight",1000,-1,2)
TH2D* hNon  = Make2DPlot("hNon","m_{J/#psip#pi} [MeV/c^{2}]",1000,5420,5770,"weight",1000,-1,2)
TH2D* hKpi  = Make2DPlot("hKpi","m_{J/#psip#pi} [MeV/c^{2}]",1000,5420,5770,"weight",1000,-1,2)
TH2D* hKK   = Make2DPlot("hKK","m_{J/#psip#pi} [MeV/c^{2}]",1000,5420,5770,"weight",1000,-1,2)
TH2D* hpiK  = Make2DPlot("hpiK","m_{J/#psip#pi} [MeV/c^{2}]",1000,5420,5770,"weight",1000,-1,2)
TH2D* hKp   = Make2DPlot("hKp","m_{J/#psip#pi} [MeV/c^{2}]",1000,5420,5770,"weight",1000,-1,2)
TH2D* hLref = Make2DPlot("hLref","m_{J/#psip#pi} [MeV/c^{2}]",1000,5420,5770,"weight",1000,-1,2)

W->Draw("sweightLb:wMass >> hLb","sweightLb>-3 && wCategory==1") // one odd point
W->Draw("sweightNon:wMass >> hNon","sweightLb>-3 && wCategory==1") // one odd point
W->Draw("sweightKpi:wMass >> hKpi","sweightLb>-3 && wCategory==1") // one odd point
W->Draw("sweightKK:wMass >> hKK","sweightLb>-3 && wCategory==1") // one odd point
W->Draw("sweightpiK:wMass >> hpiK","sweightLb>-3 && wCategory==1") // one odd point
W->Draw("sweightKp:wMass >> hKp","sweightLb>-3 && wCategory==1") // one odd point
W->Draw("sweightLref:wMass >> hLref","sweightLb>-3 && wCategory==1") //  one odd point

W->Scan("sweightLb:sweightNon:sweightKpi:sweightKK:sweightpiK:sweightKp:sweightLref","sweightLb>-3 && sweightLb<0.8 && abs(wMass-5615)<2 && wCategory==-1")
W->Show(250)



//####################################################################################################################
// Dalitz - Pion
//----------------------------------------------------------------------------
r = SandB(TNN,MCpi,"sqrt(pMMass2)",WL,TCut(optNN) && PiSignal,"","N","remove",m_p+m_pi,m_Lb-m_psi,55)
r->SetMinimum(0.)
r->SetXTitle("m_{p#pi} [MeV/c^{2}]");
png("ppiMass S and MC (pi) - no lines")
overlay_line(1440,r,1)  // N
overlay_line(1520,r,1)  // 
overlay_line(1535,r,1)  // 
overlay_line(1650,r,1)  // 
overlay_line(1675,r,1)  // 
overlay_line(1680,r,1)  // 
// overlay_line(1700,r,1)  // 
// overlay_line(1710,r,1)  // 
overlay_line(1720,r,1)  // 
// overlay_line(1875,r,1)  // 
// overlay_line(1900,r,1)  // 
overlay_line(2190,r,1)  // 
// overlay_line(2190,r,1)  // 
overlay_line(2220,r,1)  // 
overlay_line(2250,r,1)  // 
png("ppiMass S and MC (pi)")

r = SandB(TNN,MCpi,"sqrt(psiMMass2)",WL,TCut(optNN) && PiSignal,"","N","remove",m_psi+m_pi,m_Lb-m_p,35)
r->SetXTitle("m_{J/#psi#pi} [MeV/c^{2}]");
png("psipiMass S and MC (pi) - no lines")
overlay_line(4050,r,1)  // 
overlay_line(4250,r,1)  // 
overlay_line(4430,r,1)  // 
png("psipiMass S and MC (pi)")

r = SandB(TNN,MCpi,"sqrt(psipMass2)",WL,TCut(optNN) && PiSignal,"","N","remove",m_psi+m_p,m_Lb-m_pi,35)
r->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
png("psipMass S and MC (pi)")
//####################################################################################################################
// Dalitz - Pion, weighted MC
//----------------------------------------------------------------------------
r = SandB(TNN,MCpi,"sqrt(pMMass2)",WL,Wpi,"","N","remove",m_p+m_pi,m_Lb-m_psi,55)
r->SetMinimum(0.)
r->SetXTitle("m_{p#pi} [MeV/c^{2}]");
png("ppiMass S and WMC (pi) - no lines")
overlay_line(1440,r,1)  // N
overlay_line(1520,r,1)  // 
overlay_line(1535,r,1)  // 
overlay_line(1650,r,1)  // 
overlay_line(1675,r,1)  // 
overlay_line(1680,r,1)  // 
// overlay_line(1700,r,1)  // 
// overlay_line(1710,r,1)  // 
overlay_line(1720,r,1)  // 
// overlay_line(1875,r,1)  // 
// overlay_line(1900,r,1)  // 
overlay_line(2190,r,1)  // 
// overlay_line(2190,r,1)  // 
overlay_line(2220,r,1)  // 
overlay_line(2250,r,1)  // 
png("ppiMass S and WMC (pi)")

r = SandB(TNN,MCpi,"sqrt(psiMMass2)",WL,Wpi,"","N","remove",m_psi+m_pi,m_Lb-m_p,35)
r->SetMinimum(0.)
r->SetXTitle("m_{J/#psi#pi} [MeV/c^{2}]");
png("psipiMass S and WMC (pi) - no lines")
overlay_line(4050,r,1)  // 
overlay_line(4250,r,1)  // 
overlay_line(4430,r,1)  // 
png("psipiMass S and WMC (pi)")

r = SandB(TNN,MCpi,"sqrt(psipMass2)",WL,Wpi,"","N","remove",m_psi+m_p,m_Lb-m_pi,35)
r->SetMinimum(0.)
r->SetTitle("m_{J/#psip} [MeV/c^{2}]");
png("psipMass S and WMC (pi)")

r1 =  SandB(TNN,0,"sqrt(pMMass2)",WLB,WLA,"","N","remove",m_p+m_pi,m_Lb-m_psi,35)
r1->SetMinimum(0.)
SetTitle("m_{p#pi} [MeV/c^{2}]",r1);
png("ppiMass B and AB")
r2 = SandB(TNN,0,"sqrt(psiMMass2)",WLB,WLA,"","N","remove",m_psi+m_pi,m_Lb-m_p,20)
r2->SetMinimum(0.)
SetTitle("m_{J/#psi#pi} [MeV/c^{2}]",r2);
png("psipiMass B and AB")
r3 = SandB(TNN,0,"sqrt(psipMass2)",WLB,WLA,"","N","remove",m_psi+m_p,m_Lb-m_pi,20)
r3->SetMinimum(0.)
SetTitle("m_{J/#psip} [MeV/c^{2}]",r3);
png("psipMass B and AB")



//====================================================================================== 
// Now with efficiency corrected MC
//====================================================================================== 
r = SandB(TNN,MCpi,"sqrt(pMMass2)",WLW,TCut(optNN) && PiSignal,"","N","remove",m_p+m_pi,m_Lb-m_psi,55)
r->SetMinimum(0.)
r->SetXTitle("m_{p#pi} [MeV/c^{2}]");
png("ppiMass S and MC (pi) effcor - no lines")
overlay_line(1440,r,1)  // N
overlay_line(1520,r,1)  // 
overlay_line(1535,r,1)  // 
overlay_line(1650,r,1)  // 
overlay_line(1675,r,1)  // 
overlay_line(1680,r,1)  // 
// overlay_line(1700,r,1)  // 
// overlay_line(1710,r,1)  // 
overlay_line(1720,r,1)  // 
// overlay_line(1875,r,1)  // 
// overlay_line(1900,r,1)  // 
overlay_line(2190,r,1)  // 
// overlay_line(2190,r,1)  // 
overlay_line(2220,r,1)  // 
overlay_line(2250,r,1)  // 
png("ppiMass S and MC (pi) effcor")

r = SandB(TNN,MCpi,"sqrt(psiMMass2)",WLW,TCut(optNN) && PiSignal,"","N","remove",m_psi+m_pi,m_Lb-m_p,35)
r->SetXTitle("m_{J/#psi#pi} [MeV/c^{2}]");
png("psipiMass S and MC (pi) effcor - no lines")
overlay_line(4050,r,1)  // 
overlay_line(4250,r,1)  // 
overlay_line(4430,r,1)  // 
png("psipiMass S and MC (pi) effcor")

r = SandB(TNN,MCpi,"sqrt(psipMass2)",WLW,TCut(optNN) && PiSignal,"","N","remove",m_psi+m_p,m_Lb-m_pi,35)
r->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
png("psipMass S and MC (pi) effcor")

/// K
r = SandB(TNN,MCK,"sqrt(pMMass2)",WLWK,TCut(optNN) && KSignal,"","N","remove",m_p+m_K,m_Lb-m_psi,55)
r->SetMinimum(0.)
r->SetXTitle("m_{pK} [MeV/c^{2}]");
png("pMMass S and MC (K) effcor")

r = SandB(TNN,MCK,"sqrt(psiMMass2)",WLWK,TCut(optNN) && KSignal,"","N","remove",m_psi+m_K,m_Lb-m_p,35)
r->SetXTitle("m_{J/#psiK} [MeV/c^{2}]");
png("psiMMass S and MC (K) effcor")

r = SandB(TNN,MCK,"sqrt(psipMass2)",WLWK,TCut(optNN) && KSignal,"","N","remove",m_psi+m_p,m_Lb-m_K,35)
r->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
png("psipMass S and MC (K) effcor")

// by baryons
r1 =  SandB(TNN,0,"sqrt(pMMass2)",WLWB,WLWA,"","","remove",m_p+m_pi,m_Lb-m_psi,35)
//r1->SetMinimum(0.)
SetTitle("m_{p#pi} [MeV/c^{2}]",r1);
horizontal_line(0.,r1,2)
png("ppiMass B and AB effcor")
r2 = SandB(TNN,0,"sqrt(psiMMass2)",WLWB,WLWA,"","","remove",m_psi+m_pi,m_Lb-m_p,20)
//r2->SetMinimum(0.)
SetTitle("m_{J/#psi#pi} [MeV/c^{2}]",r2);
horizontal_line(0.,r2,2)
png("psipiMass B and AB effcor")
r3 = SandB(TNN,0,"sqrt(psipMass2)",WLWB,WLWA,"","","remove",m_psi+m_p,m_Lb-m_pi,20)
//r3->SetMinimum(0.)
SetTitle("m_{J/#psip} [MeV/c^{2}]",r3);
horizontal_line(0.,r3,2)
png("psipMass B and AB effcor")

r1 =  SandB(TNN,0,"sqrt(pMMass2)",WLB,WLA,"","","remove",m_p+m_pi,m_Lb-m_psi,20)
//r1->SetMinimum(0.)
SetTitle("m_{p#pi} [MeV/c^{2}]",r1);
horizontal_line(0.,r1,2)
png("ppiMass B and AB")
r2 = SandB(TNN,0,"sqrt(psiMMass2)",WLB,WLA,"","","remove",m_psi+m_pi,m_Lb-m_p,20)
//r2->SetMinimum(0.)
SetTitle("m_{J/#psi#pi} [MeV/c^{2}]",r2);
horizontal_line(0.,r2,2)
png("psipiMass B and AB")
r3 = SandB(TNN,0,"sqrt(psipMass2)",WLB,WLA,"","","remove",m_psi+m_p,m_Lb-m_pi,20)
//r3->SetMinimum(0.)
SetTitle("m_{J/#psip} [MeV/c^{2}]",r3);
horizontal_line(0.,r3,2)
png("psipMass B and AB")
rm =  SandB(TNN,0,"mprime",WLB,WLA,"","","remove",0,1,20)
//rm->SetMinimum(0.)
SetTitle("m'",rm);
png("mprime B and AB")
rt =  SandB(TNN,0,"thetaprime",WLB,WLA,"","","remove",0,1,20)
//rt->SetMinimum(0.)
SetTitle("#theta'",rt);
png("thetaprime B and AB")


// 
rm2 =  SandB(TNN,0,"mprime",WL,WLK,"","N","remove",0,1,20)
//rm2->SetMinimum(0.)
SetTitle("m'",rm2);
horizontal_line(0.,rm2,2)
png("mprime Lbpi and LbK")
rt2 =  SandB(TNN,0,"thetaprime",WL,WLK,"","N","remove",0,1,20)
//rt2->SetMinimum(0.)
SetTitle("#theta'",rt2);
horizontal_line(0.,rt2,2)
png("thetaprime Lbpi and LbK")


//====================================================================================== 
// 2D & Miranda
//====================================================================================== 
gStyle->SetPalette(0)
gStyle->SetPaintTextFormat("5.1f");
TH2D* h2 = Make2DPlot("h2","m_{p#pi}^{2} [GeV^{2}/c^{4}]",11,1.0,6.5,"m_{J/#psi#pi}^{2} [GeV^{2}/c^{4}]",12,10,22)
TH2D* h2a = Make2DPlot("h2a","m_{p#pi}^{2} [GeV^{2}/c^{4}]",11,1.0,6.5,"m_{J/#psi#pi}^{2} [GeV^{2}/c^{4}]",12,10,22)
TH2D* h2b = Make2DPlot("h2b","m_{p#pi}^{2} [GeV^{2}/c^{4}]",11,1.0,6.5,"m_{J/#psi#pi}^{2} [GeV^{2}/c^{4}]",12,10,22)
TNN->Draw("psiMMass2/1e6:pMMass2/1e6 >> h2a",WLA)
TNN->Draw("psiMMass2/1e6:pMMass2/1e6 >> h2b",WLB)

TNN->Draw("psiMMass2/1e6:pMMass2/1e6 >> h2",WL)
h2->SetMinimum(0)
h2->Draw("coltext")
png("Colourful Dalitz (pi)")

gPad->SetLogz(0)
c1.SetTheta(30);  //theta angle=66 degrees
c1.SetPhi(-40);
h2->Draw("lego2")
png("Dalitz 3D (pi)")


h2a->SetMaximum(70)
h2b->SetMaximum(70)
h2a->SetMinimum(0)
h2b->SetMinimum(0)
h2a->Draw("coltext")
png("Dalitz (pi) antibaryons")
h2b->Draw("coltext")
png("Dalitz (pi) baryons")

TH2D* h2x = new TH2D(*h2b); 
h2x->Draw("coltext")
h2x->Add(h2a,-1)
h2x->Draw("coltext")
h2x->SetMinimum(-30)
h2x->SetMaximum(30)
h2x->Draw("coltext")
png("Dalitz (pi) difference")

gStyle->SetPalette(1)
TH2D* h2m2 = (TH2D*)Miranda(h2b,h2a);
h2m2->Draw("coltext");
png("Miranda (pi)")

RooPlot* m = (RooPlot*)Miranda(h2m2); // NLL
png("Miranda 1D (pi)")
TH1D* hh = (TH1D*)Miranda(h2m2,"chi2");

h2->Draw("BOX")
png("Boxed Dalitz (pi)")
// square

gStyle->SetPalette(0)
TH2D* s2 = Make2DPlot("s2","m'",10,0,1,"#theta'",10,0,1)
TH2D* s2b = Make2DPlot("s2b","m'",10,0,1,"#theta'",10,0,1)
TH2D* s2a = Make2DPlot("s2a","m'",10,0,1,"#theta'",10,0,1)
TH2D* s2x = Make2DPlot("s2x","m'",10,0,1,"#theta'",10,0,1)

TNN->Draw("thetaprime:mprime >> s2",WL)
TNN->Draw("thetaprime:mprime >> s2a",WLA)
TNN->Draw("thetaprime:mprime >> s2b",WLB)

s2->Draw("coltext")
s2->SetMinimum(0)
png("Square Dalitz (pi)")


s2a->SetMinimum(0)
s2a->SetMaximum(150)
s2a->Draw("coltext")
png("Square Dalitz (pi) antibaryons")


s2b->SetMinimum(0)
s2b->SetMaximum(150)
s2b->Draw("coltext")
png("Square Dalitz (pi) baryons")

gStyle->SetPalette(0)
TH2D* s2x = new TH2D(*s2b); 
s2x->Draw("coltext")
s2x->Add(s2a,-1)
s2x->Draw("coltext")
s2x->SetMinimum(-40)
s2x->SetMaximum(40)
s2x->Draw("coltext")
png("Square Dalitz (pi) difference")

gStyle->SetPalette(1)
TH2D* s2m = Miranda(s2b,s2a);
s2m->Draw("coltext");
png("Square Miranda (pi)")

RooPlot* m = (RooPlot*)Miranda(s2m);
png("Square Miranda 1D (pi)")
TH1D* hh = (TH1D*)Miranda(s2m,"chi2");

gStyle->SetPalette(0)

s2->Draw("BOX")
png("Boxed Square Dalitz (pi)")

// square UP
char* UWL = "sweightLb*(sweightLb>-3)*(wCategory==1)*(Polarity>0)"
char* UWLB = "sweightLb*(sweightLb>-3)*(wBaryon==1)*(wCategory==1)*(Polarity>0)"
char* UWLA = "sweightLb*(sweightLb>-3)*(wBaryon==-1)*(wCategory==1)*(Polarity>0)"

gStyle->SetPalette(0)
TH2D* s2 = Make2DPlot("s2","m'",10,0,1,"#theta'",10,0,1)
TH2D* s2b = Make2DPlot("s2b","m'",10,0,1,"#theta'",10,0,1)
TH2D* s2a = Make2DPlot("s2a","m'",10,0,1,"#theta'",10,0,1)
TH2D* s2x = Make2DPlot("s2x","m'",10,0,1,"#theta'",10,0,1)

TNN->Draw("thetaprime:mprime >> s2",UWL)
TNN->Draw("thetaprime:mprime >> s2a",UWLA)
TNN->Draw("thetaprime:mprime >> s2b",UWLB)

s2->Draw("coltext")
s2->SetMinimum(0)
png("UP Square Dalitz (pi)")


s2a->SetMinimum(0)
s2a->SetMaximum(150)
s2a->Draw("coltext")
png("UP Square Dalitz (pi) antibaryons")


s2b->SetMinimum(0)
s2b->SetMaximum(150)
s2b->Draw("coltext")
png("UP Square Dalitz (pi) baryons")

gStyle->SetPalette(0)
TH2D* s2x = new TH2D(*s2b); 
s2x->Draw("coltext")
s2x->Add(s2a,-1)
s2x->Draw("coltext")
s2x->SetMinimum(-40)
s2x->SetMaximum(40)
s2x->Draw("coltext")
png("UP Square Dalitz (pi) difference")

gStyle->SetPalette(1)
TH2D* s2m = Miranda(s2b,s2a);
s2m->Draw("coltext");
png("UP Square Miranda (pi)")

RooPlot* m = (RooPlot*)Miranda(s2m);
png("UP Square Miranda 1D (pi)")
TH1D* hh = (TH1D*)Miranda(s2m,"chi2");

gStyle->SetPalette(0)

s2->Draw("BOX")
png("UP Boxed Square Dalitz (pi)")

// square DOWN
char* DWL = "sweightLb*(sweightLb>-3)*(wCategory==1)*(Polarity<0)"
char* DWLB = "sweightLb*(sweightLb>-3)*(wBaryon==1)*(wCategory==1)*(Polarity<0)"
char* DWLA = "sweightLb*(sweightLb>-3)*(wBaryon==-1)*(wCategory==1)*(Polarity<0)"

gStyle->SetPalette(0)
TH2D* s2 = Make2DPlot("s2","m'",10,0,1,"#theta'",10,0,1)
TH2D* s2b = Make2DPlot("s2b","m'",10,0,1,"#theta'",10,0,1)
TH2D* s2a = Make2DPlot("s2a","m'",10,0,1,"#theta'",10,0,1)
TH2D* s2x = Make2DPlot("s2x","m'",10,0,1,"#theta'",10,0,1)

TNN->Draw("thetaprime:mprime >> s2",DWL)
TNN->Draw("thetaprime:mprime >> s2a",DWLA)
TNN->Draw("thetaprime:mprime >> s2b",DWLB)

s2->Draw("coltext")
s2->SetMinimum(0)
png("DOWN Square Dalitz (pi)")


s2a->SetMinimum(0)
s2a->SetMaximum(150)
s2a->Draw("coltext")
png("DOWN Square Dalitz (pi) antibaryons")


s2b->SetMinimum(0)
s2b->SetMaximum(150)
s2b->Draw("coltext")
png("DOWN Square Dalitz (pi) baryons")

gStyle->SetPalette(0)
TH2D* s2x = new TH2D(*s2b); 
s2x->Draw("coltext")
s2x->Add(s2a,-1)
s2x->Draw("coltext")
s2x->SetMinimum(-40)
s2x->SetMaximum(40)
s2x->Draw("coltext")
png("DOWN Square Dalitz (pi) difference")

gStyle->SetPalette(1)
TH2D* s2m = Miranda(s2b,s2a);
s2m->Draw("coltext");
png("DOWN Square Miranda (pi)")

RooPlot* m = (RooPlot*)Miranda(s2m);
png("DOWN Square Miranda 1D (pi)")
TH1D* hh = (TH1D*)Miranda(s2m,"chi2");

gStyle->SetPalette(0)

s2->Draw("BOX")
png("DOWN Boxed Square Dalitz (pi)")

//####################################################################################################################
// Dalitz - Kaon
//----------------------------------------------------------------------------
.L ../analysis/FourPlots.C

r = SandB(TNN,MCK,"sqrt(pMMass2)",WLK,NoNN && KSignal,"","N","remove",m_p+m_K,m_Lb-m_psi,55)
overlay_line(1440,r,1)  // 
overlay_line(1520,r,1)  // 
overlay_line(1600,r,1)  // 
overlay_line(1670,r,1)
overlay_line(1690,r,1)
overlay_line(1800,r,1)
overlay_line(1810,r,1)
overlay_line(1820,r,1)
overlay_line(1830,r,1)
overlay_line(1890,r,1)
overlay_line(2325,r,1)
r->SetXTitle("m_{pK} [MeV/c^{2}]");
png("pKMass S and MC (K)")

r = SandB(TNN,MCK,"sqrt(psiMMass2)",WLK,NoNN && KSignal,"","N","remove",m_psi+m_K,m_Lb-m_p,55)
r->SetXTitle("m_{J/#psiK} [MeV/c^{2}]");
png("psiKMass S and MC (K)")

r = SandB(TNN,MCK,"sqrt(psipMass2)",WLK,NoNN && KSignal,"","N","remove",m_psi+m_p,m_Lb-m_K,55)
r->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
png("psipMass S and MC (K)")

TH2D* h2 = Make2DPlot("h2","m_{pK}^{2} [GeV^{2}/c^{4}]",23,1.9,6.5,"m_{J/#psiK}^{2} [GeV^{2}/c^{4}]",23,12,22.5)
TH2D* h2l = Make2DPlot("h2l","m_{pK}^{2} [GeV^{2}/c^{4}]",900,2,6.5,"m_{J/#psiK}^{2} [GeV^{2}/c^{4}]",1100,12,22)
TH2D* h2mc = Make2DPlot("h2mc","m_{pK}^{2} [GeV^{2}/c^{4}]",900,2,6.5,"m_{J/#psiK}^{2} [GeV^{2}/c^{4}]",1100,12,22)
TH2D* h2b = Make2DPlot("h2b","m_{pK}^{2} [GeV^{2}/c^{4}]",23,1.9,6.5,"m_{J/#psip}^{2} [GeV^{2}/c^{4}]",22,16,27)
TH2D* h2c = Make2DPlot("h2c","m_{J/#psiK}^{2} [GeV^{2}/c^{4}]",23,12,22.5,"m_{J/#psip}^{2} [GeV^{2}/c^{4}]",22,16,27)

TNN->Draw("psiMMass2/1e6:pMMass2/1e6 >> h2",NoNN && "abs(PsipKMass-5620)<13" && "Category==-1")
gPad->SetLogz(1)
h2->Draw("coltext")
png("Colourful Dalitz (K)")

gPad->SetLogy(0)
TNN->Draw("psiMMass2/1e6:pMMass2/1e6 >> h2",NoNN && "abs(PsipKMass-5620)<13" && "Category==-1")
gPad->SetLogz(1)
h2->Draw("coltext")
png("Colourful Dalitz (K)")

TNN->Draw("psipMass2/1e6:pMMass2/1e6 >> h2b",NoNN && "abs(PsipKMass-5620)<13" && "Category==-1")
gPad->SetLogz(1)
h2b->SetStats(0)
h2b->Draw("coltext")
png("Reversed Colourful Dalitz (K)")

TNN->Draw("psipMass2/1e6:psiMMass2/1e6 >> h2c",NoNN && "abs(PsipKMass-5620)<13" && "Category==-1")
gPad->SetLogz(1)
h2c->SetStats(0)
h2c->Draw("coltext")
png("Reversed 2 Colourful Dalitz (K)") // useless

gPad->SetLogz(0)
TNN->Draw("psiMMass2/1e6:pMMass2/1e6 >> h2l",NoNN && "abs(PsipKMass-5620)<13" && "Category==-1")
h2l->Draw()
png("Dotted Dalitz (K)")

gPad->SetLogz(0)
TNN->Draw("psipMass2/1e6:pMMass2/1e6 >> h2lb",NoNN && "abs(PsipKMass-5620)<13" && "Category==-1")
h2lb->Draw()
png("Reversed Dotted Dalitz (K)")

gPad->SetLogz(0)
MCK->Draw("psiMMass2/1e6:pMMass2/1e6 >> h2mc",NoNN && KSignal)
h2mc->Draw()
png("Dotted MC Dalitz (K)")

gPad->SetLogz(0)
c1.SetTheta(30);  //theta angle=66 degrees
c1.SetPhi(-40);
h2->Draw("lego2")
png("Dalitz 3D (K)")

//################################################################################################
gPad->SetLogy(1)
RooPlot* rM = SandB(TNN,0,"PsipKMass","(netOutput>0.552)*(sweightLb>-3)","(netOutput>0.0)","(ErrorCode==0)*(Category==-1)","","remove",5500,5800,100)
rM->SetXTitle("m_{J/#psipK} [MeV/c^{2}]");
rM->Draw()
png("PsipK mass optimal and >0")

gPad->SetLogy(1)
RooPlot* rK = SandB(TNN,0,"sqrt(psipMass2)","(netOutput>0.552)*(sweightLb>-3)","(netOutput>0.0)","(ErrorCode==0)*(Category==-1)","","remove",4000,5200,48)
rK->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
gPad->SetLogy()
rK->Draw()
png("PsipMass in K mass optimal and >0") // now use non weighted

RooPlot* r25 = SandB(TNN,0,"sqrt(psipMass2)","pMMass2/1e6<2.5","","abs(PsipKMass-5620)<13 && (ErrorCode==0)  && (Category==-1) && (netOutput>0.0)","","remove",4000,5200,48)
r25->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
r25->SetMinimum(30.) ; r25->SetMaximum(2000) ; 
r25->Draw()
png("PsipMass in K below and above 2.5") // now use non weighted

RooPlot* r28 = SandB(TNN,0,"sqrt(psipMass2)","pMMass2/1e6<2.8","","abs(PsipKMass-5620)<13 && (ErrorCode==0)  && (Category==-1) && (netOutput>0.0)","","remove",4000,5200,48)
r28->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
r28->SetMinimum(30.) ; r28->SetMaximum(2000) ; 
r28->Draw()
png("PsipMass in K below and above 2.8") // now use non weighted

RooPlot* r30 = SandB(TNN,0,"sqrt(psipMass2)","pMMass2/1e6<3","","abs(PsipKMass-5620)<13 && (ErrorCode==0)  && (Category==-1) && (netOutput>0.0)","","remove",4000,5200,48)
r30->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
r30->SetMinimum(30.) ; r30->SetMaximum(2000) ; 
r30->Draw()
png("PsipMass in K below and above 3") // now use non weighted

RooPlot* r32 = SandB(TNN,0,"sqrt(psipMass2)","pMMass2/1e6<3.2","","abs(PsipKMass-5620)<13 && (ErrorCode==0)  && (Category==-1) && (netOutput>0.0)","","remove",4000,5200,48)
r32->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
r32->SetMinimum(30.) ; r32->SetMaximum(2000) ; 
r32->Draw()
png("PsipMass in K below and above 3.2") // now use non weighted

RooPlot* r35 = SandB(TNN,0,"sqrt(psipMass2)","pMMass2/1e6<3.5","","abs(PsipKMass-5620)<13 && (ErrorCode==0)  && (Category==-1) && (netOutput>0.0)","","remove",4000,5200,48)
r35->SetMinimum(30) ; r35->SetMaximum(2000) ; 
r35->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
r35->Draw()
png("PsipMass in K below and above 3.5") // now use non weighted

RooPlot* r38 = SandB(TNN,0,"sqrt(psipMass2)","pMMass2/1e6<3.8","","abs(PsipKMass-5620)<13 && (ErrorCode==0)  && (Category==-1) && (netOutput>0.0)","","remove",4000,5200,48)
r38->SetMinimum(30) ; r38->SetMaximum(2000) ; 
r38->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
r38->Draw()
png("PsipMass in K below and above 3.8") // now use non weighted

RooPlot* r45 = SandB(TNN,0,"sqrt(psipMass2)","pMMass2/1e6<4.5","","abs(PsipKMass-5620)<13 && (ErrorCode==0)  && (Category==-1) && (netOutput>0.0)","","remove",4000,5200,48)
r45->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
r45->SetMinimum(30.) ; r45->SetMaximum(2000) ; 
r45->Draw()
png("PsipMass in K below and above 4.5") // now use non weighted

RooPlot* r60 = SandB(TNN,0,"sqrt(psipMass2)","pMMass2/1e6>6","pMMass2/1e6>4.5 && pMMass2/1e6<6","abs(PsipKMass-5620)<13 && (ErrorCode==0)  && (Category==-1) && (netOutput>0.0)","","remove",4000,5200,48)
r60->SetXTitle("m_{J/#psip} [MeV/c^{2}]");
r60->SetMinimum(0.) ; r60->SetMaximum(200) ; 
r60->Draw()
png("PsipMass between 4.5 and 6.0") // now use non weighted


TH2D* h2lb = Make2DPlot("h2lb","m_{J/#psip}^{2} [GeV^{2}/c^{4}]",1100,16,27,"m_{pK}^{2} [GeV^{2}/c^{4}]",900,2,6.5)

TNN->Draw("pMMass2/1e6:psipMass2/1e6 >> h2lb","(netOutput>0.0) && abs(PsipKMass-5620)<13 && Category==-1 && (ErrorCode==0)")
gPad->SetLogz(0)
gPad->SetLogy(0)
h2lb->Draw()
horizontal_line(4.5,h2lb,2)
horizontal_line(3.8,h2lb,2)
horizontal_line(3.5,h2lb,2)
horizontal_line(3.2,h2lb,2)
horizontal_line(3.0,h2lb,2)
horizontal_line(2.8,h2lb,2)
horizontal_line(2.5,h2lb,2)
horizontal_line(6.0,h2lb,2)
h2lb->Draw("same")
png("Reversed Dotted Dalitz (K) - cut at 0")


