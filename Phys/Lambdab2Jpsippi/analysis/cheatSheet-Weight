root.exe
TString NN = "0"
double NNcut = NN.Atof()
.L ../analysis/FourPlots.C 
//===================================================================
TFile *_fileZ = TFile::Open("Lambdab-R12S17b-721-"+NN+"-SW.root")
_fileZ->ls()
TTree* SW = (TTree*)_fileZ->Get("WeightTree")
//===================================================================
TCanvas* TC1 = _fileZ->Get("TC_PsipKFit")->Draw()
_fileZ->Get("TC_PsipKFitB")->Draw()
_fileZ->Get("TC_PsipKFitC")->Draw()
png("TC_PsipKFit-"+NN)
_fileZ->Get("TC_PsippiFit")->Draw()
_fileZ->Get("TC_PsippiFitB")->Draw()
_fileZ->Get("TC_PsippiFitC")->Draw()
png("TC_PsippiFit-"+NN)
// kill all windows
//===================================================================

FourPlots(SW,"wPsippiMass","N","",5500,5800)
FourPlots(SW,"wPsipKMass","N","",5560,6100)
FourPlots(SW,"wMass","N","",5560,5810) // blue and red pi, green and magenta K
// FourPlots(SW,"wQ","N","",750,1900) // blue and red pi, green and magenta K

// I want to compare K stream with MC

//===================================================================
TFile* fT1 = TFile::Open("~/work/Baryons/Lambdab/Lambdab-R12S17b-721.root")
if (!fT1) fT1 = TFile::Open("/castor/cern.ch/user/p/pkoppenb/Lambdab/Lambdab-R12S17b-721.root")
TTree* T = fT1->Get("BetaSLambdab2JpsippiDetachedLine_Tuple/DecayTree")
T->AddFriend(SW) // weights
T->Draw("sweightLb >> h(100,-1,2)")
TFile* f1 = TFile::Open("Lambdab-R12S17b-721-NN.root")
TTree* N1 = f1->Get("NetTree")
T->AddFriend(N1)
T->Draw("netOutput >> h(100,-1,1)")
T->Draw("B_SubpK_M:PsipKMass", "Category==-1")

FourPlots(T,"piminus_ProbNNpi-piminus_ProbNNk","N","",-1,1) // blue and red pi, green and magenta K
FourPlots(T,"pplus_RichAbovePrThres","NI","",0,1) // blue and red pi, green and magenta K

TFile* fTI = TFile::Open("~/work/Baryons/Lambdab/LambdabMC-MC11-IncPsi-717.root")
if (!fTI) fTI = TFile::Open("/castor/cern.ch/user/p/pkoppenb/Lambdab/LambdabMC-MC11-IncPsi-717.root")
TTree* TI = fTI->Get("Lambdab2Jpsippi_TupleMC/DecayTree")
TFile* f2 = TFile::Open("LambdabMC-MC11-IncPsi-717-NN.root")
TTree* N2 = f2->Get("NetTree")
TI->AddFriend(N2)
TI->Draw("netOutput >> h(100,-1,1)")
TI->Draw("B_SubpK_M:PsipKMass", "Category==-1")

TFile* fTK = TFile::Open("~/work/Baryons/Lambdab/LambdabMC-MC11-Lb2JpsipK-718.root")
if (!fTK) fTK = TFile::Open("/castor/cern.ch/user/p/pkoppenb/Lambdab/LambdabMC-MC11-Lb2JpsipK-718.root")
TTree* TK = fTK->Get("Lambdab2Jpsippi_TupleMC/DecayTree")
TFile* f3 = TFile::Open("LambdabMC-MC11-Lb2JpsipK-718-NN.root")
TTree* N3 = f3->Get("NetTree")
TK->AddFriend(N3)
TK->Draw("netOutput >> h(100,-1,1)")
TK->Draw("B_SubpK_M:PsipKMass", "Category==-1")

// variables
// blue is weighted Kpi, red is weighted bkg, green is true Kpi, brown is inclusive 
//======================================================================
gPad->SetLogy(0)
FourKPlots(T,TK,TI,"B_SubpK_M","NM","",5560,5810,50); 
FourKPlots(T,TK,TI,"sqrt(pMMass2)","NM","",1400,2500,22); 
FourKPlots(T,TK,TI,"sqrt(psiMMass2)","NM","",3600,4700,22); 
FourKPlots(T,TK,TI,"sqrt(psipMass2)","NM","",4000,5500,30); 
gPad->SetLogy(1)
FourKPlots(T,TK,TI,"netOutput","N","",0,1); 
gPad->SetLogy(0)
FourKPlots(T,TK,TI,"(Category==1)*(B_FullFit_chi2)+(Category==-1)*(B_SubpK_chi2)","NM","FourPlotsComp_of_B_FullFit_chi2",0,72,36); 
FourKPlots(T,TK,TI,"(Category==1)*(B_FullFit_ctau)+(Category==-1)*(B_SubpK_ctau)","NM","FourPlotsComp_of_B_FullFit_ctau",0,2); 
gPad->SetLogy(0)
FourKPlots(T,TK,TI,"B_ENDVERTEX_CHI2","NML","",0,25,25); 
gPad->SetLogy(1)
FourKPlots(T,TK,TI,"B_MINIPCHI2","NML","",0.0001,1000); 
FourKPlots(T,TK,TI,"pplus_PT","NML","",500,20000); 
FourKPlots(T,TK,TI,"pplus_PZ","NML","",1000,300000); 
FourKPlots(T,TK,TI,"pplus_MINIPCHI2","NML","",5,50000); 
FourKPlots(T,TK,TI,"pplus_ProbNNp","NM","",0,1); 
FourKPlots(T,TK,TI,"pplus_ProbNNpi","NM","",0,1); 
FourKPlots(T,TK,TI,"pplus_ProbNNk","NM","",0,1); 
FourKPlots(T,TK,TI,"pplus_TRACK_GhostProb","NM","",0,1); 
FourKPlots(T,TK,TI,"piminus_PT","NML","",500,20000); 
FourKPlots(T,TK,TI,"piminus_PZ","NML","",3000,100000); 
FourKPlots(T,TK,TI,"piminus_MINIPCHI2","NML","",5,100000); 
FourKPlots(T,TK,TI,"piminus_TRACK_GhostProb","NM","",0,1); 
FourKPlots(T,TK,TI,"nPVs","NMI","",1,8); 
//======================================================================
// Not used in NN
//======================================================================
FourKPlots(T,TK,TI,"B_FullFit_ctauErr","NM","",0,0.05); 
FourKPlots(T,TK,TI,"B_FullFit_MERR","NM","",0,20); 
FourKPlots(T,TK,TI,"pplus_PE","NML",""); 
FourKPlots(T,TK,TI,"pplus_PIDmu","NM","",-20,20); //,"1",Teach&&OK,"NM","",-20,20)
FourKPlots(T,TK,TI,"pplus_TRACK_CHI2NDOF","NML",""); 
FourKPlots(T,TK,TI,"pplus_TRACK_GhostProb","NM","",0,1); //,"1",Teach&&OK,"NM","",0,1)
FourKPlots(T,TK,TI,"piminus_PZ","NML",""); 
FourKPlots(T,TK,TI,"piminus_PIDp","NM",""); //,"1",Teach&&OK,"NM","")
FourKPlots(T,TK,TI,"piminus_PIDK","NM",""); //,"1",Teach&&OK,"NM","")
FourKPlots(T,TK,TI,"piminus_TRACK_CHI2NDOF","NML",""); 
FourKPlots(T,TK,TI,"piminus_TRACK_GhostProb","NM","",0,1); //,"1",Teach&&OK,"NM","",0,1)
FourKPlots(T,TK,TI,"Psi_ORIVX_CHI2","NML",""); 
FourKPlots(T,TK,TI,"Psi_ENDVERTEX_CHI2","NM","",0,16); 
FourKPlots(T,TK,TI,"fabs(Psi_MM-3099)","NM","",0,80); 
FourKPlots(T,TK,TI,"B_FullFit_ctau","NML",""); 
FourKPlots(T,TK,TI,"Psi_MM","NM",""); 
FourKPlots(T,TK,TI,"Kplus_PT","NML",""); 
FourKPlots(T,TK,TI,"B_FullFit_MERR","NM",""); 
FourKPlots(T,TK,TI,"Psi_MINIPCHI2","NML",""); 
FourKPlots(T,TK,TI,"B_ENDVERTEX_CHI2/B_ENDVERTEX_NDOF","N","",0,5); 
FourKPlots(T,TK,TI,"B_IPCHI2_OWNPV","NML","",0.0001,100); 
FourKPlots(T,TK,TI,"B_MINIPCHI2NEXTBEST","NML",""); 
FourKPlots(T,TK,TI,"B_P","NML",""); 
FourKPlots(T,TK,TI,"B_PT","NML",""); 
FourKPlots(T,TK,TI,"B_FullFit_ctauErr","NM",""); 
FourKPlots(T,TK,TI,"Psi_ENDVERTEX_CHI2/Psi_ENDVERTEX_NDOF","NM","NML",""); 
FourKPlots(T,TK,TI,"Psi_FDCHI2_ORIVX","NML",""); 
FourKPlots(T,TK,TI,"Psi_MMERR","NM",""); 
FourKPlots(T,TK,TI,"Psi_P","NML",""); 
FourKPlots(T,TK,TI,"Psi_PT","NML",""); 
FourKPlots(T,TK,TI,"muplus_MINIPCHI2","NML",""); 
FourKPlots(T,TK,TI,"muminus_MINIPCHI2","NML",""); 
FourKPlots(T,TK,TI,"min(muminus_MINIP,muplus_MINIP)","NML","",0.0001,10); 
FourKPlots(T,TK,TI,"min(muminus_P,muplus_P)","NML","");  
FourKPlots(T,TK,TI,"min(muminus_PT,muplus_PT)","NML",""); 
FourKPlots(T,TK,TI,"nSPDHits","NM","",0,1000,100); 
FourKPlots(T,TK,TI,"nOTClusters","NM","",0,15000); 
FourKPlots(T,TK,TI,"totCandidates","NMI"); //,"1",Teach&&OK,"NMI","")
FourKPlots(T,TK,TI,"nVeloTracks","NM",""); //,"1",Teach&&OK,"NMI","")
FourKPlots(T,TK,TI,"nLongTracks","NM","",0,600); //,"1",Teach&&OK,"NMI","")
//======================================================================
// Q in data and MC
//======================================================================
TString Qpi("(B_FullFit_M-3096.916-938.272-139.570)")
TString QK("(B_SubpK_M-3096.916-938.272-493.677)")
FourKPlots(T,TK,TI,QK,"NM","",1030,1230); 


FourKPlots(T,TK,TI,"Psi_PT","NML","",100,20000,50); 
//======================================================================
SW->Show(0)
SW->Draw("wPsippiMass","(sweightLb>-5)*(wCategory==1)")
SW->Draw("wPsipKMass","(sweightLb>-5)*(wCategory==-1)")
//======================================================================
// ppi Mass
//======================================================================

char* Lb  = "sweightLb*(sweightLb>-5)*(wCategory==1)"
char* Bkg = "sweightBkg*(sweightLb>-5)*(wCategory==1)"
gPad->SetLogy(0)
SandB(SW,0,"wPsippiMass",Lb,Bkg,"","",5560,5810)
SandB(SW,0,"wNetOutput",Lb,Bkg,"","","Psippi NetOutput at "+NN,NNcut,1)
//======================================================================
// pK Mass
//======================================================================
char* LbK  = "sweightLb*(sweightLb>-5)*(wCategory==-1)"
char* BkgK = "sweightBkg*(sweightLb>-5)*(wCategory==-1)"
gPad->SetLogy(0)
SandB(SW,0,"wPsipKMass",LbK,BkgK,"","","","",5560,5810)
gPad->SetLogy()
SandB(SW,0,"wNetOutput",LbK,BkgK,"","","PsipK NetOutput at "+NN,0,1)
//=======================================================================
// NN friend --- makes it much slower
//=======================================================================
TFile *_file1 = TFile::Open("Lambdab-R12S17b-721-NN.root")
TTree* NW = _file1->Get("NetTree")
NW->Show(0)
SW->AddFriend(NW)
SW->Draw("wPsippiMass:PsippiMass","RunNumber==102182")
gPad->SetLogy(0)
SandB(SW,0,"ppiMass",Lb,Bkg,"","N","",1100,2700,80)//

//======================================================================
// 
//======================================================================
//======================================================================

//======================================================================
// Psippi Mass
//======================================================================
SandB(NW,0,"PsippiMass","netOutput>0","","netOutput>-1 && Category==1","gpbaN","Psippi at 0.00",5570,5670)
SandB(NW,0,"PsippiMass","netOutput>0.5","","netOutput>-1 && Category==1","gpbaN","Psippi at 0.50",5570,5670)
SandB(NW,0,"PsippiMass","netOutput>0.95","","netOutput>-1 && Category==1","gpbaN","Psippi at 0.95",5570,5670)


//===================================================================
// check PID
TCut OK("B_FullFit_chi2<72 && ErrorCode==0")
TCut splitter("(piminus_ProbNNpi>piminus_ProbNNk)")
TCut pistream(splitter && OK)
TCut kstream(!splitter && OK)
TCut OptimalNN("netOutput>0.0" && OK)
char* Lb  = "sweightLb*(sweightLb>-5)*(wCategory==1)"

RooPlot* r = SandB(T,0,"pplus_ProbNNp",Lb,"Category==-2" && pistream && OptimalNN,"","N","remove") // cut at 0.3-4?
r = SandB(T,0,"pplus_ProbNNp-pplus_ProbNNk",Lb,"Category==-2" && pistream && OptimalNN,"","N","remove") // cut at 0.3-4?
r->Draw()
overlay_line(0,r)
png("Signal and Reflections p-K")





