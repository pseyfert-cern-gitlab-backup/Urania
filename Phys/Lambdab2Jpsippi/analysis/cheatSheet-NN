//------------------------------------------------------------------------------
// all plots of NN.tex
//------------------------------------------------------------------------------
root.exe
//------------------------------------------------------------------------------
// FourPlots of NN.tex -> see cheatSheet-Method
//------------------------------------------------------------------------------
//----------------------------------------------------------------------
//
//----------------------------------------------------------------------
.L ../analysis/FourPlots.C
gStyle->SetPalette(0)
TString NN = "opt"
char* WL = "sweightLb*(sweightLb>-4)*(wCategory==1)"
char* WB = "sweightBkg*(sweightLb>-4)*(wCategory==1)"
char* WLB = "sweightLb*(sweightLb>-4)*(wBaryon==1)*(wCategory==1)"
char* WLA = "sweightLb*(sweightLb>-4)*(wBaryon==-1)*(wCategory==1)"
char* WLK = "sweightLb*(sweightLb>-4)*(wCategory==-1)"
char* WBK = "sweightBkg*(sweightLb>-4)*(wCategory==-1)"
char* WLBK = "sweightLb*(sweightLb>-4)*(wBaryon==1)*(wCategory==-1)"
char* WLAK = "sweightLb*(sweightLb>-4)*(wBaryon==-1)*(wCategory==-1)"
const double m_psi = 3096.916 ;
const double m_p   =  938.272 ;
const double m_pi  =  139.570 ;
const double m_Lb  =  5620.0 ;
const double m_K  =  493.677 ;
TCut LbK("wCategory==-1 && wErrorCode==0")
TCut Lbpi("wCategory==1 && (sweightLb==-10 || sweightLb==-11) && wErrorCode==0 && (wMass<5580 || wMass>5650)")
TCut OptimalNN("netOutput>0.552")
TCut net("wnetOutput>0.552 && wErrorCode==0")

TFile* fnpi = TFile::Open("LambdabMC-Lbpi-Sim08a-1122-1123-1124-1125-NN.root")
TFile* fnk = TFile::Open("LambdabMC-LbK-Sim08a-1127-1128-1129-1137-NN.root")
TNNpi = (TTree*)fnpi->Get("NetTree")
TNNk = (TTree*)fnk->Get("NetTree")
TChain* TNN = new TChain("NetTree")
TNN->Add("Lambdab-S20r1-1062-NN.root")
TNN->Add("Lambdab-S20-1063-NN.root")
TChain* TSW = new TChain("TrainTree")
TSW->Add("Lambdab-S20r1-1062-All-SW.root")
TSW->Add("Lambdab-S20-1063-All-SW.root")
TNN->AddFriend(TSW)
//TNN->AddFriend(W)
//TNN->Draw("PsipKMass[0]:wMass[0]","Category[0]==-1 && RunNumber<90000")
TNN->Draw("PsipKMass[0]:tMass[0]","Category[0]==-1 && RunNumber<90000")

//================================================================================
gPad->SetLogy()
RooPlot* r = SandB(TNN,0,"PsippiMass",OptimalNN,"1","Category==1 && ErrorCode==0 && (PsippiMass<5580 || PsippiMass>5650)","","remove",5000,6100,110)
SetTitle("m_{J/#psip#pi} [MeV/c^{2}]",r)
r->SetMinimum(1.)
r->SetMaximum(1e4)
r->Draw()
overlay_line(5580.,r,2) ; overlay_line(5650.,r,2) ; 
png("B Psippi after NN")

RooPlot* r = SandB(TNN,0,"PsipKMass",OptimalNN,"1","Category==-1 && ErrorCode==0","","remove",5000,6100,110)
SetTitle("m_{J/#psipK} [MeV/c^{2}]",r)
r->SetMinimum(1.)
r->SetMaximum(3e4)
r->Draw()
png("B PsipK after NN")

RooPlot* rn7 = SevenPlots(TNN,TNN,TNN,0,TNN,0,0,"Category==-1 && ErrorCode==0","Category==-1 && ErrorCode==-10","Category==-1 && ErrorCode==-9","","Category==-1 && (ErrorCode==-7 || ErrorCode==-6)","","","netOutput","","remove",-1,1)
SetTitle("NN output",rn7)
rn7->SetMinimum(30.)
rn7->Draw()
overlay_line(0.552,rn7)
png("netOutput versus ErrorCode - K stream")

RooPlot* rnn7 = SevenPlots(TNN,TNN,TNN,0,TNN,0,0,"Category==-1 && ErrorCode==0","Category==-1 && ErrorCode==-10","Category==-1 && ErrorCode==-9","","Category==-1 && (ErrorCode==-7 || ErrorCode==-6)","","","netOutput","MN","remove",-1,1)
SetTitle("NN output",rnn7)
rnn7->SetMinimum(0.01)
rnn7->Draw()
overlay_line(0.552,rnn7)
png("netOutput versus ErrorCode - K stream (N)")

RooPlot* rnp7 = SevenPlots(TNN,TNN,TNN,0,TNN,0,0,"Category==1 && ErrorCode==0","Category==1 && ErrorCode==-10","Category==1 && ErrorCode==-9","","Category==1 && (ErrorCode==-7 || ErrorCode==-6)","","","netOutput","","remove",-1,1)
SetTitle("NN output",rnp7)
rnp7->SetMinimum(30)
rnp7->Draw()
overlay_line(0.552,rnp7)
png("netOutput versus ErrorCode - pi stream")

RooPlot* rnpn7 = SevenPlots(TNN,TNN,TNN,0,TNN,0,0,"Category==1 && ErrorCode==0","Category==1 && ErrorCode==-10","Category==1 && ErrorCode==-9","","Category==1 && (ErrorCode==-7 || ErrorCode==-6)","","","netOutput","MN","remove",-1,1)
SetTitle("NN output",rrnpn7)
rnpn7->SetMinimum(0.01)
rnpn7->Draw()
overlay_line(0.552,rnpn7)
png("netOutput versus ErrorCode - pi stream (N)")

RooPlot* rnpk7 = SevenPlots(TNN,TNN,TNN,TNN,0,0,0,"Category==1 && ErrorCode==0","Category==1 && ErrorCode!=0","Category==-1 && ErrorCode==0","Category==-1 && ErrorCode!=0","","","","netOutput","MN","remove",-1,1)
SetTitle("NN output",rnpk7)
rnpk7->SetMinimum(0.001)
rnpk7->Draw()
overlay_line(0.552,rnpk7)
png("netOutput versus ErrorCode - pi vs K stream (N)")

//----------------------------------------------------------------------
// Plots
//----------------------------------------------------------------------
.L ../analysis/FourPlots.C
if (gPad) gPad->SetLogy(1)
r1 = FiveWeightedTrainPlots(TNN,TNNpi,TNNk,"netOutput[0]","NM","remove",-1,1,100); 
r1->SetMinimum(0.01)
SetTitle("NN output",r1)
overlay_line(0.552,r1)
png("B_FiveWeightedTrainPlots_of_netOutput_0_")

if (gPad) gPad->SetLogy(0)
r2 = FiveWeightedTrainPlots(TNN,TNNpi,TNNk,"netOutput[0]","NM","remove",0,1,100); 
r2->SetMinimum(0.01)
SetTitle("NN output",r2)
overlay_line(0.552,r2)
png("B_FiveWeightedTrainPlots_of_netOutput_0_zoom")


//RooPlot* r = SevenPlots(TNN,TNNpK,TNNppi,0,0,0,0,KSig,Ktrue,Pitrue,"","","","","netOutput[0]",">","remove",0,1,100)

r5 = FiveWeightedTrainPlots(TNN,TNNpi,TNNk,"netOutput[0]",">","remove",0,1,100); 
r5->SetMaximum(1) ; r5->SetMinimum(0.)
SetTitle("NN cut value","Efficiency",r5)
overlay_line(0.552,r5)
png("B_FiveWeightedTrainPlots_of_netOutput_0_eff")

gPad->SetLogy()
RooPlot* r = SandB(TNN,0,"PsipKMass","Teaching==1 && int(EventNumber/2)!=EventNumber/2","int(EventNumber/2)==EventNumber/2","Category==-1 && ErrorCode==0 && netOutput>0.552","","Training sample",5300,6100,80)
SetTitle("m_{J/#psipK} [MeV/c^{2}]",r)
png("B_Training_sample")




//------------------------------------------------------------------------------
// Optimisation
//------------------------------------------------------------------------------
TString NN = "opt"
TFile* _fileOpt = TFile::Open("Lambdab-S20X-1062-Opt.root")
//((TH1D*)_fileOpt->Get("signal NN Category[0]==1 && ErrorCode[0]==0"))->Draw()
//((TH1D*)_fileOpt->Get("background NN Category[0]==1 && ErrorCode[0]==0"))->Draw()
if (gPad) gPad->SetLogy()
RooPlot* r = NiceRooPlot(((TH1D*)_fileOpt->Get("signal NN Category[0]==1 && ErrorCode[0]==0")),((TH1D*)_fileOpt->Get("background NN Category[0]==1 && ErrorCode[0]==0")),0,0,"NM")
png("Signal and Background NN")

TGraphErrors* gp = (TGraphErrors*)_fileOpt->Get("FoM2 Category[0]==1 && ErrorCode[0]==0")
TGraphErrors* gp2 = (TGraphErrors*)_fileOpt->Get("Best FoM Category[0]==1 && ErrorCode[0]==0")
TGraphErrors* sb = (TGraphErrors*)_fileOpt->Get("SB Category[0]==1 && ErrorCode[0]==0")
TGraphErrors* sb2 = (TGraphErrors*)_fileOpt->Get("Best SB Category[0]==1 && ErrorCode[0]==0")
cout << gp2->GetX()[0] << " " << gp2->GetY()[0] << endl ;

TH1 *frame = new TH1F("frame","",1000,-1,1);
frame->SetMinimum(0);
frame->SetMaximum(0.04);
frame->SetDirectory(0);
frame->SetStats(0);
frame->Draw(" ")
frame->GetXaxis()->SetTitle("NN cut")
frame->GetYaxis()->SetTitle("F.o.M.")
gPad->SetLogy(0)
gp2->SetMarkerStyle(0)
gp->Draw("")
gp2->SetMarkerStyle(20)
gp2->SetMarkerColor(2)
gp2->Draw("P")
png("FoM-"+NN)


TH1 *frame = new TH1F("frame","",1000,-1,1);
frame->SetMinimum(int(0.9*sb->GetY()[0]));
frame->SetMaximum(int(1.1*sb2->GetY()[0]));
frame->SetDirectory(0);
frame->SetStats(0);
frame->Draw(" ")
frame->GetXaxis()->SetTitle("NN cut")
frame->GetYaxis()->SetTitle("S/sqrt(S+B)")
gPad->SetLogy(0)
sb2->SetMarkerStyle(0)
sb->Draw("")
sb2->SetMarkerStyle(20)
sb2->SetMarkerColor(2)
sb2->Draw("P")
png("SB-"+NN)

TH1 *frame = new TH1F("frame","",1000,0.2,0.9);
frame->SetMinimum(25);
frame->SetMaximum(int(1.1*sb2->GetY()[0]));
frame->SetDirectory(0);
frame->SetStats(0);
frame->Draw(" ")
frame->GetXaxis()->SetTitle("NN cut")
frame->GetYaxis()->SetTitle("S/sqrt(S+B)")
gPad->SetLogy(0)
sb2->SetMarkerStyle(0)
sb->Draw("")
sb2->SetMarkerStyle(20)
sb2->SetMarkerColor(2)
sb2->Draw("P")
png("SB-zoom-"+NN)

gPad->SetLogy(0)
gPad->SetLogx(0)
TGraph* p = (TGraph*)_fileOpt->Get("Pareto Category[0]==1 && ErrorCode[0]==0")
TGraph* g = (TGraph*)_fileOpt->Get("Best Category[0]==1 && ErrorCode[0]==0")
g->SetMarkerStyle(20)
g->SetMarkerColor(2)
TH2D* h= Make2DPlot("Pareto","Signal Efficiency",100,0.0,1,"Background Efficiency",10000,0.0,1)
h->GetXaxis()->SetLimits(0.0,1)
h->Draw()
h->GetYaxis()->SetTitleOffset(1.1)
p->Draw()
g->Draw("p")
png("Pareto Lin "+NN)

gPad->SetLogy(1)
gPad->SetLogx(0)
// h->GetXaxis()->SetLimits(0.08,1)
h->Draw()
p->Draw()
g->Draw("p")
png("Pareto Log "+NN)


//==================================================================================



