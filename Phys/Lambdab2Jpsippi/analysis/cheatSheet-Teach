//=======================================================================================
// what are good discriminating variables?
//=======================================================================================
root.exe ~/work/Baryons/Lambdab/LambdabMC-MC11-Lb2Jpsippi-716.root LambdabMC-MC11-Lb2Jpsippi-716-NN.root ~/work/Baryons/Lambdab/Lambdab-R12S17b-721.root Lambdab-R12S17b-721-NN.root ~/work/Baryons/Lambdab/LambdabMC-MC11-Lb2JpsipK-718.root LambdabMC-MC11-Lb2JpsipK-718-NN.root ~/work/Baryons/Lambdab/LambdabMC-MC11-IncPsi-717.root LambdabMC-MC11-IncPsi-717-NN.root
_file0->ls()
TTree* Tppi = _file0->Get("BetaSLambdab2JpsippiDetachedLine_TupleMC/DecayTree")
TTree* Nppi = _file1->Get("NetTree")
TTree* TD = _file2->Get("BetaSLambdab2JpsippiDetachedLine_Tuple/DecayTree")
TTree* ND = _file3->Get("NetTree")
TTree* TpK = _file4->Get("Lambdab2Jpsippi_TupleMC/DecayTree")
TTree* NpK = _file5->Get("NetTree")
TTree* TJ = _file6->Get("Lambdab2Jpsippi_TupleMC/DecayTree")
TTree* NJ = _file7->Get("NetTree")
.L ../analysis/FourPlots.C
RooPlot* r = 0 ;
char* signal   = "BKGCAT==0";  // signal
char* teaching = "Teaching";   // incpsi
char* pkcut    = "BKGCAT==1";  // pK (-1)
char* dcut     = "1" ;              // data

Tppi->AddFriend(Nppi)
TD->AddFriend(ND)
TpK->AddFriend(NpK)
TJ->AddFriend(NJ)
Nppi->Show(0)
TCut ppi("BKGCAT==0")
TCut OK("ErrorCode[0]==0")
TCut Teach("Teaching")

Tppi->Draw("B_FullFit_M[0]:PsippiMass[0]",OK)
TD->Draw("B_FullFit_M[0]:PsippiMass[0]","runNumber==102182" && OK)
TpK->Draw("B_FullFit_M[0]:PsippiMass[0]",OK)
TJ->Draw("B_FullFit_M[0]:PsippiMass[0]",OK)

//The cuts
SandB(Tppi,0,"PsippiMass[0]","BKGCAT==0 && Category==1","",OK,"","",5500,5700);
SandB(TpK,0,"PsippiMass[0]","BKGCAT==1 && Category==-1","",OK,"","",5500,5700);
SandB(TJ,0,"PsippiMass[0]","Teaching && Category==1","",OK,"","",5000,6100);
SandB(TD,0,"PsippiMass[0]","Category==1","",OK,"","",5000,6100);


TH2D* h2 = Make2DPlot("h2","P(p)",100,0,1,"P(K)",100,0,1)
TD->Draw("piminus_ProbNNp:piminus_ProbNNk >> h2")
gPad->SetLogz()
h2->Draw("COLZ")
png("pion 2D")

TH2D* h2 = Make2DPlot("h2p","P(p)",100,0,1,"P(K)",100,0,1)
TD->Draw("pplus_ProbNNp:pplus_ProbNNk >> h2p")
gPad->SetLogz()
h2p->Draw("COLZ")
png("proton 2D")


FourMCPlots(Tppi,TD,TpK,TJ,"pplus_ProbNNp","NM","",0.0,1); // cut at p>0.1
SandB(Tppi,TD,"pplus_ProbNNp-pplus_ProbNNk","1","1",OK)
SandB(Tppi,TD,"pplus_ProbNNp-pplus_ProbNNk",signal,"1","pplus_ProbNNp>0.1","N")
SandB(Tppi,TD,"pplus_RichAbovePrThres",signal,"1","pplus_ProbNNp>0.1 && pplus_ProbNNp-pplus_ProbNNk>0","N")

//=======================================================================================
// Check stability
//=======================================================================================

Nppi->Show(0)
TCut OptimalNN("netOutput>0.846")
TCut Signal("Category==1 && BKGCAT==0")
TCut VetoPeak("abs((Category==1)*PsippiMass+(Category==-1)*PsipKMass-5620)>50") // must match a bin
gPad->SetLogy(0)
TwoProfile(NJ,NJ,"(Category==1)*PsippiMass+(Category==-1)*PsipKMass",OptimalNN.GetTitle(),"Category==1","Category==-1",VetoPeak && "BKGCAT>1","p1","net vs mass in inc Jpsi",4970,5970,10,0.0,0.3)
// p0: 17.4887/9 and  8.04212/9 
// p1: 9.69674/8 at -4.10691e-06 +/- 1.47127e-06 and  4.90729/8 at -5.35539e-06 +/- 3.02471e-06

 const double m_psi = 3096.916 ;
 const double m_p   =  938.272 ;
 const double m_pi  =  139.570 ;
 const double m_Lb  =  5620.0 ;
 double ppimin = (m_p+m_pi);
 double ppimax = (m_Lb-m_psi);
 double psipimin = (m_psi+m_pi);
 double psipimax = (m_Lb-m_p);

gPad->SetLogy(0)
TwoProfile(Nppi,0,"sqrt(psiMMass2)",OptimalNN,"1","",Signal,"p2","net vs psipimass",psipimin,psipimax,35,0.7,1)
TwoProfile(Nppi,0,"sqrt(pMMass2)",OptimalNN,"1","",Signal,"p4","net vs ppimass",ppimin,ppimax,36,0.8,1)

gPad->SetLogy(0)
gPad->SetLogz(0)
int nbins = 22
TH2D* ha = Make2DPlot("ha","m_{p#pi}^{2}",nbins,1,6.5,"m_{J/#psi#pi}^{2}",nbins,10,22)
TH2D* hb = Make2DPlot("hb","m_{p#pi}^{2}",nbins,1,6.5,"m_{J/#psi#pi}^{2}",nbins,10,22)
Nppi->Draw("psiMMass2/1e6:pMMass2/1e6 >> ha",Signal)
Nppi->Draw("psiMMass2/1e6:pMMass2/1e6 >> hb",OptimalNN && Signal)
TH2D* rh = (TH2D*)Divide(hb,ha,"e")
rh->Draw("COLZ")
// move axis a bit around
png("net vs Dalitz")
gPad->SetLogz(0)

gPad->SetLogy(1)
TwoProfile(ND,ND,"(Category==1)*PsippiMass+(Category==-1)*PsipKMass",OptimalNN.GetTitle(),"Category==1","Category==-1",VetoPeak,"","net vs mass in data",5000,6000,10)
gPad->SetLogy(0)

gPad->SetLogy(1)
SandB(ND,0,"PsippiMass",OptimalNN,"1","Category==1","","Psippi after NN",4900,6100,120,10,30000)
SandB(ND,0,"PsipKMass",OptimalNN,"1","Category==-1","","PsipK after NN",4900,6100,120,10,30000)
gPad->SetLogy(0)
SandB(ND,0,"PsippiMass",OptimalNN,"1","Category==1","N","Psippi after NN, norm",4900,6100,120)
gPad->SetLogy(1)
SandB(ND,0,"PsipKMass",OptimalNN,"1","Category==-1","N","PsipK after NN, norm",4900,6100,120,1e-4,0.03)

gPad->SetLogy(1)
SandB(ND,0,"netOutput","Category==1","Category==-1","1","N","netOutput K and pi",-1,1)

//=======================================================================================

gPad->SetLogy(0)
FourMCPlots(Tppi,TD,TpK,TJ,"Category[0]","IN")
gPad->SetLogy(1)
FourMCPlots(Tppi,TD,TpK,TJ,"PsippiMass[0]","NM","",4900,6100); //,"1",Teach && OK,"NM","DataMC PsippiMass",4900,6100)
FourMCPlots(Tppi,TD,TpK,TJ,"PsipKMass[0]","NM","",5000,6500); //,"1",Teach && OK,"NM","DataMC PsipKMass",5000,6500)
FourMCPlots(Tppi,TD,TpK,TJ,"PsiKpiMass[0]","NM","",4500,5600); //,"1",Teach && OK,"NM","DataMC PsiKpiMass",4500,5500)
gPad->SetLogy(0)
FourMCPlots(Tppi,TD,TpK,TJ,"pMMass2[0]/1e6","NM","",1,6.5); 
FourMCPlots(Tppi,TD,TpK,TJ,"psiMMass2[0]/1e6","NM","",10,22); 
gPad->SetLogy(1)
FourMCPlots(Tppi,TD,TpK,TJ,"(Category==1)*(PsippiMass[0]-139.570)+(Category==-1)*(PsipKMass[0]-493.677)-3096.916-938.272","NM","FourPlots_of_Q",700,1900); 
gPad->SetLogy(1)
FourMCPlots(Tppi,TD,TpK,TJ,"netOutput[0]","NM","",-1,1); //,"1",Teach && OK,"NM","DataMC netOutput",-1,1)

gPad->SetLogy(0)
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_MM","NM","",3020,3180); 

//=======================================================================================
// splitter
//=======================================================================================
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_ProbNNpi-piminus_ProbNNk","NM","",-1,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_PIDK","NM","",-100,100); 
gPad->SetLogy(1)
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_ProbNNp-pplus_ProbNNk","NM","",0,1); 
gPad->SetLogy(0)
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_RichAboveKaThres","NMI","",0,1)
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_RichAbovePrThres","NMI","",0,1)
gPad->SetLogy(1)
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_RichAbovePrThres*pplus_PZ","NML","",1000,300000); 

//=======================================================================================
// variables Alex has selected
//=======================================================================================
gPad->SetLogy(1)
FourMCPlots(Tppi,TD,TpK,TJ,"(Category==1)*(B_FullFit_chi2[0])+(Category[0]==-1)*(B_SubpK_chi2[0])","NM","FourPlots_of_B_FullFit_chi2_0_",0,72,72); 
FourMCPlots(Tppi,TD,TpK,TJ,"(Category==1)*(B_FullFit_ctau[0])+(Category[0]==-1)*(B_SubpK_ctau[0])","NML","FourPlots_of_B_FullFit_ctau_0_",0.03,10); 
r = FourMCPlots(Tppi,TD,TpK,TJ,"B_ENDVERTEX_CHI2","N","",0,25,50); 
r->SetMinimum(0.001)
r->Draw()
png("B_FourPlots_of_B_ENDVERTEX_CHI2")
FourMCPlots(Tppi,TD,TpK,TJ,"B_MINIPCHI2","NML","",0.0001,1000); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_PT","NML","",500,20000); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_PZ","NML","",1000,300000); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_MINIPCHI2","NML","",9,100000); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_ProbNNp","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_ProbNNpi","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_ProbNNk","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_TRACK_GhostProb","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_PT","NML","",500,20000); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_PZ","NML","",1000,300000); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_MINIPCHI2","NML","",5,100000); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_TRACK_GhostProb","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"nPVs","NMI","",1,9); 


//=======================================================================================
// Rejected variables
//=======================================================================================
gPad->SetLogy(1)
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_ProbNNghost","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_ProbNNp","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_ProbNNpi","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_ProbNNk","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_ProbNNghost","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_FDCHI2_OWNPV","NML","",10,1000000); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_FullFit_ctauErr[0]","NM","",0,0.05); 
FourMCPlots(Tppi,TD,TpK,TJ,"acos(B_DIRA_OWNPV)","NML","",0.00001,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_FullFit_MERR[0]","NM","",0,20); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_PE","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_PIDp","NM",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_PIDp-pplus_PIDK","NM",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_PIDK","NM",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_PIDmu","NM","",-20,20); 
FourMCPlots(Tppi,TD,TpK,TJ,"pplus_TRACK_CHI2NDOF","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_PZ","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_PIDp","NM",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_PIDK","NM",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_TRACK_CHI2NDOF","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"piminus_TRACK_GhostProb","NM","",0,1); 
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_FD_OWNPV","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_ORIVX_CHI2","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_ENDVERTEX_CHI2","NM","",0,16); 
FourMCPlots(Tppi,TD,TpK,TJ,"fabs(Psi_MM-3099)","NM","",0,80); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_FullFit_ctau[0]","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"Kplus_PT","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_FullFit_MERR[0]","NM",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_MINIPCHI2","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_ENDVERTEX_CHI2/B_ENDVERTEX_NDOF","N","",0,5); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_IPCHI2_OWNPV","NML","",0.0001,100); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_MINIPCHI2NEXTBEST","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_P","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_PT","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"B_FullFit_ctauErr[0]","NM",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_ENDVERTEX_CHI2/Psi_ENDVERTEX_NDOF","NM","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_FDCHI2_ORIVX","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_MMERR","NM",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_P","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"Psi_PT","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"muplus_MINIPCHI2","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"muminus_MINIPCHI2","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"min(muminus_MINIP,muplus_MINIP)","NML","",0.0001,10); 
FourMCPlots(Tppi,TD,TpK,TJ,"min(muminus_P,muplus_P)","NML","");  
FourMCPlots(Tppi,TD,TpK,TJ,"min(muminus_PT,muplus_PT)","NML",""); 
FourMCPlots(Tppi,TD,TpK,TJ,"nSPDHits","NM","",0,1000,100); 
FourMCPlots(Tppi,TD,TpK,TJ,"nOTClusters","NM","",0,15000); 
FourMCPlots(Tppi,TD,TpK,TJ,"totCandidates","NMI"); //,"1",Teach&&OK,"NMI","")
FourMCPlots(Tppi,TD,TpK,TJ,"nVeloTracks","NM",""); //,"1",Teach&&OK,"NMI","")
FourMCPlots(Tppi,TD,TpK,TJ,"nLongTracks","NM","",0,600); //,"1",Teach&&OK,"NMI","")
//======================================================================
// Q in data and MC
//======================================================================
TString Qpi("(B_FullFit_M[0]-3096.916-938.272-139.570)")
TString QK("(B_SubpK_M[0]-3096.916-938.272-493.677)")

double mn =  700
double mx = 1900
double bin =  60
TH1D QDpi("QDpi","Q",bin,mn,mx)
TH1D QDK("QDK","Q",bin,mn,mx)
TH1D QJpi("QJpi","Q",bin,mn,mx)
TH1D QJK("QJK","Q",bin,mn,mx)

TD->Draw(Qpi+" >> QDpi","Category==1")
TD->Draw(QK+" >> QDK","Category==-1")
TJ->Draw(Qpi+" >> QJpi","Teaching && Category==+1")
TJ->Draw(QK+" >> QJK","Teaching && Category==-1")

gPad->SetLogy(0)
NiceRooPlot(QDpi,QJpi,QDK,QJK,"NM")
png("WideQ-MC")


//======================================================================================
TTree* T =_file0->Get("BetaSLambdab2JpsippiDetachedLine_TupleMC/DecayTree")
TString oldM = "sqrt((pplus_PE + piminus_PE)**2-(pplus_PX + piminus_PX)**2-(pplus_PY + piminus_PY)**2-(pplus_PZ + piminus_PZ)**2)"
TString newM = "sqrt((B_ConstBFit_P0_PE[0] + B_ConstBFit_P1_PE[0])**2-(B_ConstBFit_P0_PX[0] + B_ConstBFit_P1_PX[0])**2-(B_ConstBFit_P0_PY[0] + B_ConstBFit_P1_PY[0])**2-(B_ConstBFit_P0_PZ[0] + B_ConstBFit_P1_PZ[0])**2)"
TString trueM = "sqrt((pplus_TRUEP_E + piminus_TRUEP_E)**2-(pplus_TRUEP_X + piminus_TRUEP_X)**2-(pplus_TRUEP_Y + piminus_TRUEP_Y)**2-(pplus_TRUEP_Z + piminus_TRUEP_Z)**2)"

TH1D HnewM("HnewM","p#pi mass [MeV/c^{2}]",80,1000,2600)
TH1D HoldM("HoldM","p#pi mass [MeV/c^2]",80,1000,2600)
TH1D HtrueM("HtrueM","p#pi mass [MeV/c^2]",80,1000,2600)
T->Draw(oldM+" >> HoldM","B_BKGCAT==0")
T->Draw(newM+" >> HnewM","B_BKGCAT==0")
T->Draw(trueM+" >> HtrueM","B_BKGCAT==0")
NiceRooPlot(HnewM,HoldM,HtrueM)  
png("ppimass")

TH1D old("old","p#pi mass - true [MeV/c^{2}]",90,-30,30)
TH1D new("new","p#pi mass - true [MeV/c^2]",90,-30,30)
T->Draw(oldM+"-"+trueM+" >> old","B_BKGCAT==0")
T->Draw(newM+"-"+trueM+" >> new","B_BKGCAT==0")
NiceRooPlot(new,old,"gg2")  // resolution of 1.9 and 3.7 MeV core
png("ppimass resolution")

TH1D Ttau("Ttau","#Lambda_{b} decay time [ps]",100,0,10.0)
TH1D Ctau("Ctau","#Lambda_{b} decay time [ps]",100,0,10.0)
TH1D Btau("Btau","#Lambda_{b} decay time [ps]",100,0,10.0)
TH1D Ftau("Ftau","#Lambda_{b} decay time [ps]",100,0,10.0)
T->Draw("1000*B_TRUETAU >> Ttau","B_BKGCAT==0")
T->Draw("1000*(B_ConstBFit_ctau[0]/299.792458) >> Ctau","B_BKGCAT==0")
T->Draw("1000*B_TAU >> Btau","B_BKGCAT==0")
T->Draw("1000*(B_FullFit_ctau[0]/299.792458) >> Ftau","B_BKGCAT==0")
NiceRooPlot(Ctau,Btau,Ftau,Ttau)

TH1D Ctau2("Ctau2","#Lambda_{b} decay time resolution [ps]",100,-0.2,0.2)
TH1D Btau2("Btau2","#Lambda_{b} decay time resolution [ps]",100,-0.2,0.2)
TH1D Ftau2("Ftau2","#Lambda_{b} decay time resolution [ps]",100,-0.2,0.2)
T->Draw("1000*(B_ConstBFit_ctau[0]/299.792458)-1000*B_TRUETAU >> Ctau2","B_BKGCAT==0")
T->Draw("1000*B_TAU-1000*B_TRUETAU >> Btau2","B_BKGCAT==0")
T->Draw("1000*(B_FullFit_ctau[0]/299.792458)-1000*B_TRUETAU >> Ftau2","B_BKGCAT==0")
NiceRooPlot(Ctau2,Btau2,Ftau2)


T->Draw("B_ConstBFit_J_psi_1S_P0_PE[0]+B_ConstBFit_J_psi_1S_P1_PE[0]-Psi_TRUEP_E")

T->Draw("(B_ConstBFit_J_psi_1S_P0_PE[0]+B_ConstBFit_J_psi_1S_P1_PE[0]-Psi_TRUEP_E)/Psi_TRUEP_E >> h(100,-0.01,0.01)")
T->Draw("(Psi_PE-Psi_TRUEP_E)/Psi_TRUEP_E >> h(100,-0.01,0.01)") // a tad more precise



//======================================================================================
// For Maurizio
// FullFit goes from 5100 to 6100
// SubpK  goes from 5000 to 6500 (kink at 5500 and 6200)
// SubKpi  goes from 4000 to 6000


TH1D w1("w1","J/#psihh mass [MeV/c^{2}]",250,4000,6500)
TH1D w2("w2","J/#psihh mass [MeV/c^{2}]",250,4000,6500)
TH1D w3("w3","J/#psihh mass [MeV/c^{2}]",250,4000,6500)
TD->Draw("B_FullFit_M[0] >> w1")
TD->Draw("B_SubpK_M[0] >> w2")
TD->Draw("B_SubKpi_M[0] >> w3")
NiceRooPlot(&w1,&w2,0,&w3)
png("psihh Wide mass range")

TH1D z1("z1","J/#psihh mass [MeV/c^{2}]",130,5100,5750)
TH1D z2("z2","J/#psihh mass [MeV/c^{2}]",130,5100,5750)
TH1D z3("z3","J/#psihh mass [MeV/c^{2}]",130,5100,5750)
TD->Draw("B_FullFit_M[0] >> z1")
TD->Draw("B_SubpK_M[0] >> z2")
TD->Draw("B_SubKpi_M[0] >> z3")
NiceRooPlot(&z1,&z2,0,&z3)
png("psihh Narrow mass range")

// const B fit
SandB(TD,0,"B_FullFit_M[0]","B_ConstBFit_chi2[0]<25*B_ConstBFit_nDOF[0]","1","1","","Psippi mass with ConstFit chi2",5400,5800)

TString rawM="sqrt((pplus_PE + piminus_PE)**2-(pplus_PX + piminus_PX)**2-(pplus_PY + piminus_PY)**2-(pplus_PZ + piminus_PZ)**2)"

TH1D pp3("pp3","ph mass [MeV/c^{2}]",100,1000,2600)
TH1D pp2("pp2","ph mass [MeV/c^{2}]",100,1000,2600)
TD->Draw(rawM+" >> pp3","Category==1 && B_ConstBFit_chi2[0]<100*B_ConstBFit_nDOF[0]")
TD->Draw("sqrt(pMMass2[0]) >> pp2","Category==1 && B_ConstBFit_chi2[0]<100*B_ConstBFit_nDOF[0]")
NiceRooPlot(&pp2,&pp3)
png("ph mass")

