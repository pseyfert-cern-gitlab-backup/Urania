/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "AngF6.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(AngF6) 



 Double_t AngF6::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 


   Double_t c1_2 = c1*c1;
   Double_t c2_2 = c2*c2;
   Double_t s1_2 = 1.-c1_2;
   Double_t s2_2 = 1.-c2_2;
   Double_t s12s22 = s1_2*s2_2;
   Double_t s1s2 = sqrt(s12s22);

   Double_t acc_val = getAcceptance();

   return -sqrt(2)*4*s1s2*c1*c2*sin(ph)*acc_val ; 

 } 


Double_t AngF6::integrateBin(Int_t code, double loc1, double hic1, double loc2, double hic2, double loph, double hiph)const
 { 
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   // assert(code==1) ; 
   // return (x.max(rangeName)-x.min(rangeName)) ; 

   double ic1;
   if (code==1 || code==2 || code==3 || code==5){


     double x1 = pow(1-hic1*hic1,3./2);
     double y1 = pow(1-loc1*loc1,3./2);

     ic1 = y1-x1; ic1/=2.; ic1*= 2./3;

   }else {

     double c1_2 = c1*c1;
     double s1_2 = 1.-c1_2;
     double s1 = sqrt(s1_2);
     ic1 = c1*s1;
   }


   double ic2;
   if (code==1 || code==2 || code==4 || code==6){


     double x2 = pow(1-hic2*hic2,3./2);
     double y2 = pow(1-loc2*loc2,3./2);
     ic2 = y2-x2; ic2/=2.; ic2*= 2./3;
     
   }else{

     double c2_2 = c2*c2;
     double s2_2 = 1.-c2_2;
     double s2 = sqrt(s2_2);
     ic2 = c2*s2;
   }


   double iph;
   if (code==1 || code==3 || code==4 || code==7 ){


     iph = -cos(hiph)+cos(loph);
   }else{

     iph = sin(ph);
   }


   return -sqrt(2)*4*ic1*ic2*iph;
 } 




