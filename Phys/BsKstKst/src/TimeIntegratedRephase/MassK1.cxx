/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "MassK1.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "TComplex.h"


#include <complex>


#define qr 197.3


ClassImp(MassK1) 


 Double_t MassK1::evaluate() const 
 { 
//    cout << "m1: "<< m1 << endl;
//    cout << "m2: "<< m2 << endl;


   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 


//    Double_t q0 = sqrt((m_kst*m_kst-(m_kaon+m_pion)*(m_kaon+m_pion))*(m_kst*m_kst-(m_kaon-m_pion)*(m_kaon-m_pion)))/(2*m_kst);
//    Double_t D0 = sqrt(2*(q0/qr)*(q0/qr)/((q0/qr)*(q0/qr)+1));

//    Double_t q_m1 = sqrt((m1*m1-(m_kaon+m_pion)*(m_kaon+m_pion))*(m1*m1-(m_kaon-m_pion)*(m_kaon-m_pion)))/(2*m1);
//    Double_t D_m1 = sqrt(2*(q_m1/qr)*(q_m1/qr)/((q_m1/qr)*(q_m1/qr)+1));
//    Double_t gamma_m1 = g_kst*(m_kst/m1)*(q_m1/q0)*(D_m1/D0)*(D_m1/D0);
   
//    std::complex<Double_t> num_m1(m_kst*gamma_m1,0);
//    std::complex<Double_t> den_m1(m_kst*m_kst-m1*m1,-m_kst*gamma_m1);
//    std::complex<Double_t> T_m1 = num_m1/den_m1;

//    Double_t pdf_m1 = real(T_m1*conj(T_m1));//*phasespace(x,massA,massB);



//    Double_t q_m2 = sqrt((m2*m2-(m_kaon+m_pion)*(m_kaon+m_pion))*(m2*m2-(m_kaon-m_pion)*(m_kaon-m_pion)))/(2*m2);
//    Double_t D_m2 = sqrt(2*(q_m2/qr)*(q_m2/qr)/((q_m2/qr)*(q_m2/qr)+1));
//    Double_t gamma_m2 = g_kst*(m_kst/m2)*(q_m2/q0)*(D_m2/D0)*(D_m2/D0);
   
//    std::complex<Double_t> num_m2(m_kst*gamma_m2,0);
//    std::complex<Double_t> den_m2(m_kst*m_kst-m2*m2,-m_kst*gamma_m2);
//    std::complex<Double_t> T_m2 = num_m2/den_m2;

//    Double_t pdf_m2 = real(T_m2*conj(T_m2));//*phasespace(x,massA,massB);




//    return pdf_m1*pdf_m2 ; 



   // P-wave mass
   TComplex PW_m1 = PWaveMass(1);
   TComplex PW_m2 = PWaveMass(2);
   Double_t acc = getAcc();

   Double_t Q_kst = sqrt((m1*m1 - pow(m_kaon+m_pion,2))*(m1*m1 - pow(m_kaon-m_pion,2)))/(2*m1);
   Double_t Q_kstb = sqrt((m2*m2 - pow(m_kaon+m_pion,2))*(m2*m2 - pow(m_kaon-m_pion,2)))/(2*m2);
   Double_t Q_B = sqrt((m_Bs*m_Bs - pow(m1+m2,2))*(m_Bs*m_Bs - pow(m1-m2,2)))/(2*m_Bs);
   Double_t phasespace = Q_kst * Q_kstb * Q_B;



   return norm*PW_m1.Rho2() * PW_m2.Rho2() * acc * phasespace;
//    return norm*PW_m1.Rho2() * PW_m2.Rho2() * acc ;

 } 



