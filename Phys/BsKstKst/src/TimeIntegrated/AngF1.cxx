/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "AngF1.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h"
#include "TH2D.h" 

ClassImp(AngF1) 


 Double_t AngF1::evaluate() const 
 { 
//    cout << "CTh1: "<< c1 <<endl;
//    cout << "CTh2: "<< c2 <<endl;
//    cout << "Phi: "<< ph << endl;

   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   Double_t c1_2 = c1*c1;
   Double_t c2_2 = c2*c2;

   Double_t coefsTH[5];
   Double_t coefsPH[5];

   getAccTHCoefs(coefsTH);
   getAccPHCoefs(coefsPH);

   Double_t c1_th = coefsTH[0];
   Double_t c2_th = coefsTH[1];
   Double_t c3_th = coefsTH[2];
   Double_t c4_th = coefsTH[3];
   Double_t c5_th = coefsTH[4];

   Double_t c1_ph = coefsPH[0];
   Double_t c2_ph = coefsPH[1];
   Double_t c3_ph = coefsPH[2];

   //cout << "c1_th: " << c1_th << endl;
   Double_t acc_th1 = 1. + c1_th*c1 + c2_th*c1_2 + c3_th*c1_2*c1 + c4_th*c1_2*c1_2 + c5_th*c1_2*c1_2*c1;
   Double_t acc_th2 = 1. + c1_th*c2 + c2_th*c2_2 + c3_th*c2_2*c2 + c4_th*c2_2*c2_2 + c5_th*c2_2*c2_2*c2;
   Double_t acc_phi = 1. + c1_ph*cos( c2_ph*ph + c3_ph);

   Double_t acc_val = acc_th1*acc_th2*acc_phi;

   if (acc_val<0){
     return 0.0000100001;
   }

   return 4*c1*c1*c2*c2*acc_val;

 } 


Double_t AngF1::analyticalIntegral(Int_t code, const char* rangeName) const
{

   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(binRange) AND x.max(binRange) WILL RETURN THE INTEGRATION1
   // BOUNDARIES FOR EACH OBSERVABLE x

   // assert(code==1) ; 
   // return (x.max(binRange)-x.min(binRange)) ; 
   
   Double_t coefsTH[5];
   Double_t coefsPH[5];

   getAccTHCoefs(coefsTH);
   getAccPHCoefs(coefsPH);

   Double_t c1_th = coefsTH[0];
   Double_t c2_th = coefsTH[1];
   Double_t c3_th = coefsTH[2];
   Double_t c4_th = coefsTH[3];
   Double_t c5_th = coefsTH[4];

   Double_t c1_ph = coefsPH[0];
   Double_t c2_ph = coefsPH[1];
   Double_t c3_ph = coefsPH[2];


   
   double ic1;
   if (code==1 || code==2 || code==3 || code==5){

     Double_t hic1 = c1.max(rangeName);
     //cout << "hic1: " << hic1 << endl;
     Double_t loc1 = c1.min(rangeName);
     //cout << "loc1: " << loc1 << endl;
     

     Double_t ic1hi = pow(hic1,3)/3. + c1_th*pow(hic1,4)/4. + c2_th*pow(hic1,5)/5. + c3_th*pow(hic1,6)/6. + c4_th*pow(hic1,7)/7. + c5_th*pow(hic1,8)/8.;
     //cout << "ic1hi: " << ic1hi << endl;
     Double_t ic1lo = pow(loc1,3)/3. + c1_th*pow(loc1,4)/4. + c2_th*pow(loc1,5)/5. + c3_th*pow(loc1,6)/6. + c4_th*pow(loc1,7)/7. + c5_th*pow(loc1,8)/8.;
     //cout << "ic1lo: " << ic1lo << endl;

     ic1 = ic1hi - ic1lo;
     //cout << "ic1" << ic1 << endl;
   }else {
     Double_t c1_2 = c1*c1;
     Double_t acc_th1 = 1. + c1_th*c1 + c2_th*c1_2 + c3_th*c1_2*c1 + c4_th*c1_2*c1_2 + c5_th*c1_2*c1_2*c1;
   
     ic1 = c1*c1*acc_th1;
   }


   double ic2;
   if (code==1 || code==2 || code==4 || code==6){

     Double_t hic2 = c2.max(rangeName);
     //cout << "hic2: " << hic2 << endl;
     Double_t loc2 = c2.min(rangeName);
     //cout << "loc2: " << loc2 << endl;
     
     Double_t ic2hi = pow(hic2,3)/3. + c1_th*pow(hic2,4)/4. + c2_th*pow(hic2,5)/5. + c3_th*pow(hic2,6)/6. + c4_th*pow(hic2,7)/7. + c5_th*pow(hic2,8)/8.;
     //cout << "ic2hi: " << ic2hi << endl;
     Double_t ic2lo = pow(loc2,3)/3. + c1_th*pow(loc2,4)/4. + c2_th*pow(loc2,5)/5. + c3_th*pow(loc2,6)/6. + c4_th*pow(loc2,7)/7. + c5_th*pow(loc2,8)/8.;
     //cout << "loc2: " << loc2 << endl;

     ic2 = ic2hi - ic2lo;
     //cout << "ic2" << ic2 << endl;

     
   }else{
     Double_t c2_2 = c2*c2;
     Double_t acc_th2 = 1. + c1_th*c2 + c2_th*c2_2 + c3_th*c2_2*c2 + c4_th*c2_2*c2_2 + c5_th*c2_2*c2_2*c2;
   
     ic2 = c2*c2*acc_th2;
   }


   double iph;
   if (code==1 || code==3 || code==4 || code==7 ){

     Double_t hiph = ph.max(rangeName);
     //cout << "hiph: "<< hiph << endl;
     Double_t loph = ph.min(rangeName);
     //cout << "loph: "<< loph << endl;

     Double_t iphhi = hiph + c1_ph*cos(c2_ph*hiph)*sin(c3_ph)/c2_ph + c1_ph*cos(c3_ph)*sin(c2_ph*hiph)/c2_ph;
     //cout << "iphhi: " << c1_ph*cos(c2_ph*hiph)*sin(c3_ph)/c2_ph << endl;
     Double_t iphlo = loph + c1_ph*cos(c2_ph*loph)*sin(c3_ph)/c2_ph + c1_ph*cos(c3_ph)*sin(c2_ph*loph)/c2_ph;
     //cout << "iphlo: " << iphlo << endl;

     iph = iphhi - iphlo;
     //cout << "iph: " << iph << endl;


   }else{
     Double_t acc_ph = 1. + c1_ph*cos( c2_ph*ph + c3_ph);

     iph = acc_ph;
   }

  

   return 4*ic1*ic2*iph;

 } 



