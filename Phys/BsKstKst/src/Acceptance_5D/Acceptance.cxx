/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "Acceptance.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include <gsl/gsl_sf_legendre.h>



ClassImp(Acceptance) 

 Acceptance::Acceptance(const char *name, const char *title, 
                        RooAbsReal& _c1,
                        RooAbsReal& _c2,
                        RooAbsReal& _ph,
                        RooAbsReal& _m1,
                        RooAbsReal& _m2,
			Int_t *_orders,
 			double **_coeffs) :
   RooAbsReal(name,title), 
   c1("c1","c1",this,_c1),
   c2("c2","c2",this,_c2),
   ph("ph","ph",this,_ph),
   m1("m1","m1",this,_m1),
   m2("m2","m2",this,_m2)
 {

   int dimension = 2;
   

   for(int r=0;r<dimension; r++){
     orders[r] = (Int_t)_orders[r];
   }


   for (int i=0;i<orders[0];i++){
     for (int j=0;j<orders[1];j++){

	     coeffs[i][j] = _coeffs[i][j];
       }}
 
 }

//  Acceptance::Acceptance(const char *name, const char *title, 
//                         RooAbsReal& _c1,
//                         RooAbsReal& _c2,
//                         RooAbsReal& _ph,
//                         RooAbsReal& _m1,
//                         RooAbsReal& _m2,
// 			Int_t *_orders,
// 			Double_t *****_coeffs) :
//    RooAbsReal(name,title), 
//    c1("c1","c1",this,_c1),
//    c2("c2","c2",this,_c2),
//    ph("ph","ph",this,_ph),
//    m1("m1","m1",this,_m1),
//    m2("m2","m2",this,_m2)
//  { 
   
//    int dimension = 5;
   

//    for(int r=0;r<dimension; r++){
//      orders[r] = (Int_t)_orders[r];
//    }


//    for (int i=0;i<orders[0];i++){
//      for (int j=0;j<orders[1];j++){
//        for (int l=0;l<orders[2];l++){
// 	 for (int n=0;n<orders[3];n++){
// 	   for (int m=0;m<orders[4];m++){

// 	     coeffs[i][j][l][n][m] = (Double_t)_coeffs[i][j][l][n][m];


// 	   }
// 	 }
//        }
//      }
//    }

//  } 


 Acceptance::Acceptance(const Acceptance& other, const char* name) :  
   RooAbsReal(other,name), 
   c1("c1",this,other.c1),
   c2("c2",this,other.c2),
   ph("ph",this,other.ph),
   m1("m1",this,other.m1),
   m2("m2",this,other.m2)
 { 

//    int dimension = 5;
   

//    for(int r=0;r<dimension; r++){
//      orders[r] = other.orders[r];
//    }


//    for (int i=0;i<orders[0];i++){
//      for (int j=0;j<orders[1];j++){
//        for (int l=0;l<orders[2];l++){
// 	 for (int n=0;n<orders[3];n++){
// 	   for (int m=0;m<orders[4];m++){

// 	     coeffs[i][j][l][n][m] = other.coeffs[i][j][l][n][m];


// 	   }
// 	 }
//        }
//      }
//    }
   
   
 } 



 Double_t Acceptance::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 


//    double Y_nm= 0.; double P_i= 0; double P_j= 0; double P_l= 0;
//    double Eff = 0.;
//    double m1_red = (m1 - 746)/(1046 - 746)*2. + (-1);
//    double m2_red = (m1 - 746)/(1046 - 746)*2. + (-1);

//    for (int i=0;i<orders[0];i++){
//      for (int j=0;j<orders[1];j++){
//        for (int l=0;l<orders[2];l++){
// 	 for (int n=0;n<orders[3];n++){
// 	   for (int m=0;m<orders[4];m++){
//                     P_i  = gsl_sf_legendre_Pl(i,m1_red);                                                                              
//                     P_j  = gsl_sf_legendre_Pl(j,m2_red);                                                                              
//                     P_l  = gsl_sf_legendre_Pl(l,c1);
//                     if ( m == 0 ) Y_nm = gsl_sf_legendre_sphPlm (n,m,c1);
//                     else          Y_nm = sqrt(2) * gsl_sf_legendre_sphPlm(n,m,c2) * cos(m*ph);
//                     Eff += coeffs[i][j][l][n][m]*(P_i*P_j*P_l* Y_nm);
//                   }
//               }
//           }
//       }
//    }

//      return (Double_t)Eff;
   return 0.;

 } 



