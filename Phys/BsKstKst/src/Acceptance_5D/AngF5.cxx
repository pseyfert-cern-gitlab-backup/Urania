/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "AngF5.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(AngF5) 


// AngF5::AngF5()
// {
//   RooRealVar c1RV("c1RV","c1",-1.,1.);
//   RooRealVar c2RV("c2RV","c2",-1.,1.);
//   RooRealVar phRV("phRV","ph",0.,2*pi);
//   RooArgList accTH_coefListRV();
//   RooArgList accPH_coefListRV();

//   AngF5("AngF5","AngF5",c1RV,c2RV,phRV,accTH_coefListRV,accPH_coefListRV);  
// }

 Double_t AngF5::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 

   Double_t c1_2 = c1*c1;
   Double_t c2_2 = c2*c2;
   Double_t s1_2 = 1.-c1_2;
   Double_t s2_2 = 1.-c2_2;
   Double_t s12s22 = s1_2*s2_2;
   Double_t s1s2 = sqrt(s12s22);

   Double_t coefsTH[5];
   Double_t coefsPH[5];

   getAccTHCoefs(coefsTH);
   getAccPHCoefs(coefsPH);

   Double_t c1_th = coefsTH[0];
   Double_t c2_th = coefsTH[1];
   Double_t c3_th = coefsTH[2];
   Double_t c4_th = coefsTH[3];
   Double_t c5_th = coefsTH[4];

   Double_t c1_ph = coefsPH[0];
   Double_t c2_ph = coefsPH[1];
   Double_t c3_ph = coefsPH[2];


   Double_t acc_th1 = 1. + c1_th*c1 + c2_th*c1_2 + c3_th*c1_2*c1 + c4_th*c1_2*c1_2 + c5_th*c1_2*c1_2*c1;
   Double_t acc_th2 = 1. + c1_th*c2 + c2_th*c2_2 + c3_th*c2_2*c2 + c4_th*c2_2*c2_2 + c5_th*c2_2*c2_2*c2;
   Double_t acc_phi = 1. + c1_ph*cos( c2_ph*ph + c3_ph);

   Double_t acc_val = acc_th1*acc_th2*acc_phi;
   if (acc_val<0){
     return 0.00001;
   }

   return sqrt(2)*4*s1s2*c1*c2*cos(ph)*acc_val ; 
 } 






Double_t AngF5::analyticalIntegral(Int_t code, const char* rangeName) const
 { 
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   // assert(code==1) ; 
   // return (x.max(rangeName)-x.min(rangeName)) ; 
   Double_t c1_2 = c1*c1;
   Double_t c2_2 = c2*c2;

   Double_t coefsTH[5];
   Double_t coefsPH[5];

   getAccTHCoefs(coefsTH);
   getAccPHCoefs(coefsPH);

   Double_t c1_th = coefsTH[0];
   Double_t c2_th = coefsTH[1];
   Double_t c3_th = coefsTH[2];
   Double_t c4_th = coefsTH[3];
   Double_t c5_th = coefsTH[4];

   Double_t c1_ph = coefsPH[0];
   Double_t c2_ph = coefsPH[1];
   Double_t c3_ph = coefsPH[2];

   Double_t acc_th1 = 1. + c1_th*c1 + c2_th*c1_2 + c3_th*c1_2*c1 + c4_th*c1_2*c1_2 + c5_th*c1_2*c1_2*c1;
   Double_t acc_th2 = 1. + c1_th*c2 + c2_th*c2_2 + c3_th*c2_2*c2 + c4_th*c2_2*c2_2 + c5_th*c2_2*c2_2*c2;
   Double_t acc_ph = 1. + c1_ph*cos( c2_ph*ph + c3_ph);


   double ic1;
   if (code==1 || code==2 || code==3 || code==5){

     Double_t hic1 = c1.max(rangeName);
     Double_t loc1 = c1.min(rangeName);

//      double x1 = sqrt(1-pow(hic1,2))*(896.*c2_th*(-2.-pow(hic1,2)+3.*pow(hic1,4)) + 128.*c4_th*(-8.-4.*pow(hic1,2)-3.*pow(hic1,4)+15.*pow(hic1,6)) +
// 				      35.*(-128.-15.*c5_th*hic1+128.*pow(hic1,2)-10.*c5_th*pow(hic1,3)-8*c5_th*pow(hic1,5)+48.*c5_th*pow(hic1,7)+48.*c1_th*hic1*(-1.+2.*pow(hic1,2))+8.*c3_th*hic1*(-3.-2.*pow(hic1,2)+8.*pow(hic1,4)))) + 105.*(16.*c1_th + 8.*c3_th + 5.*c5_th)*asin(hic1); x1/=13440.;

//      double y1 = sqrt(1-pow(loc1,2))*(896.*c2_th*(-2.-pow(loc1,2)+3.*pow(loc1,4)) + 128.*c4_th*(-8.-4.*pow(loc1,2)-3.*pow(loc1,4)+15.*pow(loc1,6)) +
// 				      35.*(-128.-15.*c5_th*loc1+128.*pow(loc1,2)-10.*c5_th*pow(loc1,3)-8*c5_th*pow(loc1,5)+48.*c5_th*pow(loc1,7)+48.*c1_th*loc1*(-1.+2.*pow(loc1,2))+8.*c3_th*loc1*(-3.-2.*pow(loc1,2)+8.*pow(loc1,4)))) + 105.*(16.*c1_th + 8.*c3_th + 5.*c5_th)*asin(loc1); x1/=13440.;



     double x1 = (sqrt(1 - pow(hic1,2))*(896*c2_th*(-2 - pow(hic1,2) + 3*pow(hic1,4)) + 128*c4_th*(-8 - 4*pow(hic1,2) - 3*pow(hic1,4) + 15*pow(hic1,6)) + 35*(-128 - 15*c5_th*hic1 + 128*pow(hic1,2) - 10*c5_th*pow(hic1,3) - 8*c5_th*pow(hic1,5) + 48*c5_th*pow(hic1,7) + 48*c1_th*hic1*(-1 + 2*pow(hic1,2)) + 8*c3_th*hic1*(-3 - 2*pow(hic1,2) + 8*pow(hic1,4)))) + 105*(16*c1_th + 8*c3_th + 5*c5_th)*asin(hic1))/13440.;
  
     double y1 = (sqrt(1 - pow(loc1,2))*(896*c2_th*(-2 - pow(loc1,2) + 3*pow(loc1,4)) + 128*c4_th*(-8 - 4*pow(loc1,2) - 3*pow(loc1,4) + 15*pow(loc1,6)) + 35*(-128 - 15*c5_th*loc1 + 128*pow(loc1,2) - 10*c5_th*pow(loc1,3) - 8*c5_th*pow(loc1,5) + 48*c5_th*pow(loc1,7) + 48*c1_th*loc1*(-1 + 2*pow(loc1,2)) + 8*c3_th*loc1*(-3 - 2*pow(loc1,2) + 8*pow(loc1,4)))) + 105*(16*c1_th + 8*c3_th + 5*c5_th)*asin(loc1))/13440.;

     ic1 = x1-y1;

   }else {

     double s1_2 = 1.-c1_2;
     double s1 = sqrt(s1_2);
     ic1 = c1*s1*acc_th1;
   }


   double ic2;
   if (code==1 || code==2 || code==4 || code==6){
     Double_t hic2 = c2.max(rangeName);
     Double_t loc2 = c2.min(rangeName);


     double x2 = (sqrt(1 - pow(hic2,2))*(896*c2_th*(-2 - pow(hic2,2) + 3*pow(hic2,4)) + 128*c4_th*(-8 - 4*pow(hic2,2) - 3*pow(hic2,4) + 15*pow(hic2,6)) + 35*(-128 - 15*c5_th*hic2 + 128*pow(hic2,2) - 10*c5_th*pow(hic2,3) - 8*c5_th*pow(hic2,5) + 48*c5_th*pow(hic2,7) + 48*c1_th*hic2*(-1 + 2*pow(hic2,2)) + 8*c3_th*hic2*(-3 - 2*pow(hic2,2) + 8*pow(hic2,4)))) + 105*(16*c1_th + 8*c3_th + 5*c5_th)*asin(hic2))/13440.;
  
     double y2 = (sqrt(1 - pow(loc2,2))*(896*c2_th*(-2 - pow(loc2,2) + 3*pow(loc2,4)) + 128*c4_th*(-8 - 4*pow(loc2,2) - 3*pow(loc2,4) + 15*pow(loc2,6)) + 35*(-128 - 15*c5_th*loc2 + 128*pow(loc2,2) - 10*c5_th*pow(loc2,3) - 8*c5_th*pow(loc2,5) + 48*c5_th*pow(loc2,7) + 48*c1_th*loc2*(-1 + 2*pow(loc2,2)) + 8*c3_th*loc2*(-3 - 2*pow(loc2,2) + 8*pow(loc2,4)))) + 105*(16*c1_th + 8*c3_th + 5*c5_th)*asin(loc2))/13440.;


     ic2 = x2-y2;

     
   }else{

     double s2_2 = 1.-c2_2;
     double s2 = sqrt(s2_2);
     ic2 = c2*s2*acc_th2;
   }


   double iph;
   if (code==1 || code==3 || code==4 || code==7 ){

     Double_t hiph = ph.max(rangeName);
     Double_t loph = ph.min(rangeName);


     double x3 = sin(hiph) + (c1_ph*sin(c3_ph + (-1 + c2_ph)*hiph))/(2*(-1 + c2_ph)) + (c1_ph*sin(c3_ph + hiph + c2_ph*hiph))/(2*(1 + c2_ph));
     double y3 = sin(loph) + (c1_ph*sin(c3_ph + (-1 + c2_ph)*loph))/(2*(-1 + c2_ph)) + (c1_ph*sin(c3_ph + loph + c2_ph*loph))/(2*(1 + c2_ph));


     iph = x3-y3;
   }else{

     iph = cos(ph)*acc_ph;
   }


   return sqrt(2)*4*ic1*ic2*iph;
 } 



