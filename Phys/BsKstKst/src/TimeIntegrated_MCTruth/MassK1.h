/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef MASSK1
#define MASSK1

#include "RooAbsReal.h"
#include "RooRealProxy.h"
#include "RooListProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooArgList.h"
#include "RooAbsCategory.h"
#include "TComplex.h"

Double_t j = 1;
Double_t mDa = 493.677000; 
Double_t mDb = 139.570180;
Double_t l = 0;
 
class MassK1 : public RooAbsReal {
public:
  MassK1() {} ; 
  MassK1(const char *name, const char *title,
	      RooAbsReal& _m1,
	      RooAbsReal& _m2,
	      RooAbsReal& _m_kst,
	      RooAbsReal& _m_kst0,
	      RooAbsReal& _g_kst,
	      RooAbsReal& _g_kst0,
	 RooAbsReal& _m_Bs,
	 RooArgList& _acc_coefList,
	 RooAbsReal& _norm);

  MassK1(const MassK1& other, const char* name=0);


  virtual TObject* clone(const char* newname) const { return new MassK1(*this,newname); }
  inline virtual ~MassK1() { }

  Double_t calculatePDF_1D (Int_t indx) const;//(Double_t m_kst, Double_t m_kstb) const;
  Double_t getPDF_1D (Double_t m_kst, Double_t m_kstb) const;//(Double_t m_kst, Double_t m_kstb) const;
  Double_t getPDF_2D (Double_t mkst, Double_t mkstb) const;//(Double_t m_kst, Double_t m_kstb) const;
  
  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

                                                                                               

  Double_t evaluate() const ;

protected:

  RooRealProxy m1 ;
  RooRealProxy m2 ;
  RooRealProxy m_kst ;
  RooRealProxy m_kst0 ;
  RooRealProxy g_kst ;
  RooRealProxy g_kst0 ;
  RooRealProxy MB ;
  RooListProxy acc_coefList;
  RooRealProxy norm;
  TIterator* coefIter;


private:

  ClassDef(MassK1,1) // Your description goes here...
};
 
#endif
