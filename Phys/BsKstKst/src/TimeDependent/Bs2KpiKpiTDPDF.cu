#include <math.h>
#include <stdio.h>
#include <pycuda-complex.hpp>
#include<curand.h>
#include<curand_kernel.h>

extern "C" {

// ##########################################
// Global variables

#define pi 3.14159265359
#define MPion 139.57018
#define MKaon 493.667
#define MKst_1_1410 1414.
#define GKst_1_1410 232.
#define MKst_1_1680 1717.
#define GKst_1_1680 322.
#define MBs 5366.77

__device__ double DCP_prod;

__device__ double c1_pol_Stheo = -5.05015e-01;
__device__ double c2_pol_Stheo = -2.59249e-01;
__device__ double c3_pol_Stheo = -2.77261e-02;
__device__ double c4_pol_Stheo = 0.;
__device__ double MEta = 547.;
__device__ double sAdler_Stheo = 0.236;
__device__ double B0_Stheo = 0.411;
__device__ double B1_Stheo = 0.162;
__device__ double alpha_Stheo = 1.15;
__device__ double s0_Stheo = 1.21;
__device__ double phi0_Stheo = -0.19;
__device__ double phi1_Stheo = 5.03;
__device__ double a_Stheo = -5.2;
__device__ double b_Stheo = 7.6;
__device__ double c_Stheo = -1.73;
__device__ double sqrtsr1_Stheo = 1.401;
__device__ double sqrtsr2_Stheo = 1.817;
__device__ double e1_Stheo = 1.;
__device__ double e2_Stheo = 0.184;
__device__ double G1_Stheo = 0.497;
__device__ double G2_Stheo = 0.28;

__device__ double s_Kpi_palano = (139.57018*139.57018+493.667*493.667)/1000./1000.;
__device__ double s_A_palano = 0.87753*(139.57018*139.57018+493.667*493.667)/1000./1000.;
__device__ double s_a_palano = 1.7991;
__device__ double g_1_a_palano = 0.3139;
__device__ double g_2_a_palano = -0.00775;
__device__ double s_b_palano = 8.3627;
__device__ double g_1_b_palano = 1.1804;
__device__ double g_2_b_palano = -0.22335;
__device__ double C_11_0_palano = -0.1553;
__device__ double C_11_1_palano = 0.0909;
__device__ double C_11_2_palano = 0.8618;
__device__ double C_11_3_palano = 0.0629;
__device__ double C_12_0_palano = 0.0738;
__device__ double C_12_1_palano = 0.3866;
__device__ double C_12_2_palano = 1.2195;
__device__ double C_12_3_palano = 0.8390;
__device__ double C_22_0_palano = -0.0036;
__device__ double C_22_1_palano = 0.2590;
__device__ double C_22_2_palano = 1.6950;
__device__ double C_22_3_palano = 2.2300;
__device__ double A_1_0_palano = 1.;
__device__ double A_1_1_palano = -7.07172467436;
__device__ double A_1_2_palano = 4.34784254354;
__device__ double A_1_3_palano = -3.4044610049;
__device__ double A_1_4_palano = -0.0935031564737;
__device__ double A_2_0_palano = -7.01196566782;
__device__ double A_2_1_palano = -1.37175534595;
__device__ double A_2_2_palano = -7.97420327456;
__device__ double A_2_3_palano = 1.89304254061;
__device__ double A_2_4_palano = -5.18470699036;


// ##########################################
// Auxiliar elements

__device__ double fjjphhpindexdict[3][3][5][5];
__device__ double ghhpindexdict[5][5];
__device__ double reNj1j2hdict[3][3][5];
__device__ double imNj1j2hdict[3][3][5];
__device__ double spl_knot_vector[2][2][6];

__device__ pycuda::complex<double> Nj1j2hdict(int j1, int j2, int h) {

   return pycuda::complex<double>(reNj1j2hdict[j1][j2][h],imNj1j2hdict[j1][j2][h]);

 }


// ##########################################
// Initializer

__global__ void initialize() {

   fjjphhpindexdict[0][0][0][0] = 1;
   fjjphhpindexdict[0][1][0][0] = 2;
   fjjphhpindexdict[0][1][0][1] = 3;
   fjjphhpindexdict[0][1][0][2] = 3;
   fjjphhpindexdict[0][2][0][0] = 4;
   fjjphhpindexdict[0][2][0][1] = 5;
   fjjphhpindexdict[0][2][0][2] = 5;
   fjjphhpindexdict[1][0][0][0] = 2;
   fjjphhpindexdict[1][1][0][0] = 6;
   fjjphhpindexdict[1][1][0][1] = 5;
   fjjphhpindexdict[1][1][0][2] = 5;
   fjjphhpindexdict[1][2][0][0] = 7;
   fjjphhpindexdict[1][2][0][1] = 8;
   fjjphhpindexdict[1][2][0][2] = 8;
   fjjphhpindexdict[1][0][1][0] = 3;
   fjjphhpindexdict[1][0][2][0] = 3;
   fjjphhpindexdict[1][1][1][0] = 5;
   fjjphhpindexdict[1][1][2][0] = 5;
   fjjphhpindexdict[1][1][1][1] = 9;
   fjjphhpindexdict[1][1][1][2] = 9;
   fjjphhpindexdict[1][1][2][1] = 9;
   fjjphhpindexdict[1][1][2][2] = 9;
   fjjphhpindexdict[1][2][1][0] = 10;
   fjjphhpindexdict[1][2][2][0] = 10;
   fjjphhpindexdict[1][2][1][1] = 11;
   fjjphhpindexdict[1][2][1][2] = 11;
   fjjphhpindexdict[1][2][2][1] = 11;
   fjjphhpindexdict[1][2][2][2] = 11;
   fjjphhpindexdict[2][0][0][0] = 4;
   fjjphhpindexdict[2][1][0][0] = 7;
   fjjphhpindexdict[2][1][0][1] = 10;
   fjjphhpindexdict[2][1][0][2] = 10;
   fjjphhpindexdict[2][2][0][0] = 12;
   fjjphhpindexdict[2][2][0][1] = 13;
   fjjphhpindexdict[2][2][0][2] = 13;
   fjjphhpindexdict[2][0][1][0] = 5;
   fjjphhpindexdict[2][0][2][0] = 5;
   fjjphhpindexdict[2][1][1][0] = 8;
   fjjphhpindexdict[2][1][2][0] = 8;
   fjjphhpindexdict[2][1][1][1] = 11;
   fjjphhpindexdict[2][1][1][2] = 11;
   fjjphhpindexdict[2][1][2][1] = 11;
   fjjphhpindexdict[2][1][2][2] = 11;
   fjjphhpindexdict[2][2][1][0] = 13;
   fjjphhpindexdict[2][2][2][0] = 13;
   fjjphhpindexdict[2][2][1][1] = 14;
   fjjphhpindexdict[2][2][1][2] = 14;
   fjjphhpindexdict[2][2][2][1] = 14;
   fjjphhpindexdict[2][2][2][2] = 14;
   fjjphhpindexdict[0][2][0][3] = 9;
   fjjphhpindexdict[0][2][0][4] = 9;
   fjjphhpindexdict[1][2][0][3] = 11;
   fjjphhpindexdict[1][2][0][4] = 11;
   fjjphhpindexdict[1][2][1][3] = 15;
   fjjphhpindexdict[1][2][1][4] = 15;
   fjjphhpindexdict[1][2][2][3] = 15;
   fjjphhpindexdict[1][2][2][4] = 15;
   fjjphhpindexdict[2][2][0][3] = 16;
   fjjphhpindexdict[2][2][0][4] = 16;
   fjjphhpindexdict[2][2][1][3] = 17;
   fjjphhpindexdict[2][2][1][4] = 17;
   fjjphhpindexdict[2][2][2][3] = 17;
   fjjphhpindexdict[2][2][2][4] = 17;
   fjjphhpindexdict[2][0][3][0] = 9;
   fjjphhpindexdict[2][0][4][0] = 9;
   fjjphhpindexdict[2][1][3][0] = 11;
   fjjphhpindexdict[2][1][4][0] = 11;
   fjjphhpindexdict[2][1][3][1] = 15;
   fjjphhpindexdict[2][1][3][2] = 15;
   fjjphhpindexdict[2][1][4][1] = 15;
   fjjphhpindexdict[2][1][4][2] = 15;
   fjjphhpindexdict[2][2][3][0] = 16;
   fjjphhpindexdict[2][2][4][0] = 16;
   fjjphhpindexdict[2][2][3][1] = 17;
   fjjphhpindexdict[2][2][3][2] = 17;
   fjjphhpindexdict[2][2][4][1] = 17;
   fjjphhpindexdict[2][2][4][2] = 17;
   fjjphhpindexdict[2][2][3][3] = 18;
   fjjphhpindexdict[2][2][3][4] = 18;
   fjjphhpindexdict[2][2][4][3] = 18;
   fjjphhpindexdict[2][2][4][4] = 18;

   ghhpindexdict[0][0] = 1;
   ghhpindexdict[0][1] = 2;
   ghhpindexdict[0][2] = 3;
   ghhpindexdict[1][0] = 2;
   ghhpindexdict[1][1] = 4;
   ghhpindexdict[1][2] = 5;
   ghhpindexdict[2][0] = 3;
   ghhpindexdict[2][1] = 5;
   ghhpindexdict[2][2] = 6;
   ghhpindexdict[0][3] = 7;
   ghhpindexdict[0][4] = 8;
   ghhpindexdict[1][3] = 9;
   ghhpindexdict[1][4] = 10;
   ghhpindexdict[2][3] = 11;
   ghhpindexdict[2][4] = 12;
   ghhpindexdict[3][0] = 7;
   ghhpindexdict[3][1] = 9;
   ghhpindexdict[3][2] = 11;
   ghhpindexdict[3][3] = 13;
   ghhpindexdict[3][4] = 14;
   ghhpindexdict[4][0] = 8;
   ghhpindexdict[4][1] = 10;
   ghhpindexdict[4][2] = 12;
   ghhpindexdict[4][3] = 14;
   ghhpindexdict[4][4] = 15;

   reNj1j2hdict[0][0][0] = pycuda::real(pycuda::complex<double>(1./(2.*sqrt(2.*pi)),0.));
   reNj1j2hdict[0][1][0] = pycuda::real(pycuda::complex<double>(-sqrt(3.)/(2.*sqrt(2.*pi)),0.));
   reNj1j2hdict[0][2][0] = pycuda::real(pycuda::complex<double>(sqrt(5.)/(4.*sqrt(2.*pi)),0.));
   reNj1j2hdict[1][0][0] = pycuda::real(pycuda::complex<double>(sqrt(3.)/(2.*sqrt(2.*pi)),0.));
   reNj1j2hdict[1][1][0] = pycuda::real(pycuda::complex<double>(-3./(2.*sqrt(2.*pi)),0.));
   reNj1j2hdict[1][1][1] = pycuda::real(pycuda::complex<double>(-3./(4.*sqrt(pi)),0.));
   reNj1j2hdict[1][1][2] = pycuda::real(pycuda::complex<double>(0.,-3./(4.*sqrt(pi))));
   reNj1j2hdict[1][2][0] = pycuda::real(pycuda::complex<double>(sqrt(15.)/(4.*sqrt(2.*pi)),0.));
   reNj1j2hdict[1][2][1] = pycuda::real(pycuda::complex<double>(3.*sqrt(5.)/(4.*sqrt(pi)),0.));
   reNj1j2hdict[1][2][2] = pycuda::real(pycuda::complex<double>(0.,3.*sqrt(5.)/(4.*sqrt(pi))));
   reNj1j2hdict[2][0][0] = pycuda::real(pycuda::complex<double>(sqrt(5.)/(4.*sqrt(2.*pi)),0.));
   reNj1j2hdict[2][1][0] = pycuda::real(pycuda::complex<double>(-sqrt(15.)/(4.*sqrt(2.*pi)),0.));
   reNj1j2hdict[2][1][1] = pycuda::real(pycuda::complex<double>(-3.*sqrt(5.)/(4.*sqrt(pi)),0.));
   reNj1j2hdict[2][1][2] = pycuda::real(pycuda::complex<double>(0.,-3.*sqrt(5.)/(4.*sqrt(pi))));
   reNj1j2hdict[2][2][0] = pycuda::real(pycuda::complex<double>(5./(8.*sqrt(2.*pi)),0.));
   reNj1j2hdict[2][2][1] = pycuda::real(pycuda::complex<double>(15./(4.*sqrt(pi)),0.));
   reNj1j2hdict[2][2][2] = pycuda::real(pycuda::complex<double>(0.,15./(4.*sqrt(pi))));
   reNj1j2hdict[2][2][3] = pycuda::real(pycuda::complex<double>(15./(16.*sqrt(pi)),0.));
   reNj1j2hdict[2][2][4] = pycuda::real(pycuda::complex<double>(0.,15./(16.*sqrt(pi))));
   imNj1j2hdict[0][0][0] = pycuda::imag(pycuda::complex<double>(1./(2.*sqrt(2.*pi)),0.));
   imNj1j2hdict[0][1][0] = pycuda::imag(pycuda::complex<double>(-sqrt(3.)/(2.*sqrt(2.*pi)),0.));
   imNj1j2hdict[0][2][0] = pycuda::imag(pycuda::complex<double>(sqrt(5.)/(4.*sqrt(2.*pi)),0.));
   imNj1j2hdict[1][0][0] = pycuda::imag(pycuda::complex<double>(sqrt(3.)/(2.*sqrt(2.*pi)),0.));
   imNj1j2hdict[1][1][0] = pycuda::imag(pycuda::complex<double>(-3./(2.*sqrt(2.*pi)),0.));
   imNj1j2hdict[1][1][1] = pycuda::imag(pycuda::complex<double>(-3./(4.*sqrt(pi)),0.));
   imNj1j2hdict[1][1][2] = pycuda::imag(pycuda::complex<double>(0.,-3./(4.*sqrt(pi))));
   imNj1j2hdict[1][2][0] = pycuda::imag(pycuda::complex<double>(sqrt(15.)/(4.*sqrt(2.*pi)),0.));
   imNj1j2hdict[1][2][1] = pycuda::imag(pycuda::complex<double>(3.*sqrt(5.)/(4.*sqrt(pi)),0.));
   imNj1j2hdict[1][2][2] = pycuda::imag(pycuda::complex<double>(0.,3.*sqrt(5.)/(4.*sqrt(pi))));
   imNj1j2hdict[2][0][0] = pycuda::imag(pycuda::complex<double>(sqrt(5.)/(4.*sqrt(2.*pi)),0.));
   imNj1j2hdict[2][1][0] = pycuda::imag(pycuda::complex<double>(-sqrt(15.)/(4.*sqrt(2.*pi)),0.));
   imNj1j2hdict[2][1][1] = pycuda::imag(pycuda::complex<double>(-3.*sqrt(5.)/(4.*sqrt(pi)),0.));
   imNj1j2hdict[2][1][2] = pycuda::imag(pycuda::complex<double>(0.,-3.*sqrt(5.)/(4.*sqrt(pi))));
   imNj1j2hdict[2][2][0] = pycuda::imag(pycuda::complex<double>(5./(8.*sqrt(2.*pi)),0.));
   imNj1j2hdict[2][2][1] = pycuda::imag(pycuda::complex<double>(15./(4.*sqrt(pi)),0.));
   imNj1j2hdict[2][2][2] = pycuda::imag(pycuda::complex<double>(0.,15./(4.*sqrt(pi))));
   imNj1j2hdict[2][2][3] = pycuda::imag(pycuda::complex<double>(15./(16.*sqrt(pi)),0.));
   imNj1j2hdict[2][2][4] = pycuda::imag(pycuda::complex<double>(0.,15./(16.*sqrt(pi))));

 }


// ##########################################
// Normalisation weights
 
__device__ int indexdictcpp[4050] = {0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,
3,-1,-1,-1,-1,-1,-1,-1,-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,8,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,
11,-1,-1,-1,-1,-1,-1,-1,-1,12,13,-1,-1,-1,-1,-1,-1,-1,-1,14,15,-1,-1,-1,-1,-1,-1,-1,-1,16,17,-1,-1,-1,-1,-1,-1,-1,-1,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,-1,-1,-1,-1,-1,-1,-1,-1,22,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,24,
25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,26,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,
29,-1,-1,-1,-1,-1,-1,-1,-1,30,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,-1,-1,-1,-1,-1,-1,-1,-1,34,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,36,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,38,39,-1,-1,-1,-1,-1,-1,-1,-1,40,
41,-1,-1,-1,-1,-1,-1,-1,-1,42,43,-1,-1,-1,-1,-1,-1,-1,-1,44,45,-1,-1,-1,-1,-1,-1,-1,-1,46,47,48,49,-1,-1,-1,-1,-1,-1,50,51,-1,-1,-1,-1,-1,-1,-1,-1,52,
53,-1,-1,-1,-1,-1,-1,-1,-1,54,55,-1,-1,-1,-1,-1,-1,-1,-1,56,57,-1,-1,-1,-1,-1,-1,-1,-1,58,59,-1,-1,-1,-1,-1,-1,-1,-1,60,61,-1,-1,-1,-1,-1,-1,-1,-1,62,
63,-1,-1,-1,-1,-1,-1,-1,-1,64,65,-1,-1,-1,-1,-1,-1,-1,-1,66,67,68,69,70,71,-1,-1,-1,-1,72,73,74,75,-1,-1,-1,-1,-1,-1,76,77,-1,-1,-1,-1,-1,-1,-1,-1,78,
79,80,81,-1,-1,-1,-1,-1,-1,82,83,84,85,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,86,
87,-1,-1,-1,-1,-1,-1,-1,-1,88,89,-1,-1,-1,-1,-1,-1,-1,-1,90,91,-1,-1,-1,-1,-1,-1,-1,-1,92,93,-1,-1,-1,-1,-1,-1,-1,-1,94,95,-1,-1,-1,-1,-1,-1,-1,-1,96,
97,-1,-1,-1,-1,-1,-1,-1,-1,98,99,-1,-1,-1,-1,-1,-1,-1,-1,100,101,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,102,103,-1,-1,-1,-1,-1,-1,-1,-1,104,
105,-1,-1,-1,-1,-1,-1,-1,-1,106,107,-1,-1,-1,-1,-1,-1,-1,-1,108,109,-1,-1,-1,-1,-1,-1,-1,-1,110,111,112,113,-1,-1,-1,-1,-1,-1,114,115,116,117,-1,-1,-1,-1,-1,-1,118,
119,-1,-1,-1,-1,-1,-1,-1,-1,120,121,122,123,-1,-1,-1,-1,-1,-1,124,125,-1,-1,-1,-1,-1,-1,-1,-1,126,127,-1,-1,-1,-1,-1,-1,-1,-1,128,129,-1,-1,-1,-1,-1,-1,-1,-1,130,
131,-1,-1,-1,-1,-1,-1,-1,-1,132,133,-1,-1,-1,-1,-1,-1,-1,-1,134,135,136,137,138,139,-1,-1,-1,-1,140,141,142,143,144,145,-1,-1,-1,-1,146,147,-1,-1,-1,-1,-1,-1,-1,-1,148,
149,150,151,152,153,-1,-1,-1,-1,154,155,156,157,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,158,
159,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,160,161,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,162,163,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,164,
165,-1,-1,-1,-1,-1,-1,-1,-1,166,167,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,168,169,-1,-1,-1,-1,-1,-1,-1,-1,170,171,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,172,173,-1,-1,-1,-1,-1,-1,-1,-1,174,175,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,176,177,-1,-1,-1,-1,-1,-1,-1,-1,178,
179,-1,-1,-1,-1,-1,-1,-1,-1,180,181,-1,-1,-1,-1,-1,-1,-1,-1,182,183,-1,-1,-1,-1,-1,-1,-1,-1,184,185,186,187,-1,-1,-1,-1,-1,-1,188,189,-1,-1,-1,-1,-1,-1,-1,-1,190,
191,-1,-1,-1,-1,-1,-1,-1,-1,192,193,194,195,-1,-1,-1,-1,-1,-1,196,197,-1,-1,-1,-1,-1,-1,-1,-1,198,199,-1,-1,-1,-1,-1,-1,-1,-1,200,201,-1,-1,-1,-1,-1,-1,-1,-1,202,
203,-1,-1,-1,-1,-1,-1,-1,-1,204,205,-1,-1,-1,-1,-1,-1,-1,-1,206,207,208,209,210,211,-1,-1,-1,-1,212,213,214,215,-1,-1,-1,-1,-1,-1,216,217,-1,-1,-1,-1,-1,-1,-1,-1,218,
219,220,221,222,223,-1,-1,-1,-1,224,225,226,227,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,228,
229,-1,-1,-1,-1,-1,-1,-1,-1,230,231,-1,-1,-1,-1,-1,-1,-1,-1,232,233,-1,-1,-1,-1,-1,-1,-1,-1,234,235,-1,-1,-1,-1,-1,-1,-1,-1,236,237,-1,-1,-1,-1,-1,-1,-1,-1,238,
239,-1,-1,-1,-1,-1,-1,-1,-1,240,241,-1,-1,-1,-1,-1,-1,-1,-1,242,243,-1,-1,-1,-1,-1,-1,-1,-1,244,245,-1,-1,-1,-1,-1,-1,-1,-1,246,247,-1,-1,-1,-1,-1,-1,-1,-1,248,
249,-1,-1,-1,-1,-1,-1,-1,-1,250,251,-1,-1,-1,-1,-1,-1,-1,-1,252,253,-1,-1,-1,-1,-1,-1,-1,-1,254,255,256,257,-1,-1,-1,-1,-1,-1,258,259,260,261,-1,-1,-1,-1,-1,-1,262,
263,-1,-1,-1,-1,-1,-1,-1,-1,264,265,266,267,-1,-1,-1,-1,-1,-1,268,269,270,271,-1,-1,-1,-1,-1,-1,272,273,-1,-1,-1,-1,-1,-1,-1,-1,274,275,-1,-1,-1,-1,-1,-1,-1,-1,276,
277,-1,-1,-1,-1,-1,-1,-1,-1,278,279,-1,-1,-1,-1,-1,-1,-1,-1,280,281,282,283,284,285,-1,-1,-1,-1,286,287,288,289,290,291,-1,-1,-1,-1,292,293,-1,-1,-1,-1,-1,-1,-1,-1,294,
295,296,297,298,299,-1,-1,-1,-1,300,301,302,303,304,305,-1,-1,-1,-1,306,307,-1,-1,-1,-1,-1,-1,-1,-1,308,309,-1,-1,-1,-1,-1,-1,-1,-1,310,311,-1,-1,-1,-1,-1,-1,-1,-1,312,
313,-1,-1,-1,-1,-1,-1,-1,-1,314,315,316,317,318,319,-1,-1,-1,-1,320,321,322,323,324,325,-1,-1,-1,-1,326,327,-1,-1,-1,-1,-1,-1,-1,-1,328,329,330,331,332,333,-1,-1,-1,-1,334,
335,336,337,338,339,340,341,-1,-1,342,343,-1,-1,-1,-1,-1,-1,-1,-1,344,345,-1,-1,-1,-1,-1,-1,-1,-1,346,347,-1,-1,-1,-1,-1,-1,-1,-1,348,349,-1,-1,-1,-1,-1,-1,-1,-1,350,
351,352,353,354,355,-1,-1,-1,-1,356,357,358,359,360,361,-1,-1,-1,-1,362,363,-1,-1,-1,-1,-1,-1,-1,-1,364,365,366,367,368,369,-1,-1,-1,-1,370,371,372,373,374,375,376,377,378,379};
 
__device__ int redindexcpp(int j1, int j2, int h, int j1p, int j2p, int hp, int part) {
   return indexdictcpp[part+2*hp+10*j2p+30*j1p+90*h+450*j2+1350*j1];
 }
 
__device__ double nw_comp_matrix[][2][2][380] = {{{{1.0,0.0,0.221124339311,0.0199313389265,0.822489563858,0.0,-0.0504321699775,-0.00210808149935,-0.0651639368285,-0.00286865345929,-0.193956542132,0.0206955387911,0.138880030419,-0.0708096171369,0.943563312994,0.0,0.0382144673305,-0.0135426920346,-0.0181654084745,0.00572968517643,
0.0241268888863,-0.00447384647121,-0.0372472724339,0.00483403529492,-0.173049009638,-0.0357600993032,0.849346066905,0.0,-0.0244367311061,-0.01244080048,-0.164032367712,-0.0241999746432,0.167450050642,0.00169566163508,0.688506850391,0.0,-0.0112362540355,-0.0139358695881,0.0166781644982,-0.0159035466084,
0.0265678494477,-0.0113464283164,-0.0118315817061,0.00758667160319,-0.0223198809932,-0.0254444596761,-0.0159930586363,0.0,1.220663942,0.0,0.0167595203989,0.0262750274623,-0.00559738531476,0.019973713321,-0.00588123456412,-0.00751885865595,0.00709820371322,-0.0103068430322,0.00206935431656,0.0106356688291,
0.031545632202,0.00872056566829,0.00732209392063,-0.00509364248386,0.0196135747059,-0.00775008516107,0.0,-0.0254711321238,0.0,0.0544960966764,1.20012765022,0.0,-0.00337741735201,0.00214524784797,-0.0160539118684,0.0195467466215,-0.0152452231234,-0.00199130864338,-0.0232198959428,0.00611125325133,
-0.0140185934284,-0.0124021352689,0.000185124387129,-0.00220277670328,-0.0139138948645,-0.00930463963174,0.0414092433326,0.0052350019429,-0.0198987877956,0.0044299561704,-0.116685682122,-0.0410798360494,-0.218885987291,0.0283145085237,0.0982287527565,-0.0472832115559,0.748268388923,0.0,0.00563084328363,0.00749537758468,
-0.0153193979146,-0.000249937801923,0.0351840833952,-0.0113321455417,-0.000955714750712,0.00492369695339,-0.0500158356571,0.00196988067598,-0.0242834737205,0.00470281729161,-0.00675788086999,0.00373930411049,0.131515691161,-0.088221266288,0.0622178011762,0.0,1.04771928221,0.0,-0.00559835240269,-0.00365130367181,
0.0116389392097,-0.00468727491617,-0.0450711567235,0.00786743815771,0.0216556140762,0.00991703562565,-0.022094241516,-0.0049297487855,0.00447303420144,0.00322434318705,-0.0386430072762,0.00552612799443,0.00316669242069,-0.00762599703894,-0.0178062937019,-0.00851613417173,0.0160539118684,0.0195467466215,0.137350186327,-0.106918651709,
0.0,-0.0181668674593,0.0,0.119528597582,1.09104424542,0.0,-0.00872913153479,0.0128698624528,0.00915642050541,0.0133273201237,0.000970695187128,0.00763624214854,-0.0195650466505,0.00726332436465,0.0121844177635,0.0153201640552,-0.0186511601682,-0.000913623198327,-0.253035072091,0.0249788006387,
-0.0937425225975,0.0386734722141,0.775271161956,0.0,-0.060776844699,0.0129760989098,-0.209683064823,0.0254093368198,-0.0313842279496,0.0125030818218,-0.0903960457132,0.0474823953211,0.188730703223,0.029214587648,0.715169838905,0.0,0.000728075966737,0.0572619028096,0.0408118311744,-0.00840855031023,
0.0030615302107,-0.0295059503491,0.00985710233761,-0.0118194620398,0.0163624899023,0.0144897924884,-0.144195588717,0.0751007904379,-0.00535171384681,0.00788551634369,-0.0399307574976,0.00851554887556,0.00372608132066,0.0,0.96368823819,0.0,0.0206652064513,-0.0113406581579,0.00277763652626,0.0108996753673,
0.00509700407157,0.0154810327718,-0.00808639064771,0.00581577497808,-0.00600855395689,0.017927547735,-0.0184476905962,0.0109157107734,0.0140185934284,-0.0124021352689,-0.120568841393,0.056329194258,-0.00628354771703,-0.00738554405387,-0.000970695187128,0.00763624214854,-0.0103963750436,-0.0310070372338,0.0,0.00978817814356,
0.0,0.0408015311871,0.959089259523,0.0,0.00203083518329,0.0283025285678,-0.0044109226125,0.00209582881253,0.0235679080422,-0.00310362890207,-0.039939720916,0.0132437689299,-0.246301701898,0.0217858684085,0.00420024415344,-0.00678757082676,-0.0091808539864,0.0101339888443,-0.0787285439127,0.0401980568599,
-0.0786022736353,0.00779409973525,0.115667705039,-0.0433846000196,0.668103942574,0.0,0.04301573357,-0.0133347662428,0.00295055084441,-0.0302395164793,0.0546347212575,-0.00432722808096,0.0270425352979,0.00333403834476,0.00101343811059,-0.00508479921962,-0.000750593314542,0.0301257031281,-0.0209193577171,-0.00430123329405,
-0.130874882392,0.0425672853194,-0.0246120820082,0.00237785286719,-0.0123345915708,0.0193269505549,0.0787516001376,-0.0345548878479,-0.0206713050798,0.0,0.660686646563,0.0,0.0208421290001,0.0573930960144,0.0139992891005,0.00886881183913,0.000425529288938,-0.021183965539,0.0192889781912,0.00739720061413,
0.0106145010828,0.00345315714561,0.0139138948645,-0.00930463963174,0.000282804994443,0.0101416553337,0.00379306190102,0.0301204187748,0.0186511601682,-0.000913623198327,-0.0652685130656,0.0694374637184,0.000716216439388,-0.00256445257551,-0.00760193598588,0.00520572785594,0.0044109226125,0.00209582881253,0.11077768301,-0.0689266556715,
0.0,0.00372544169976,0.0,0.0319961914063,0.794132683384,0.0,-0.0247710391869,0.0136927328406,-0.00743459737833,0.0215708048807,-0.00501867424452,-0.000491490136137,-0.0145148113761,-0.0115424661205,-0.000365361475975,0.00706542785547,0.02259517054,0.00462932868881,0.00248689060533,0.0100058158105,
-0.00299503817971,0.0157999815086,0.0843769294072,-0.011397076481,0.00704286624337,-0.0121417539693,0.0316266421443,-0.00713354667886,0.00251915136079,-0.0141096133803,0.0133389495816,-0.0451875203848,0.0126073332894,0.0193623639072,0.0181551765974,0.0,0.0196018684303,0.0,0.0,0.0694920840359,
1.37154396534,0.0,0.00498839972138,0.0186191514243,0.0237451999438,0.0121064078435,0.00182878254609,0.0162668172019,0.0199595221302,-0.00064016564571,0.00983860941138,-0.0065793737801,-0.00593814891801,0.00191342790903,0.0128809416469,0.0265783644343,-0.0186538251139,-0.00723972871285,-0.0177588799153,-0.0209576265016,
-0.0261401257276,0.0184853958324,-0.0110321395994,-0.00229432213524,-0.0340791430501,-0.0178842306744,-0.00451879589788,0.00484654716134,0.00191786796231,-0.0753455594436,0.0,-0.0118890743398,0.0,0.0886152629439,0.0607103676191,0.0,0.0,0.102394481562,1.20687114121,0.0},
{1.0,0.0,0.158814898728,0.0435555278425,0.878060328433,0.0,-0.0121546388588,0.0256976472932,-0.0322463902476,-0.024856368215,-0.150767000208,0.0110818963713,0.139851100001,-0.0902020547554,0.82272064739,0.0,0.0200775798086,0.0287878349332,-0.0197120565185,-0.00011698706597,
0.0421508082757,0.00280687092494,-0.0496964656442,0.0266057438239,-0.143099002658,-0.00439289509362,0.846587997887,0.0,-0.0129041774831,0.00173795045781,-0.117624354823,-0.0200642649369,0.11862708912,0.0110681150417,0.77656216612,0.0,-0.00732451215952,-0.00112564460519,-0.011217873643,-0.0341306206516,
0.0224116153362,-0.00421686050309,0.00903776402918,-0.00180726559132,0.0147745528722,-0.00641325095762,-0.0317512096482,0.0,1.24399858927,0.0,-0.0184283783138,-0.00571710503157,-0.00251480842144,0.0279362843996,-0.00477253217009,-0.00212735277851,-0.00671305162444,-0.00655650816832,-0.0166340676314,0.00289925999046,
0.0098974692434,0.00722634086078,0.00232377496947,0.00872203046183,0.0112239031074,-0.0199765703098,0.0,0.0104465966588,0.0,-0.0569979491431,1.08292222476,0.0,0.0102671504033,0.00376497027116,0.0283891283105,-0.0137030871321,0.00162244701179,-0.00495907303544,0.000487436685423,-0.0125165397875,
0.012425562014,-0.0115679716816,-0.00369719720768,-0.00531064256965,-0.0218182722207,-0.0158426953956,0.0123860957158,-0.0273543203205,-0.0105128373968,-5.25358658902e-05,-0.115868713174,0.025903674267,-0.116534987718,0.00980638279732,0.0973616558368,-0.0571522050422,0.660802246696,0.0,0.0063137086147,-0.0224375235845,
-0.0168451153695,0.00903180280985,-0.00490284649547,-0.0411454034351,-0.00552342833581,0.050724930081,-0.00457214845845,-0.00496963390417,0.00075733278957,-0.00305268641286,-0.00868004157036,0.00193746514509,0.0894177715477,-0.0586750812135,-0.0153432122416,0.0,1.17987081632,0.0,-0.0168333902691,0.00341778016401,
0.00204196787475,-0.0301572838373,0.00153428928583,-0.0304426331442,-0.00540842956902,0.000627676132389,0.0479252924339,0.0278682676036,0.00556932580848,-0.0221293234704,0.0316511162123,0.00232616718696,-0.00529798081987,-0.0285547014749,-0.0324729212144,-0.0155281528319,-0.0283891283105,-0.0137030871321,0.0921877298038,-0.0851151305757,
0.0,-0.0229066560365,0.0,-0.029182872764,1.18937981758,0.0,-0.0364096510477,-0.0118600579829,0.00232386208847,0.0163555655767,0.0138005752176,0.0239668365522,-0.00415121024305,-0.0142827094599,-0.012291694582,-0.0155568771071,-0.054287864888,0.0233817371816,-0.152072026295,0.0119410441554,
-0.10334037695,0.0389929045205,0.73072210955,0.0,-0.0357439929422,-0.0191238848309,-0.150248743399,0.0128906622984,-0.00993023838651,0.00552141645154,-0.0889658112356,0.0392277021016,0.129548184763,0.042510876418,0.691224558943,0.0,-0.0204381702381,0.0276882437668,-0.001146921141,-0.00144288310181,
-0.0290216922371,-0.0475250770166,-0.0233910987245,-0.0068474917191,0.0138185118152,-0.0263283694582,-0.0787076030459,0.0579181132292,0.0234533851985,-0.0116374432785,0.0200580726728,0.0246555163602,-0.0175636531095,0.0,1.05405240562,0.0,-0.00348146925767,-0.0414499482226,0.0363114947776,-0.0451276376053,
0.00212351881199,0.00736509883071,-0.00535620005615,0.00827874881874,0.000591758221571,-0.016150482671,-0.00467376356389,-0.0103124906589,-0.012425562014,-0.0115679716816,-0.0466568172253,-0.0212884397001,-0.00923883223912,0.0175989456266,-0.0138005752176,0.0239668365522,0.0174150671253,0.0201715301361,0.0,-0.0299371097076,
0.0,0.0177476683668,0.88540745358,0.0,-0.0156172059181,-0.013155861384,-0.0228263307031,0.0266403134636,0.0409490618432,-0.00866881971263,-0.042968328559,0.0361573682868,-0.155691316683,0.0125883683935,0.0109632934336,0.022982962535,-0.00341113235003,0.0106652375564,-0.0582040037128,0.00908983898434,
-0.106278383382,0.013349199467,0.131036766725,-0.0807960693774,0.573347212288,0.0,0.000182744887731,-0.00259001269522,-0.0410025027828,0.027016538115,-0.0119930059129,-0.000658911934461,-0.0176928075187,0.0319710984992,-0.00103663790339,6.04648292844e-05,-0.00140640641686,0.00950060053156,-0.0109620026315,0.0052569785958,
-0.0722052200327,0.0481569829505,0.0401514787636,-0.00770575381162,0.0176920544071,-0.00625368290999,0.0877276688336,-0.059982142898,-0.0248483851076,0.0,0.969397306637,0.0,-0.00895812715715,-0.0383721017773,-0.0694882198206,-0.0229910937886,-0.011487060143,-0.041190570223,-0.00770893782895,0.0029202493523,
0.00463150738913,0.00399307466282,0.0218182722207,-0.0158426953956,-0.000358224353459,0.0127857916512,-0.0367304055569,-0.0206934842835,0.054287864888,0.0233817371816,-0.0933257516554,0.00406759889558,-0.00110701517725,-0.00365093064578,-0.00374375122373,-0.000308899721702,0.0228263307031,0.0266403134636,0.0778527137629,-0.0581574858355,
0.0,0.0216615861747,0.0,-0.0953465112509,0.991533635811,0.0,0.0318185810561,0.00343250651511,0.00395441467717,0.00868048425321,-0.0355696360455,0.00168408062294,-0.000697580982888,0.0304092837908,-0.000370588322475,-0.00116149045909,-0.0121753025186,0.00940917666788,0.00626324975409,0.00679118301658,
0.00843254808301,-0.02604501555,0.0246812959906,-0.000856640144247,-0.0320635199512,0.0251000741896,0.0408913941602,-0.0100848561082,-0.00463819760651,-0.00769018509512,0.00589397731785,-0.05746363508,-0.0343739453563,-0.0476681302179,-0.0459585035215,0.0,0.0319981752948,0.0,0.0,-0.0753060738928,
0.97254929329,0.0,-0.0245473440685,-0.0913719741422,-0.0129774716486,-0.00860777049813,0.0148200977638,0.125930028272,0.0078431229371,-0.00570838466983,0.015427848241,-0.0112024773465,-0.0103452303989,0.0122943111892,0.010559310601,0.0358316929381,0.0102157314148,0.0069014473056,-0.0284294194417,0.0235406058695,
-0.00325984372094,0.036270528052,0.00845354683193,0.0524591348848,0.0349265624723,0.0244683365993,-0.0301607096012,-0.00477360975023,-0.0238393848327,0.0118811694438,0.0,-0.110034670208,0.0,0.0241682412781,-0.0418579055333,0.0,0.0,0.13178286791,1.42820093739,0.0}},
{{1.0,0.0,0.149750372622,0.0395088893136,0.865055762257,0.0,-0.0191934704685,0.00324266419128,-0.0391537641043,-0.00877078688201,-0.172248997845,0.0101577906603,0.0208290334002,-0.0170629168585,0.768954304202,0.0,0.0180859772238,-0.0126902540585,-0.000562194033242,0.00233972541867,
0.0300962717797,0.000133580744946,-0.00545278588126,0.00331689452148,-0.126691570843,-0.0504503579939,0.822096669936,0.0,-0.013478744826,-0.0093844397015,-0.126036091059,-0.043942499462,0.118727893023,0.0190371337473,0.743234274312,0.0,-0.00408854459149,-0.000202424139107,0.00663865935563,-0.00564389111523,
0.0224299726938,-0.00300008078345,-0.00199218779707,0.00243350841882,-0.00506230946959,-0.00438334846802,-0.0107108344967,0.0,1.36102597068,0.0,0.00322347542736,-0.00323539129463,-0.00149992528189,0.00274672588503,-0.0135573917801,-0.00213354391323,-0.000697210917433,-1.28819738018e-05,0.00423110129102,0.00244351131601,
0.0212320030321,0.00315610056137,-0.000856121321983,-0.000622099979906,0.019631869817,-0.00529500776691,0.0,-0.0269643755593,0.0,0.0491742401896,1.33390518132,0.0,-0.00131647310496,0.00116490963467,0.000853482494973,-0.00263208518243,-0.00140522372045,-0.00345237046173,-0.000550137930108,-0.00314003386133,
-0.00549454049368,0.0012507972594,-0.000282395457484,0.000322521596868,1.02897069781e-05,0.000336120871972,0.0203994784927,0.0097698596786,-0.00297262980234,0.000929498703794,-0.126931399263,-0.0408058916458,-0.149733813769,0.00845160347339,0.00911414437499,-0.0107217446389,0.632842377987,0.0,0.00266811724963,0.00146778657827,
-0.000369718692878,-0.000816229069082,0.0109017796983,-0.00553640196279,0.000369043564246,0.00480047418871,0.00446614030315,0.00424977756074,-0.0188183736984,0.000358987171232,0.00425833416348,-0.00191837153619,0.0270899238218,-0.0145033250773,0.0260316115497,0.0,1.01995620097,0.0,-0.00153733257906,-0.00140049761627,
6.25428371098e-05,-0.000343580334783,-0.000518622054554,-0.000808966559366,-0.000353259000581,0.000255015972612,-0.00130096946919,-0.00338109380439,-0.00121871513447,-0.000225978344254,-0.00417072625207,-0.00758370033202,-0.0114888275629,-0.00421012000761,-0.00586042955482,0.000558398545213,-0.000853482494973,-0.00263208518243,0.0269162846215,-0.0151033454658,
0.0,-0.0212888930049,0.0,0.0452402731062,1.01125665573,0.0,-0.000784786387136,-0.000653018795617,0.00038690983079,9.45287219925e-06,-2.08504825977e-05,0.000359537199978,-0.000614903926734,-0.000386944187982,-0.000971636576552,0.00159496368484,0.000985286367877,0.00112139929557,-0.175888640158,0.00996384889594,
-0.0184863848922,0.0134572242609,0.74929408673,0.0,-0.043563465868,-0.00642964448868,-0.180382692561,-0.0048092671362,-0.00120017002836,0.00210635295258,-0.0209807577092,0.0147746971508,0.122498810684,0.0263169911555,0.651603603486,0.0,-0.000382108104233,-0.0136580122913,-0.00877093531949,0.0119187671626,
0.00114922180638,0.00308529920611,0.000246902710738,0.00323839681696,0.00402811643861,-0.00236034902928,-0.0191004996106,0.00952725524678,8.06406643953e-05,-0.00106023698657,-0.00805012635939,-0.000441277552512,-0.00380431496535,0.0,0.948336570994,0.0,-0.00200313253949,0.000589184731909,0.0114696401678,-0.00881127180958,
0.0158446555675,-0.011728145233,0.00110971727595,-0.00059455634133,7.94073424209e-05,0.000781945254035,-0.00615002867182,-0.00258241432573,0.00549454049368,0.0012507972594,-0.0261068533831,0.0192584280141,0.000801137163926,-0.000544122508324,2.08504825977e-05,0.000359537199978,-0.0106314744414,0.0124163985451,0.0,0.0146507925564,
0.0,0.0421814220224,0.904279189575,0.0,-0.000542087660011,-0.00312402784041,0.00146868430108,-0.00290847772251,0.0301014673016,-0.00449292655692,-0.0042124606204,0.00467368387696,-0.117535789418,0.00249425736705,0.00156837407646,-0.0015435478501,-0.000436069327336,4.41607178979e-05,-0.0188423397646,0.0171788848165,
-0.125072303219,0.0124386096844,0.0193821785666,-0.0102478219574,0.57870365458,0.0,0.00921042260286,0.0013565517529,0.00106910862097,0.000312114400349,0.0145151216394,0.00268558822142,0.000989580234292,0.000730730782862,-0.000379945939249,0.00042520263236,-0.000312451811435,0.00102246849274,-0.00620977519381,-0.00123523851666,
-0.0183277983315,0.0116213687738,0.0106686274307,0.00153970966438,0.0020418126631,-0.00458817751955,0.0164358242082,-0.0115602843419,0.00265630312787,0.0,0.780591833026,0.0,-0.000782972809596,-0.00432846331669,-0.000117590393703,-0.00152073106332,6.19333396892e-05,0.0061607124901,-0.00251755100755,-0.000961006940583,
-6.42534907106e-05,0.000652142035781,-1.02897069781e-05,0.000336120871972,-0.000544419404759,0.000209344981739,0.00200089731052,-0.00170154644676,-0.000985286367877,0.00112139929557,-0.0107562030532,0.00623815823398,-0.000684367449547,-0.0060298214327,0.0018805695272,0.000721192368546,-0.00146868430108,-0.00290847772251,0.0228451124621,-0.00775975522368,
0.0,-0.0258837895905,0.0,-0.0179129432917,0.791256619002,0.0,-0.00159297881775,-0.00115746763548,-0.0031268095082,-0.000752747671851,-0.00312013985797,-0.000760056933747,-0.00129912792461,0.00156785375929,8.20129291272e-05,0.000287482574286,-0.00121162173142,5.61852462473e-05,0.000493875528364,0.000115250718928,
0.00239776634414,-0.000992517691481,0.00223063814343,0.00201593539803,-0.00295073207811,-0.00202577941304,-0.000720457893283,0.00344884619437,0.0048842629632,-7.3591870036e-05,0.00174251813309,0.00134641095645,0.00342012836951,-0.00165699352723,0.00202395938596,0.0,0.00724423229354,0.0,0.0,-0.00416713074187,
1.2011785278,0.0,-0.0052387329322,0.00361378976614,0.000358138716818,-0.00197597865662,-0.00117804207363,-0.0107383159444,-0.000381102535159,-0.000457344606298,-7.27592158062e-06,0.00023767334787,0.00051632385097,7.29474395261e-05,-0.00020204150432,0.00025338071753,5.16232563981e-05,0.00143460808345,-0.0029665989185,0.00309364284321,
0.00476325208757,-0.00418104977858,0.00534043473757,-0.0130601141581,-0.00118458109011,0.00325051057711,-0.000332693603654,0.000392702631714,-0.00727675901507,0.00982123507576,0.0,0.0218556661172,0.0,-0.0297859296793,0.0106060523509,0.0,0.0,0.0240873329573,1.22305434577,0.0},
{1.0,0.0,0.117223571369,0.0490302512222,0.889299008739,0.0,-0.00941056551005,0.00156344934861,-0.00274834965895,-0.0214413017558,-0.0989951100788,0.00541748706521,0.0264759832566,-0.0173454767327,0.832469643183,0.0,0.0143863894997,0.00522541832283,0.00256119735885,0.00293927112468,
0.00223060809477,-0.00157340460172,-0.00484228163124,0.00376199969999,-0.10965471857,-0.0431069469816,0.915645488335,0.0,-0.00250216424382,-0.00749144864384,-0.0819098179894,-0.0346022340166,0.100027567618,0.0454947673468,0.797622495183,0.0,-0.00227932763221,-0.00159990432848,-0.0067247926259,-0.0101966578249,
0.017194176563,0.00921073851706,-0.00186179536168,-0.000481771425995,0.00803248388569,0.000468123145947,-0.0261972325537,0.0,1.25565452902,0.0,-0.000295802116636,-0.00404028324022,0.00623476636924,-0.0009498281337,-0.000296008659219,-0.00198101354667,-0.000393917009255,-0.000562804322805,-0.00645958960192,0.00977399153816,
0.00861511626629,0.00591882939842,-0.00115795281624,-0.00148410911437,0.00122190348455,0.0012839417728,0.0,0.00788570034713,0.0,-0.0515717131627,1.12100266437,0.0,0.00611992948045,-0.012500445352,-0.000518012296329,0.00294597227374,0.00221778856483,-0.00225615522113,-0.00536246189584,-0.00345871044555,
-0.0050470154108,-0.0027259035057,-0.000683418201163,-0.000116259936365,0.000540656742019,-0.000824725608823,0.0212736892539,0.00383385206144,0.000470015730516,0.00447677295099,-0.106254877862,-0.0231527536428,-0.146311687683,-0.00949101703853,0.0233559855678,-0.0212164066818,0.884157191886,0.0,0.00440233467023,0.00123269203251,
-0.00132945974595,-0.000518149451977,-0.00313443088549,-0.00106450103361,-0.000751138562201,0.000670396266065,0.00260404543294,-0.00557780498782,0.0309997739209,-0.000695691741459,-0.00250384338106,-0.00389293465593,0.00847732731772,-0.0055333938637,0.0144995652985,0.0,1.05216588383,0.0,-0.00213056546123,-0.00274816498798,
-0.000638135052591,0.000105449253065,0.000460950455615,-0.000643823474834,-0.00228162541335,0.00435415198752,-0.00646655986546,0.0072912222244,0.00252826059529,-0.00202065602027,0.00231408258996,0.00484545652504,-0.00454294967226,0.0257422093943,-0.00279729340398,-0.000676193401275,0.000518012296329,0.00294597227374,0.0130449926122,-0.012943487502,
0.0,-0.00789398474397,0.0,-0.0622438861402,0.938416967244,0.0,0.000414610497747,-0.00326285540872,3.66851705143e-05,-5.78796990409e-05,-0.00035298325324,0.000135290698326,0.000945194705741,-0.000847193251241,0.00358171821569,0.00057176277496,0.00038774212967,0.00123290534606,-0.084279396868,0.0072784318691,
-0.0221508776785,0.0159024794089,0.849193708034,0.0,-0.00907430825446,-0.0164177019835,-0.09132913636,0.0086782904357,-0.00404533750892,-0.00165921790462,-0.011770703222,0.0193959470986,0.126279409319,0.0479823591029,0.80499219835,0.0,0.000401669966491,0.00696455316629,-0.00768043872936,0.00382748538609,
0.00183103198885,0.00148820597987,0.000213224753427,-0.00111542884221,-0.0022356749736,-0.00674313062128,-0.0132843966909,0.000682205628843,-0.00115465013064,-0.000838409708092,0.0184204583261,-0.00566398482578,0.0910895987044,0.0,0.90140073604,0.0,-0.0018649205768,0.004695360167,0.0143911757788,0.000258479279591,
0.00390373281031,-0.0346666129273,0.00182933529213,0.000616907560675,-0.00216504402158,-0.00386284753506,0.00120176210543,0.00457178155516,0.0050470154108,-0.0027259035057,-0.0110934869614,0.00366599524183,-7.25743474928e-05,0.0012141522316,0.00035298325324,0.000135290698326,0.00420493418829,0.00423395281419,0.0,-0.0290531793318,
0.0,-0.00952519979744,0.871015953759,0.0,0.00133372921719,-5.68719399502e-05,0.00103417770932,0.00019111577411,0.00423952116864,0.00282782532596,-0.0019300118045,0.00635427861839,-0.0874339681693,0.0107076347279,0.00350824871951,-0.00458525263894,-5.9778917008e-05,3.94847764527e-05,-0.0158707652799,0.0120422028808,
-0.0819305751493,0.0127443497886,0.021678171317,-0.00642670689537,0.751482215081,0.0,0.0114816510343,-0.00346122008222,0.000482132119933,-0.000862490205853,0.020628812582,0.00295975362545,-0.00172338628444,-0.000813997320024,-0.000434676908037,-0.000519779970184,1.28629930047e-05,-8.39457428431e-06,-0.00427193539269,-0.00157926370904,
-0.0226158812273,0.0101611135686,0.0247890624248,-0.00140721257948,-0.0035466197032,0.000320836858194,0.0152227908006,-0.00646923600333,0.00135180718929,0.0,0.877403334842,0.0,-0.00126242773944,0.00808570540135,0.00209456118182,-0.000373249585215,0.00543964522782,0.0182108953911,0.00150930880733,-0.00136804291496,
0.000755170348016,0.000604125841111,-0.000540656742019,-0.000824725608823,6.44966827987e-05,2.98258254989e-05,-0.00240692192769,0.000583775826344,-0.00038774212967,0.00123290534606,-0.0233142702913,0.0148559362,0.000723761477746,0.00550805943902,0.00272580309693,0.000564521645571,-0.00103417770932,0.00019111577411,0.0177930441552,-0.00549615674294,
0.0,-0.0236701288111,0.0,-0.0243803688271,0.950486713704,0.0,0.0174256736168,-0.00651329710088,-0.000749081075796,0.00144637913285,-0.0299366719977,0.00236584508506,-0.00177134256072,0.000319709593364,-1.82552660955e-05,-1.35129519332e-05,-0.000330026637556,0.00159898551204,0.000421520475664,0.000103427057651,
0.00281244876303,-0.00206555059454,-0.000353382169985,-0.00583270747526,0.0001030859112,0.000132597390724,-0.0298413272395,0.0076198806352,-0.000181197227149,-0.00143810489754,-0.00456467283259,-0.00316203837927,0.00477666867861,0.000634558692717,0.041974770907,0.0,0.0034414791103,0.0,0.0,0.00231702933576,
1.15979236593,0.0,4.11772431461e-05,-0.0113561676693,0.00113239501555,0.000584613325085,0.00236947610257,0.0148855887502,0.00223034404386,0.00140894393878,-0.000382302048576,-0.000583169070617,0.00107908441287,0.000214164707612,-0.000748635460968,-0.000116343230404,-0.00343573386186,-0.00374125855255,0.00375199236371,0.00247986153303,
0.00173419133036,-0.00295022959407,0.0038123319739,0.0168310552026,-0.00313633205528,-0.00207614445518,-0.000526797396137,-0.00648560524236,0.00126357148437,0.00271411255913,0.0,-0.0287893031164,0.0,-0.0146015354186,0.00245530653217,0.0,0.0,-0.0354242376837,1.07512694064,0.0}}},
{{{1.0,0.0,0.1894855954,0.012598975014,0.818702491485,0.0,-0.03860825151,-0.000209969403967,-0.0408096229395,-0.000460638662434,-0.22594294219,0.0207000471601,0.115148764046,-0.0605088182689,0.805655782255,0.0,0.0369748538377,-0.00640786913039,-0.0249035804843,0.0110368263511,
0.07030123256,-0.00384574836752,-0.0291310990545,0.00599150611825,-0.194371533838,-0.00701776444727,0.844925701385,0.0,-0.0345286411203,-0.00305548906747,-0.158139424628,-0.0112520192338,0.157988954304,0.0159521871144,0.697066062892,0.0,-0.0258630748798,-0.00268822597874,-0.0184118853015,0.000654541697415,
0.00234303628661,0.0121101080987,0.00187146994298,0.0122589821803,0.00528866047178,0.00134525125822,0.00389699480009,0.0,1.21831827751,0.0,-0.00852445757958,-0.00235398981688,0.00560742248169,-0.000831913971977,-0.00125733614201,-0.00675932423693,0.00273316533896,-0.0111477507681,0.0102468819534,-0.0117189105903,
-0.00247299676947,-0.000463465155962,-0.00358029871469,-0.00377919963739,-0.0069294633297,0.0129995425087,0.0,-0.00686590992921,0.0,-9.63011147196e-05,1.2444335066,0.0,0.00903641639916,-0.0104251152748,-0.0123164895638,0.00983804555203,-0.000867242232291,-0.00125319897856,0.00859433227291,-0.00058309085256,
-0.00918059883032,0.00789732881356,0.000135139809434,0.00840922845866,-0.00485632387535,0.00851925206444,0.0396643906959,0.00229148591249,-0.0184872845027,0.00992903762343,-0.140602712495,-0.00548633711211,-0.167849385286,0.0132599333312,0.0977835058963,-0.0528644900539,0.66829642558,0.0,0.0317824770078,0.0159797308487,
-0.00511653521801,0.00288871403262,-0.00567706166106,0.012686809827,0.01610322439,0.0252412813001,-3.23362593971e-05,0.0149693238274,0.00579981199628,-0.000662443356785,-0.00481331359448,-0.00446667539285,0.132350689383,-0.068988062799,-0.0224498164646,0.0,1.12810870301,0.0,0.00370537339069,0.00207940277115,
-0.0118407434383,-0.00792694745121,-0.0259833246423,-0.00633152311623,-0.00147052905364,-0.00360317358515,-0.0224500767286,0.00879260435154,-0.0195429612431,0.0118209395853,-0.0164661925217,-0.00790812614922,-0.00586126122621,-0.0325984879793,0.00822411391997,0.000223444450977,0.0123164895638,0.00983804555203,0.12432089627,-0.0717043510978,
0.0,-0.00644602194185,0.0,0.0828879313764,1.08400269115,0.0,0.0288532279651,-0.00466618572155,0.0122176445056,-0.00997296247461,0.00386580584039,-0.00521404495049,-0.0217009709737,0.0042773800786,0.00827040900152,0.0123937458609,-0.00498476168145,0.0129846892897,-0.224604473265,0.0207295467265,
-0.123770070371,0.0424917409312,0.858220560186,0.0,-0.0387188899697,0.00553035905631,-0.17168586301,0.0162262895576,-0.0109858562154,0.00364680276389,-0.0930981481562,0.0388994469205,0.132371935005,-0.0112995513249,0.676308836472,0.0,-0.000128158152707,-0.000695919455865,-0.0234123897731,0.00282012536944,
-0.0253543886638,-0.0162158536338,-0.0108972715843,0.00861536680868,0.00259865720518,-0.00203949307845,-0.133032254572,0.0826825927602,0.00774215270571,-0.0133557283726,0.0181669825623,-0.00464649207174,0.00778202795747,0.0,1.00423778313,0.0,-0.00452374253511,0.0100826751316,0.011602656981,-0.012732296472,
-0.00170462802364,-0.0316193673981,0.000537661192711,0.00451334245214,-0.00815164418562,-0.00525769424897,-0.00636538270854,-0.000639049762717,0.00918059883032,0.00789732881356,-0.115434186715,0.0577908270712,0.00490475167084,0.000875914059493,-0.00386580584039,-0.00521404495049,-0.000136432943085,0.0101382557916,0.0,-0.00484356456927,
0.0,0.036894837281,0.934039808794,0.0,0.00072615225034,-0.00190275970357,-0.0201247338045,0.0132894176356,0.0693286135659,-0.0128006614396,-0.0269231160835,0.0126607645018,-0.155441580521,0.0108955093041,0.0268688239104,-0.0202942313845,-0.0151892484208,0.00531233034038,-0.0872990245126,0.0217014029379,
-0.227137155768,0.0227532798087,0.0978066305375,-0.0544565683184,0.663072605566,0.0,-0.063991131786,0.0154525815698,-0.0210199012944,0.0267526358057,-0.036704225856,0.00731431111886,0.00027672509898,-0.00833327858654,-0.006018546077,0.00472075462299,-0.00096946995586,0.015679817831,0.00147019440032,-0.00440328763312,
-0.0762059426786,0.0397897162082,0.00956565317313,-0.00343925674452,0.0111931416284,-0.00128344753336,0.110106077473,-0.0696839987743,-0.0216430116681,0.0,0.84857734578,0.0,-0.0104531416391,-0.0549317570496,-0.0114705942049,-0.00773598147957,0.00311560905051,0.0136237953642,-0.00495979178355,0.00905913396926,
-0.00410811198787,0.000717377324445,0.00485632387535,0.00851925206444,-0.00427384254437,0.00924145031181,0.00889578817257,0.00975352938806,0.00498476168145,0.0129846892897,-0.0959068978819,0.0310050025958,0.00336159003133,0.00575352562428,-0.000684116792252,0.0077429038614,0.0201247338045,0.0132894176356,0.0905048361862,-0.0338616949877,
0.0,-0.0178721770617,0.0,0.0509883232445,0.688695093695,0.0,0.0157956325278,0.000868571065785,0.0128684637834,-0.00607172674134,0.0181573101461,-0.00311503711743,-0.00809000408871,0.00137182523816,0.00116827213245,0.0022763066663,-0.006464382203,-0.00114651485463,-0.00222211532913,-0.00779278664115,
0.0136804681778,0.0065687974538,-0.0129320770021,0.00490713492121,0.0236535311041,0.013661443923,-0.00421368134831,-0.00361978393178,-0.0199113133504,-0.00373096698314,-0.00650427600253,-0.0038253854325,-0.0312779682553,-0.0236471257747,-0.00192944030218,0.0,-0.0539839121621,0.0,0.0,-0.0701776322466,
1.39647252678,0.0,0.00548036269015,0.0471373507246,0.0130603123874,0.0145535937128,-0.00127279986072,-0.01179821684,-0.00366747252528,-0.00411956777412,0.0034339395439,0.0060240209054,-0.00823031946696,0.00121529770325,0.00259494107738,0.0245722082364,0.00805205200146,0.0137451837678,0.0268630024411,0.00224754022282,
-0.00574609582612,-0.00300082994177,-0.000351359147551,-0.0220329706646,-0.00152996085902,-0.0148986603016,-0.000205920767756,-0.00658709280661,0.014728557129,-0.0130046684098,0.0,0.0131320817129,0.0,-0.0458628912038,-0.0548285855682,0.0,0.0,-0.0639402166824,1.31742463177,0.0},
{1.0,0.0,0.100230450024,0.00849779528227,0.850820307975,0.0,-0.00600547050942,-0.00714164560468,0.00210801055077,0.00344245642734,-0.128917639462,0.00623911329744,0.0889565831379,-0.0818726433754,0.941818568934,0.0,0.00423076580957,-0.0280980123918,-0.0159584839157,0.00876640456261,
-0.000219252738529,-0.0011913527528,-0.0104700962375,0.0268268750276,-0.145695170602,-0.0358894677084,0.851357826476,0.0,-0.0169137859508,-0.00523665301033,-0.122107412047,-0.0171421008709,0.108063340038,0.027709505126,0.753388768428,0.0,-0.0131490180601,-0.0105800206436,-0.00535164545862,0.011818472446,
-0.00946213516549,0.00274580699652,0.00210034437053,-0.0129500151353,0.00543378447528,-0.0219139523681,0.0120613312567,0.0,1.12374665305,0.0,0.00446559246776,0.0116673021788,-0.0147994331497,0.00715534605505,0.00524985901918,0.00306851152478,0.015135336358,-0.00222899496936,0.00142515273278,0.0147133767412,
-0.00613821682116,-0.00213785350386,-0.00963455798456,-0.0111683498701,0.0180903917021,0.000321385050132,0.0,0.0164676090475,0.0,-0.0327174121846,1.1554711111,0.0,0.00545193516744,-0.00140303846386,-0.00662161404298,0.00566459079473,-0.00258123695369,-0.0145795036048,0.00899944123116,-0.00119810116267,
-0.00415219614652,-0.000386359144203,0.00829187558149,0.0100020895097,0.00911117139077,0.00437466845367,0.0112616223742,0.0318514246734,-0.0100806545105,0.00782938007537,-0.115216436636,-0.0336571047599,-0.066499129805,0.000555394230381,0.099780047932,-0.0801859633143,0.750875195235,0.0,0.00223546103404,0.0241791495693,
-0.00922990370689,0.00494224429128,1.2112394715e-05,0.0280386367846,-0.0191514765752,-0.00242900942406,-0.0124278239799,-0.0200643398308,-0.00744485360605,-0.00030663412388,0.00470843293727,-0.00266134535549,0.0376975224558,-0.0253998745899,-0.00878880497814,0.0,1.00379915107,0.0,0.00497822487133,-0.010286746556,
0.00541525902564,0.00494503754488,0.00479603429826,0.0161745331649,0.0209303265579,0.0177618893522,-0.0152989617533,0.006023610452,0.00220154859356,0.0113665424808,-0.00205967834635,0.00318104162849,0.00230382237247,0.0088128163465,-0.0168164393155,-0.00472498323017,0.00662161404298,0.00566459079473,0.0499715113911,-0.0298720966905,
0.0,-0.0303626323319,0.0,0.00160630513774,0.982067822283,0.0,0.0245314563166,-0.00757882887131,0.00449149415198,-0.0059540376108,-0.00474399859413,-0.0083314416021,2.31821821246e-06,-0.00578255335686,0.0121459279116,-0.00562180299876,0.00340110186344,-0.00527268087982,-0.14862497952,0.0132822137739,
-0.109663222875,0.084111077224,0.8762394339,0.0,0.000498650088854,0.0031793321285,-0.117896081893,0.00994285654939,-0.0133914143804,0.0065520640313,-0.0915249598607,0.0517664528651,0.0704611825037,0.012969804935,0.721562998526,0.0,-0.0110838441616,-0.022923364286,-0.0275735633763,0.00530076877994,
0.00707567687153,0.016485481253,-0.00114025400341,0.0272307566163,-0.00140088212944,-0.00618497726683,-0.0756523738426,0.0755027164527,-0.0179330101129,-0.0135221158083,-0.00467127210053,-0.0200753075435,0.0204482765759,0.0,1.09212125882,0.0,0.007724033244,0.0329153716252,0.028207849249,-0.00436238160783,
-0.00229784500016,-0.00612910945252,-0.00322478801652,0.00684518518688,-0.00884990264436,-0.00241950830654,0.00172481201453,-0.00215772276593,0.00415219614652,-0.000386359144203,-0.074374094318,0.0624689448311,0.0053548060135,0.0101839577648,0.00474399859413,-0.0083314416021,-0.0156041063872,-0.003116412917,0.0,-0.0365625515713,
0.0,0.0304490285645,0.991155099321,0.0,-0.00479542112468,-0.000411708327269,-0.0434260808249,0.021987030476,0.000565263973104,0.00400313411776,0.000341714623028,0.0289999703133,-0.163508221296,0.0166241772893,0.0013134299837,-0.0201798649332,-0.0142602096614,0.0125483395707,-0.0982121237111,0.080943800987,
-0.124844878638,0.00450778570036,0.0700674038873,-0.098818344534,0.847523032749,0.0,-0.0253883208263,0.00299055395442,-0.00697742147552,0.00585065107828,0.0511522912174,-0.0117840828135,0.00614576928802,-0.0230704532154,0.0058020518631,0.0103171152994,-0.00296419276099,-0.0038920423521,0.00893167189497,0.00801513715835,
-0.059585407186,-0.00237295034036,0.0170731567603,-0.00127248099132,0.000608859287602,-0.0175341960218,0.0197793163569,0.00625475448038,-0.00345428590855,0.0,1.03720852358,0.0,-0.000489803879172,-0.001034859768,-0.0167927634337,-0.000554395067165,0.00162567387552,-0.0148278720395,-0.00447576700249,0.00389320556979,
0.00846983860745,-0.0069426033936,-0.00911117139077,0.00437466845367,-0.00276931422953,-0.000479875966724,-0.0156771859544,-0.00167219714687,-0.00340110186344,-0.00527268087982,-0.0401171922494,0.0403728761874,-0.00108194222617,-0.02948022729,0.026173565811,-0.00210616966233,0.0434260808249,0.021987030476,0.0284719704258,0.030998132756,
0.0,0.0360810811399,0.0,0.000591531608787,0.879754014909,0.0,0.0249155165816,-0.00686821345185,0.00144615896246,-0.0198635160545,-0.0243511689098,0.00877286057328,-0.0039229805933,0.0168904013925,-6.88999655484e-05,-0.00120638299482,0.01111653307,-0.000932738981379,-0.00644089572678,0.00318225958092,
-0.000154071532453,-0.0380629568616,0.0135164106998,-0.0495228786958,0.0259119491625,0.0108614746866,0.0191594841801,-0.0070673810687,-0.0122314081519,0.0198904409072,-0.00520619261142,0.0122365497763,0.00752811646159,0.005303092862,-0.00421339460614,0.0,-0.0506721814582,0.0,0.0,0.0146695680889,
1.46012204389,0.0,0.017730007622,0.0369884989829,0.0342228890613,0.00863487993007,-0.00428465699295,-0.0103961389863,-0.00153609209997,-0.00153146173061,-0.00644257107497,0.00309335772903,-0.00553380764574,0.026436486342,-0.00345120671152,0.00603813756772,-0.00145533572758,0.000919257702452,0.0219500314716,-0.00550394898792,
-0.0010334501966,-0.0328513153408,-0.0149586161025,-0.056475502715,-0.0276001411262,-0.00860499209344,-0.0474282218953,-0.0144594077301,-1.64774105468e-05,0.00316369330603,0.0,0.010646823169,0.0,0.00331075455632,-0.024545311501,0.0,0.0,-0.070723283884,1.10796924748,0.0}},
{{1.0,0.0,0.135119880502,0.0388764211191,0.869684745099,0.0,-0.0214569290519,0.0013897694311,-0.0295356132766,-0.00529288682367,-0.155086692404,0.0102518466945,0.0187796045587,-0.0141596634183,0.77048786675,0.0,0.0301826098641,-0.0138686513684,-0.00204887667771,0.00456390938969,
0.0292429942041,0.00467676394916,-0.00290987093214,0.000313399081071,-0.141395201945,-0.0486939084375,0.846602133212,0.0,-0.0153435908807,-0.0102570983948,-0.115909704292,-0.0335989981684,0.112916377663,0.0329212614208,0.746283869959,0.0,-0.00367756320632,-0.00293386270106,-0.00406754247683,-0.002720784165,
0.00276761498076,0.00517331407696,-0.00193387097056,0.00382550590598,-0.00312162012822,0.00199334898792,0.00234565930167,0.0,1.32785291857,0.0,0.0034358944314,0.00115684029119,-0.00121186530579,0.000448587462224,-0.00170567934564,0.00350346471847,0.000426504264702,0.000308937896054,0.00269263825075,9.22286250788e-06,
0.000136360237022,0.00246873182915,0.00380587819484,-0.000809025242274,0.00198620144823,0.000462229584207,0.0,-0.00932742329337,0.0,0.0117798957368,1.35354388078,0.0,0.000495281866644,-0.00583927367248,-0.00150886991187,-0.00279172331859,0.00109279869371,-0.000435676490607,-0.00171969436427,-0.00526328051451,
-0.000614624593748,-0.000667857129765,-0.000487943596886,0.000226053147255,0.000138746060258,-0.000274721317453,0.028992936182,0.00884787769492,-0.00330300329316,0.0018525039885,-0.113092665016,-0.0429781724568,-0.130004579777,0.0171370834363,0.0164913170496,-0.0161187620667,0.558974144097,0.0,0.00348905083473,0.00129206228429,
-0.000937454201952,0.000353396499023,0.00790492662661,0.00533787848896,0.00156740098292,-6.02748309969e-05,0.0105443060738,0.00939404757855,0.00186926042693,-0.00205471234043,-0.00593337653091,-0.00539015291995,0.0360379975933,-0.0145072264827,0.00263845411003,0.0,0.942150196334,0.0,-0.000281558915189,0.0013713662866,
-0.000419182358168,0.000288791109943,-0.00144115135527,-0.0010577034496,-0.00249725716995,-0.0016368467439,0.00898723072904,-0.000362059403933,0.00269920473199,-0.00165969736352,0.0213325442101,-0.00827253744256,0.000679292660239,-0.0163442977576,-0.00517158030415,-0.00609141731798,0.00150886991187,-0.00279172331859,0.0228981481116,-0.0192078322479,
0.0,-0.0405123678704,0.0,0.0587829162262,0.823514807501,0.0,-0.000164746507595,-0.00129179936139,-0.00030119693604,0.000297407076114,-0.000666957595817,0.000136033401266,-0.000136146032155,-0.00148123839059,-0.000582894820472,0.000629107371919,0.00247753016014,0.00339500436532,-0.167255708201,0.00979265170986,
-0.0190190678481,0.0158862466616,0.749835216896,0.0,-0.0250795349683,-0.000215377657099,-0.135911627739,0.0162089043776,-0.00367482444396,0.000208418430308,-0.0136139931914,0.0106821691421,0.108358351463,0.0269618707397,0.635558624755,0.0,-0.00901781668275,0.00289081227465,0.00502803679534,-0.00351989943546,
0.000110132876515,0.000639699522644,-0.00286084067111,0.000761708863638,0.00407100217005,-0.00696633840586,-0.00877903514185,0.0106649574876,-0.000270148492027,0.000162701092062,0.00163572273449,0.00102544592409,0.0343152383041,0.0,0.912782118696,0.0,-0.000697559583566,-0.00424332387954,-0.0163477258825,-0.00394429913276,
-0.00143482090766,-0.0203933759384,0.00117261892548,0.00102664259973,-0.00013038532938,0.0015452341761,-0.00144285539405,-0.00483432912042,0.000614624593748,-0.000667857129765,-0.0176721565784,0.0156160763038,-0.000699312461219,-0.000240126590046,0.000666957595817,0.000136033401266,0.00546959515229,0.0133584115518,0.0,0.00581547949016,
0.0,0.0210682092573,0.815274487561,0.0,0.00212342713269,0.00188906484634,0.00147587678389,0.00301711501274,0.0276782428969,-0.00429371063261,-0.00286281265419,0.000149537659487,-0.120849394354,0.00788170014882,0.00321249702946,-0.00335513603833,-0.000307129351633,0.000123666035659,-0.0155509648789,0.00961499560941,
-0.112372932723,0.005125410624,0.0179211902832,-0.00718611629479,0.554494889135,0.0,-0.00513858485786,0.00109457844591,-0.00316894783278,0.000129179857726,0.00837418284649,0.00030067263357,0.00140688739756,-0.000587595569435,0.000102810092199,0.000332347620454,-0.000474434894388,0.000472290328398,0.00175528867507,-0.00151834116793,
-0.0216545028434,0.00617309025461,-0.0035035319559,0.00170038115292,-0.00526146114797,0.0039141260953,0.0279941597306,-0.0128067673493,-0.00772640312751,0.0,0.814961175178,0.0,0.00420941616185,0.001013446445,0.00106383555543,-0.000197969169557,0.0050435900965,0.00489961140975,-0.00229201470266,-0.000345434221232,
-0.000361813690203,2.23726544381e-05,-0.000138746060258,-0.000274721317453,0.000783287865007,-0.00013242600917,-0.00261387105782,0.000343238541729,-0.00247753016014,0.00339500436532,-0.0207682789669,0.0120956897255,0.00427531073063,0.00343325147552,-0.000131556125138,-0.000880199488403,-0.00147587678389,0.00301711501274,0.023646501767,-0.00864636058834,
0.0,0.00622618334755,0.0,-0.0285780940496,0.784790022487,0.0,0.0101657948554,0.00347277460947,0.00112623386041,-0.000915793877185,-0.022170652349,-0.00195919931083,-0.000652986051143,-0.00283940322294,-0.00044467214601,0.000213799511494,0.000831155032319,-0.000248599391651,-0.000620578281201,0.000674703316638,
0.00203914814955,0.00295739144044,0.0035321883944,0.00258122364761,-0.0041390484383,0.00278878216705,-0.0188937690834,0.000523595060082,-0.00103442149135,0.000929858908757,0.00467477167506,0.00264087093353,0.00389401072325,0.00489278833407,0.0322712780815,0.0,-0.0368806950976,0.0,0.0,0.00968225755815,
1.16688509635,0.0,0.00265989429721,-0.00983888197699,-0.00111349881532,0.000414106033397,-0.0051447698102,0.00572845959656,-0.00160327711729,0.000239347909187,-9.81082800712e-05,-0.000194257306508,0.00125078249133,0.00034773528215,0.000911897995953,0.000903368593023,0.00239341694583,0.000668851475373,0.00292940853008,-0.000623855474441,
-0.000299374891309,-0.00019551637575,-0.00524971890474,0.00958277909064,0.000560944369031,-0.00122631047971,0.00130438117309,-0.0049381165977,-0.0105179193272,0.00345654299451,0.0,-0.0212575637332,0.0,-0.0238743205244,0.00184320265783,0.0,0.0,0.0179066728125,1.25221654661,0.0},
{1.0,0.0,0.0945404677911,0.0440486533008,0.859907712342,0.0,-0.00210732005747,-0.00408153941894,0.00412578319374,0.00507409522321,-0.0981491320998,0.0107193128961,0.019271829865,-0.0165230897798,0.848783935294,0.0,0.000153166218218,-0.000930127931955,-0.00287865365214,0.000136766912355,
0.012029924547,-0.0014290752082,-0.0011727212833,-0.00211659605994,-0.106772353352,-0.0434315494834,0.865755426424,0.0,-0.00760420056337,-0.00193760209054,-0.0868594779858,-0.0284400483504,0.0859479768278,0.0430953610572,0.774460037165,0.0,-0.00494595589002,-0.00174179123706,0.0029250091684,-0.00924549352387,
-0.0110879241101,-0.00575791756966,-0.000851212694636,0.00387588176789,0.00661653388871,-0.0119746043072,0.0131060233935,0.0,1.15730323632,0.0,0.000618637449535,-0.000439885562255,-0.000406314006078,0.00189022331184,0.00350739932502,0.00183387646631,-2.83499578254e-05,-0.000624564509091,0.0105525805198,0.00425174810755,
-0.00697164887923,-0.00241147181414,-0.00130148167168,0.00225339413627,-0.0058197092521,0.0107148168302,0.0,0.0162904474983,0.0,-0.0245738813944,1.18674179835,0.0,0.00634430518681,-0.00589447744912,0.00310311641198,0.00147378230384,-0.00100245167264,0.00211882146295,-0.000649742935904,0.00354502893545,
-0.00481505005039,0.00446511337142,-0.000198563102537,-0.000385041322551,0.000170308768855,-0.000665311041499,-0.00548614623602,-0.00222957084338,-0.000917095836011,0.000965288878379,-0.0903307465943,-0.0174417511757,-0.080347122878,0.0152552667729,0.0172417333812,-0.0258894769429,0.766337004987,0.0,0.00103165355172,0.00128351314997,
-0.000712951676826,0.000538595289487,0.0153827917623,-0.00660336646313,-0.00149998674391,-0.00227123399181,-0.00137847452819,-0.00385341141944,0.0157252891217,-0.00157950305463,0.00637849333836,0.00532284282797,0.0211688395857,-0.00202609150857,-0.00142332130012,0.0,1.02459414426,0.0,-0.00126616954979,-0.00157125785507,
-0.000154605928237,0.000499900537548,-0.000953111877647,4.3926592098e-05,0.00184087494514,-0.000155015533577,-0.00312180587985,-0.00110522936985,-0.00296583979657,-0.000394291803927,0.0122709008748,-0.00858617050951,0.00213032992621,0.0180856649224,-0.00254353514617,-0.00242252253131,-0.00310311641198,0.00147378230384,0.0215145430143,-0.000889139016712,
0.0,-0.0527642409761,0.0,-0.07089673225,1.03594611476,0.0,-0.000874371614478,0.00106217951274,0.00039111124369,-4.54494263709e-06,4.18754058031e-05,0.000193726444632,0.00122965660916,-4.70183996523e-05,-0.00223388120254,-0.000101633762205,0.000274453834583,0.00277128629253,-0.0822823908215,0.00720714847338,
-0.023959620919,0.0119046457079,0.856919288771,0.0,-0.00195866355938,0.00240345265229,-0.0612570755234,0.00358989554896,0.000676661512935,9.05201941898e-05,-0.0207198971068,0.0109722180628,0.0846084476576,0.0347419044527,0.678075171403,0.0,-0.00420789157396,0.00331832964258,0.00833243811064,-0.00229462507837,
0.00138351490616,-0.00134630164392,-0.000131835797477,-0.00204019896698,-0.00324591739438,0.0002230417419,-0.0173112029886,0.00709537655663,-0.000402831156203,0.00018350199233,-0.00268411337219,-0.00780070945704,0.00351689805551,0.0,1.03707139374,0.0,0.000860531898867,-0.00203608172994,-0.005939338165,0.00540902341897,
-0.00634789366455,0.0212522171225,0.00120673659474,-0.00124672570014,-0.00508574907899,-0.00694952332639,0.00115616815798,-0.00626707236377,0.00481505005039,0.00446511337142,-0.0157565576865,0.00566994273046,0.000576313198232,0.00150203229848,-4.18754058031e-05,0.000193726444632,-0.00885685689346,-0.0149251166351,0.0,-0.0270109870183,
0.0,-0.0698924308921,1.06398725936,0.0,0.00499251804722,-0.00274869004367,-0.0035573304864,-0.000848881819948,0.00957675066768,-0.000799505057086,-0.000748353143984,-0.00120442042009,-0.0476288016817,0.0120370162378,3.14126828182e-05,0.000184420614975,-0.00172453017662,0.000304930266994,-0.035333356272,0.00435186073542,
-0.0778268102492,0.00394310653966,0.0179719549877,-0.0117581944401,0.84007066688,0.0,0.017973620131,0.00229438203661,-0.00112793356521,0.00129703075285,0.0185980803208,0.00427937152125,-0.00159113992169,0.00305259183275,-0.00086155205651,-0.000709522969311,-0.000565811097653,-0.000177874466042,0.00610110524014,0.0012706219741,
-0.026371023753,0.0073480904799,0.0198520339867,-0.0061135026262,0.00348306396696,-0.00252498174607,0.0242960951751,-0.00621692954706,-0.0276588546337,0.0,1.01176890836,0.0,0.011790907257,0.0120845752833,-0.00390014691567,-0.00137775333999,0.00611861284984,-0.0156475049708,0.00242090604897,-0.00260942555867,
0.000757287105496,4.96968611654e-05,-0.000170308768855,-0.000665311041499,-0.000553118616495,-0.00108298417848,0.00178256305804,0.0022956856267,-0.000274453834583,0.00277128629253,-0.0160489183317,0.000538449427515,-0.00132188674217,0.0119993543603,-0.00149017546858,0.00468581892563,0.0035573304864,-0.000848881819948,0.0246906947381,-0.00901633250219,
0.0,-0.00749024640094,0.0,0.00235276983241,0.871036365894,0.0,0.0093799820617,0.00543017013731,0.00126313067881,0.00161368785941,0.00364140112264,-0.00363688844112,-0.00146483900641,0.00222314890735,-4.48746974851e-06,0.000320004607692,0.000569917912106,0.000984297519782,0.0010093438696,0.000868001273604,
0.000492771787595,-0.00305244319247,-0.00837282069189,-0.00333319440929,0.00510170605455,0.000286643472504,-0.00302022650252,-0.00558865806471,-0.00174507860008,-0.00203898772506,0.00251995240544,-0.00228908534284,-0.00392102608754,-0.00360418640299,-0.0100064914872,0.0,0.0630005670279,0.0,0.0,0.0108286165942,
1.12891079791,0.0,-0.00447268010134,0.00124504664274,-8.03507524043e-05,-0.00195078780842,0.00315216055946,-0.0026388372032,-0.00296058863519,0.000645932284661,-0.000120426485353,-0.000470445949043,7.09319049516e-06,-0.00166155515146,1.50851204173e-05,-0.000554857519459,0.00370183758357,-0.00123485362878,-0.00495455970699,-0.00519794491598,
0.00201024572916,-0.00185107375172,0.00429271341477,0.00209276549544,0.00257107030227,0.00510571087189,0.00661199480973,0.00180948270972,-0.00787319750118,0.00387467375679,0.0,0.000347622549302,0.0,0.0417034006882,-0.0429434177732,0.0,0.0,0.0187586373823,1.06117623608,0.0}}}};

__device__ double nw_comp(int year_opt,int trig_opt,int wide_window,int j1,int j2,int h,int j1p,int j2p,int hp,int part) {
   return nw_comp_matrix[year_opt][wide_window][trig_opt][redindexcpp(j1,j2,h,j1p,j2p,hp,part)];
 }


// ##########################################
// Splines
 
__device__ double knots_wide[6] = {0.0,0.9,1.4,2.1,3.1,12.0}; 
__device__ double knots_narrow[6] = {0.0,0.9,1.4,2.0,3.1,12.0};
 
__device__ double a_2011_L0TIS_wide[5][4] = {{0.0,-0.00112621527248,1.58569721831,-0.819679115309},
{-0.695240812888,2.31634316102,-0.989268755348,0.134011986046},
{-0.968319206849,2.90151114808,-1.40724588896,0.233530351192},
{1.49093519128,-0.611709420676,0.265716286636,-0.0320192004899},
{0.480295052314,0.366329423485,-0.0497801147062,0.00190514374049}}; 
__device__ double a_2012_L0TIS_wide[5][4] = {{0.0,-0.00108246180814,2.40916212056,-1.38444396395},
{-1.71192960187,5.70534954441,-3.93131788635,0.963881964535},
{1.5097616167,-1.19827449537,0.999842142073,-0.210203756517},
{-1.60039623414,3.24480814869,-1.11591149796,0.125630154599},
{2.3184526579,-0.547626262968,0.107454441287,-0.00591457005072}}; 
__device__ double a_2011_L0noTIS_wide[5][4] = {{0.0,-0.00098639638413,2.21305126523,-1.24975680956},
{-1.38905016398,4.62918081687,-2.93157897172,0.655661796718},
{0.301283465128,1.00703732593,-0.344333621046,0.0396509989394},
{0.280998193193,1.03601628584,-0.358133125764,0.0418413965137},
{1.65203424402,-0.290792795608,0.0698698037346,-0.00418042386257}}; 
__device__ double a_2012_L0noTIS_wide[5][4] = {{0.0,-0.00143959572436,4.23974268964,-2.51791074478},
{-3.18832348534,10.6263053554,-7.56886281162,1.85564684828},
{2.64645621312,-1.87679399844,1.36192244113,-0.270730592851},
{-1.04557535896,3.39753681882,-1.14966366233,0.127933868015},
{2.9370024549,-0.456570742976,0.0935968414771,-0.00575005712493}}; 
__device__ double a_2011_L0TIS_narrow[5][4] = {{0.0,-0.00105007049752,2.10287696037,-1.21206867385},
{-1.42394206761,4.74542348821,-3.17098254931,0.741212626035},
{0.646630522127,0.308482224484,-0.00173878950165,-0.0133692215384},
{0.350645013584,0.752460487299,-0.223727920909,0.0236289670295},
{1.06879626479,0.0574754054844,0.000460815159922,-0.000477348676871}}; 
__device__ double a_2012_L0TIS_narrow[5][4] = {{0.0,-0.0217677276861,1.92932115124,-1.02522029051},
{-0.924217061529,3.05895581074,-1.49370500257,0.242567173866},
{-1.04708252048,3.32223893706,-1.68176437851,0.287343215756},
{1.38760726219,-0.329795736933,0.144252958489,-0.0169930070766},
{0.873682232338,0.167551066145,-0.0161814941165,0.000258009332581}}; 
__device__ double a_2011_L0noTIS_narrow[5][4] = {{0.0,-0.00141362744144,7.02846926232,-4.03198237274},
{-4.36857014682,14.5604868619,-9.15142017033,1.96056926898},
{-0.84323191785,7.00619065702,-3.75549430966,0.67582501644},
{5.39200898979,-2.34667070444,0.920936371063,-0.103580097015},
{2.42800757735,0.521717759207,-0.00435023011253,-0.00408691409238}}; 
__device__ double a_2012_L0noTIS_narrow[5][4] = {{0.0,-0.0135116503737,3.32589922088,-2.04848218086},
{-2.87136660569,9.55771036858,-7.3087919113,1.89029231253},
{3.9544829436,-5.06911009418,3.13893699067,-0.597262187936},
{-1.99801374513,3.85963493892,-1.32543552587,0.146799898155},
{2.48668454014,-0.480395659729,0.0745743446588,-0.00373879760085}};

__device__ double spline_knot(int wide_window,int i) {
   if (wide_window == 0) {return knots_narrow[i];}
   else {return knots_wide[i];}
 }

__device__ double spline_coef(int year_opt,int trig_opt,int wide_window,int ibin,int deg) {
   if (year_opt == 0) {
      if (trig_opt == 0) {
         if (wide_window == 0) {return a_2011_L0TIS_narrow[ibin][deg];}
         else {return a_2011_L0TIS_wide[ibin][deg];}
      }
      else {
         if (wide_window == 0) {return a_2011_L0noTIS_narrow[ibin][deg];}
         else {return a_2011_L0noTIS_wide[ibin][deg];}
      }
   }
   else {
      if (trig_opt == 0) {
         if (wide_window == 0) {return a_2012_L0TIS_narrow[ibin][deg];}
         else {return a_2012_L0TIS_wide[ibin][deg];}
      }
      else {
         if (wide_window == 0) {return a_2012_L0noTIS_narrow[ibin][deg];}
         else {return a_2012_L0noTIS_wide[ibin][deg];}
      }
   }
 }


// ##########################################
// Buffer variables

__device__ const int max_N_events = 100000;

__device__ int wide_window;
__device__ int year_opt[4];
__device__ int trig_opt[4];
__device__ double alt_fit;
__device__ double option;
__device__ double inftres;
__device__ double acctype;
__device__ double A_j1;
__device__ double A_j2;
__device__ double A_h;
__device__ double A_j1p;
__device__ double A_j2p;
__device__ double A_hp;
__device__ double qcomp;
__device__ int decision_SSK[4][max_N_events];
__device__ int decision_OS[4][max_N_events];
__device__ double etamistag_SSK[4][max_N_events];
__device__ double etamistag_OS[4][max_N_events];
__device__ double m1[4][max_N_events];
__device__ double m2[4][max_N_events];
__device__ double cos1[4][max_N_events];
__device__ double cos2[4][max_N_events];
__device__ double phi[4][max_N_events];
__device__ double t[4][max_N_events];
__device__ double t_err[4][max_N_events];
__device__ double max_fun[max_N_events];
__device__ double fun_ran[max_N_events];
__device__ double dec_accepted[max_N_events];
__device__ double reA00;
__device__ double reA01;
__device__ double reA10;
__device__ double reA02;
__device__ double reA20;
__device__ double reA110;
__device__ double reA11par;
__device__ double reA11perp;
__device__ double reA120;
__device__ double reA12par;
__device__ double reA12perp;
__device__ double reA210;
__device__ double reA21par;
__device__ double reA21perp;
__device__ double reA220;
__device__ double reA22par;
__device__ double reA22perp;
__device__ double reA22par2;
__device__ double reA22perp2;
__device__ double DCP_SS;
__device__ double DCP_SV;
__device__ double DCP_VS;
__device__ double DCP_ST;
__device__ double DCP_TS;
__device__ double DCP_VV;
__device__ double DCP_VT;
__device__ double DCP_TV;
__device__ double DCP_TT;
__device__ double imA00;
__device__ double imA01;
__device__ double imA10;
__device__ double imA02;
__device__ double imA20;
__device__ double imA110;
__device__ double imA11par;
__device__ double imA11perp;
__device__ double imA120;
__device__ double imA12par;
__device__ double imA12perp;
__device__ double imA210;
__device__ double imA21par;
__device__ double imA21perp;
__device__ double imA220;
__device__ double imA22par;
__device__ double imA22perp;
__device__ double imA22par2;
__device__ double imA22perp2;
__device__ double phis;
__device__ double dphi_SS;
__device__ double dphi_SV;
__device__ double dphi_VS;
__device__ double dphi_ST;
__device__ double dphi_TS;
__device__ double dphi_VT;
__device__ double dphi_TV;
__device__ double dphi_TT;
__device__ double delta_m_freq;
__device__ double gamma_Bs_freq;
__device__ double delta_gamma_freq;
__device__ double p0metac_tag_SSK;
__device__ double p0metac_tag_OS;
__device__ double Dp0half_tag_SSK;
__device__ double Dp0half_tag_OS;
__device__ double p1_tag_SSK;
__device__ double p1_tag_OS;
__device__ double Dp1half_tag_SSK;
__device__ double Dp1half_tag_OS;
__device__ double etac_tag_SSK;
__device__ double etac_tag_OS;
__device__ double deltatmean_tres_11;
__device__ double p0_tres_11;
__device__ double p1_tres_11;
__device__ double deltatmean_tres_12;
__device__ double p0_tres_12;
__device__ double p1_tres_12;
__device__ double mv;
__device__ double ms;
__device__ double mt;
__device__ double gv;
__device__ double gs;
__device__ double gt;
__device__ double res_mass;
__device__ double tag_eff_SSK;
__device__ double mu1_SSK;
__device__ double sigma1_SSK;
__device__ double c_SSK;
__device__ double mu2_SSK;
__device__ double sigma2_SSK;
__device__ double tag_eff_OS;
__device__ double mu1_OS;
__device__ double sigma1_OS;
__device__ double c_OS;
__device__ double mu2_OS;
__device__ double sigma2_OS;
__device__ double gamma1_dt;
__device__ double beta1_dt;
__device__ double c_dt;
__device__ double gamma2_dt;
__device__ double beta2_dt;
__device__ double pw_mass_altmodel;
__device__ double f_1410_rel2_892;
__device__ double delta_1410_rel2_892;
__device__ double f_1680_rel2_892;
__device__ double delta_1680_rel2_892;
__device__ double Im00;
__device__ double Im01;
__device__ double Im10;
__device__ double Im02;
__device__ double Im20;
__device__ double Im11;
__device__ double Im12;
__device__ double Im21;
__device__ double Im22;
__device__ double Ih1Re;
__device__ double Ih2Re;
__device__ double Ih3Re;
__device__ double Ih4Re;
__device__ double Ih5Re;
__device__ double Ih6Re;
__device__ double Ih7Re;
__device__ double Ih8Re;
__device__ double Ih9Re;
__device__ double Ih10Re;
__device__ double Ih11Re;
__device__ double Ih12Re;
__device__ double Ih13Re;
__device__ double Ih14Re;
__device__ double Ih15Re;
__device__ double Ih16Re;
__device__ double Ih17Re;
__device__ double Ih18Re;
__device__ double Ih19Re;
__device__ double Ih20Re;
__device__ double Ih21Re;
__device__ double Ih22Re;
__device__ double Ih23Re;
__device__ double Ih24Re;
__device__ double Ih25Re;
__device__ double Ih26Re;
__device__ double Ih27Re;
__device__ double Ih28Re;
__device__ double Ih29Re;
__device__ double Ih30Re;
__device__ double Ih1Im;
__device__ double Ih2Im;
__device__ double Ih3Im;
__device__ double Ih4Im;
__device__ double Ih5Im;
__device__ double Ih6Im;
__device__ double Ih7Im;
__device__ double Ih8Im;
__device__ double Ih9Im;
__device__ double Ih10Im;
__device__ double Ih11Im;
__device__ double Ih12Im;
__device__ double Ih13Im;
__device__ double Ih14Im;
__device__ double Ih15Im;
__device__ double Ih16Im;
__device__ double Ih17Im;
__device__ double Ih18Im;
__device__ double Ih19Im;
__device__ double Ih20Im;
__device__ double Ih21Im;
__device__ double If1;
__device__ double If2;
__device__ double If3;
__device__ double If4;
__device__ double If5;
__device__ double If6;
__device__ double If7;
__device__ double If8;
__device__ double If9;
__device__ double If10;
__device__ double If11;
__device__ double If12;
__device__ double If13;
__device__ double If14;
__device__ double If15;
__device__ double If16;
__device__ double If17;
__device__ double If18;

__device__ double reAj1j2h_temp[3][3][5];
__device__ double imAj1j2h_temp[3][3][5];
__device__ double reAbarj1j2h_temp[3][3][5];
__device__ double imAbarj1j2h_temp[3][3][5];

__device__ pycuda::complex<double> Aj1j2h_temp(int j1, int j2, int h) {

   return pycuda::complex<double>(reAj1j2h_temp[j1][j2][h],imAj1j2h_temp[j1][j2][h]);

 }

__device__ pycuda::complex<double> Abarj1j2h_temp(int j1, int j2, int h) {

   return pycuda::complex<double>(reAbarj1j2h_temp[j1][j2][h],imAbarj1j2h_temp[j1][j2][h]);

 }

__device__ double T_cosh_temp[4][max_N_events];
__device__ double T_sinh_temp[4][max_N_events];
__device__ double T_cos_temp[4][max_N_events];
__device__ double T_sin_temp[4][max_N_events];
__device__ double IT_cosh_temp_deltat[4][max_N_events];
__device__ double IT_sinh_temp_deltat[4][max_N_events];
__device__ double IT_cos_temp_deltat[4][max_N_events];
__device__ double IT_sin_temp_deltat[4][max_N_events];
__device__ double zeta_temp[4][max_N_events];
__device__ double DCP_tzero_temp[4][max_N_events];
__device__ double fi_cos1_temp[18][4][max_N_events];
__device__ double fi_cos2_temp[18][4][max_N_events];
__device__ double gi_temp[15][4][max_N_events];
__device__ double reMj1j2_temp[3][3][4][max_N_events];
__device__ double imMj1j2_temp[3][3][4][max_N_events];
__device__ double phasespace_temp[4][max_N_events];
__device__ double reIhj1j2j1pj2pdict[3][3][3][3];
__device__ double imIhj1j2j1pj2pdict[3][3][3][3];

__device__ pycuda::complex<double> Mj1j2_temp(int j1, int j2, int icat, int iev) {

   return pycuda::complex<double>(reMj1j2_temp[j1][j2][icat][iev],imMj1j2_temp[j1][j2][icat][iev]);

 }

__device__ pycuda::complex<double> Ihj1j2j1pj2p(int j1, int j2, int j1p, int j2p) {

   return pycuda::complex<double>(reIhj1j2j1pj2pdict[j1][j2][j1p][j2p],imIhj1j2j1pj2pdict[j1][j2][j1p][j2p]);

 }

// ##########################################
// Toy MC generation variables

__device__ double knots_gen_wide[6] = {0.0,0.9,1.3,1.9,3.0,12.0};
__device__ double knots_gen_narrow[6] = {0.0,0.9,1.3,1.9,3.0,12.0};

__device__ double a_gen_wide[5][4] = {{0.0,-0.00138436998913,2.5481847953,-1.45909728079},
{-1.6653800648,5.54988251268,-3.61988951878,0.82537468739},
{-0.289336418837,2.37439717584,-1.17720849044,0.199046218586},
{0.993185871959,0.349361979846,-0.111400492548,0.0120623593064},
{1.32606052325,0.0164873285591,-0.000442275452223,-0.000266331481965}};

__device__ double a_gen_narrow[5][4] = {{0.0,0.00101382530285,4.89487359849,-2.83048035352},
{-3.54249846114,11.8093420291,-8.22549107238,2.02891396902},
{1.06333885612,1.18048668157,-0.0494484973637,-0.0675072040589},
{-0.421082535913,3.52430993215,-1.28303968188,0.148912301997},
{3.78015377185,-0.67692637561,0.117372420705,-0.006689042735}};

__device__ double k1_gen(int wide_window) {
   if (wide_window) {return -0.40631262195;}
   else {return -0.505556252411;}
 }

__device__ double k2_gen(int wide_window) {
   if (wide_window) {return -0.39861379722;}
   else {return -0.404368705592;}
 }

__device__ double k3_gen(int wide_window) {
   if (wide_window) {return -0.0363987194893;}
   else {return -0.0483750503137;}
 }

__device__ double k4_gen(int wide_window) {
   if (wide_window) {return -0.0644151228873;}
   else {return -0.0175772310185;}
 }

__device__ double k5_gen(int wide_window) {
   if (wide_window) {return 0.0270906873059;}
   else {return 0.0389936024545;}
 }

__device__ double p1_gen(int wide_window) {
   if (wide_window) {return -0.000100573256821;}
   else {return 4.35273527839e-05;}
 }

__device__ double knot_gen(int wide_window,int i) {
   if (wide_window == 0) {return knots_gen_narrow[i];}
   else {return knots_gen_wide[i];}
 }

__device__ double coef_gen(int wide_window,int ibin,int deg) {
   if (wide_window == 0) {return a_gen_narrow[ibin][deg];}
   else {return a_gen_wide[ibin][deg];}
 }

__device__ double accGenTime(double tau) { 

   int tau_bin;
   if (tau < knot_gen(wide_window,1)) {tau_bin = 0;}
   else if ((tau >= knot_gen(wide_window,1)) and (tau < knot_gen(wide_window,2))) {tau_bin = 1;}
   else if ((tau >= knot_gen(wide_window,2)) and (tau < knot_gen(wide_window,3))) {tau_bin = 2;}
   else if ((tau >= knot_gen(wide_window,3)) and (tau < knot_gen(wide_window,4))) {tau_bin = 3;}
   else {tau_bin = 4;}

   return coef_gen(wide_window,tau_bin,0)+tau*coef_gen(wide_window,tau_bin,1)+tau*tau*coef_gen(wide_window,tau_bin,2)+tau*tau*tau*coef_gen(wide_window,tau_bin,3);

 }

__device__ double accGenAng(double x) { 

   return 1.+k1_gen(wide_window)*x+k2_gen(wide_window)*(2.*x*x-1.)+k3_gen(wide_window)*(4.*x*x*x-3.*x)+k4_gen(wide_window)*(8.*x*x*x*x-8.*x*x+1.)+k5_gen(wide_window)*(16.*x*x*x*x*x-20.*x*x*x+5.*x);

 }

__device__ double accGenMass(double m) { 
   
   return 1. + p1_gen(wide_window)*m;

 }

__device__ double accGen(double tau, double ma, double mb, double cos1var, double cos2var, double phivar) {
   return accGenTime(tau)*accGenMass(ma)*accGenMass(mb)*accGenAng(cos1var)*accGenAng(cos2var);
 }


// ##########################################
// Physical terms

__device__ double reAj1j2h(int j1, int j2, int h) {

   switch(j1) {
   case 0 :
      switch(j2) {
      case 0 : return reA00;
      case 1 : return reA01;
      case 2 : return reA02;
      }
   case 1 :
      switch(j2) {
      case 0 : return reA10;
      case 1 :
         switch(h) {
         case 0 : return reA110;
         case 1 : return reA11par;
         case 2 : return reA11perp;
         }
      case 2 :
         switch(h) {
         case 0 : return reA120;
         case 1 : return reA12par;
         case 2 : return reA12perp;      
         }
      }
   case 2 :
      switch(j2) {
      case 0 : return reA20;
      case 1 :
         switch(h) {
         case 0 : return reA210;
         case 1 : return reA21par;
         case 2 : return reA21perp;
         }
      case 2 :
         switch(h) {
         case 0 : return reA220;
         case 1 : return reA22par;
         case 2 : return reA22perp;
         case 3 : return reA22par2;
         case 4 : return reA22perp2;
         }
      }
   }
   return 0.;

 }

__device__ double imAj1j2h(int j1, int j2, int h) {

   switch(j1) {
   case 0 :
      switch(j2) {
      case 0 : return imA00;
      case 1 : return imA01;
      case 2 : return imA02;
      }
   case 1 :
      switch(j2) {
      case 0 : return imA10;
      case 1 :
         switch(h) {
         case 0 : return imA110;
         case 1 : return imA11par;
         case 2 : return imA11perp;
         }
      case 2 :
         switch(h) {
         case 0 : return imA120;
         case 1 : return imA12par;
         case 2 : return imA12perp;      
         }
      }
   case 2 :
      switch(j2) {
      case 0 : return imA20;
      case 1 :
         switch(h) {
         case 0 : return imA210;
         case 1 : return imA21par;
         case 2 : return imA21perp;
         }
      case 2 :
         switch(h) {
         case 0 : return imA220;
         case 1 : return imA22par;
         case 2 : return imA22perp;
         case 3 : return imA22par2;
         case 4 : return imA22perp2;
         }
      }
   }
   return 0.;

 }

__device__ double DCPj1j2(int j1, int j2) {

   switch(j1) {
   case 0 :
      switch(j2) {
      case 0 : return DCP_SS;
      case 1 : return DCP_SV;
      case 2 : return DCP_ST;
      }
   case 1 :
      switch(j2) {
      case 0 : return DCP_VS;
      case 1 : return DCP_VV;
      case 2 : return DCP_VT;
      }
   case 2 :
      switch(j2) {
      case 0 : return DCP_TS;
      case 1 : return DCP_TV;
      case 2 : return DCP_TT;
      }
   }
   return 0;

 }

__device__ double dphij1j2(int j1, int j2) {

   return 0;

 }

__device__ double etah(int h) {

   if ((h == 2) or (h == 4)) {return -1.;}
   else {return 1.;}

 }

__device__ double etaj1j2h(int j1, int j2, int h) {

   return pow(-1.,j1+j2)*etah(h);

 }

__device__ pycuda::complex<double> Aj1j2h(int j1, int j2, int h) {

   pycuda::complex<double> I(0.,1.);
   return pycuda::complex<double>(reAj1j2h(j1,j2,h),imAj1j2h(j1,j2,h))*pycuda::complex<double>(sqrt(1.+DCPj1j2(j1,j2)))*exp(I*0.5*(phis+dphij1j2(j1,j2)));

 }

__device__ pycuda::complex<double> Abarj1j2h(int j1, int j2, int h) {

   pycuda::complex<double> I(0.,1.);
   return etaj1j2h(j2,j1,h)*pycuda::complex<double>(reAj1j2h(j2,j1,h),imAj1j2h(j2,j1,h))*pycuda::complex<double>(sqrt(1.-DCPj1j2(j2,j1)))*exp(-I*0.5*(phis+dphij1j2(j2,j1)));

 }

__device__ pycuda::complex<double> M_Average(int j1, int j2, int h, int j1p, int j2p, int hp) {

   return Aj1j2h_temp(j1,j2,h)*pycuda::conj(Aj1j2h_temp(j1p,j2p,hp))+Abarj1j2h_temp(j1,j2,h)*pycuda::conj(Abarj1j2h_temp(j1p,j2p,hp));

 }

__device__ pycuda::complex<double> M_DeltaGamma(int j1, int j2, int h, int j1p, int j2p, int hp) {

   return Aj1j2h_temp(j1,j2,h)*pycuda::conj(Abarj1j2h_temp(j1p,j2p,hp))+Abarj1j2h_temp(j1,j2,h)*pycuda::conj(Aj1j2h_temp(j1p,j2p,hp));

 }

__device__ pycuda::complex<double> M_DirCP(int j1, int j2, int h, int j1p, int j2p, int hp) {

   return Aj1j2h_temp(j1,j2,h)*pycuda::conj(Aj1j2h_temp(j1p,j2p,hp))-Abarj1j2h_temp(j1,j2,h)*pycuda::conj(Abarj1j2h_temp(j1p,j2p,hp));

 }

__device__ pycuda::complex<double> M_MixCP(int j1, int j2, int h, int j1p, int j2p, int hp) {

   return pycuda::complex<double>(0.,-1.)*(Aj1j2h_temp(j1,j2,h)*pycuda::conj(Abarj1j2h_temp(j1p,j2p,hp))-Abarj1j2h_temp(j1,j2,h)*pycuda::conj(Aj1j2h_temp(j1p,j2p,hp)));

 }


// ##########################################
// Flavour tagging terms

__device__ double omega_SSK(double eta) {

   return (p0metac_tag_SSK+etac_tag_SSK+Dp0half_tag_SSK)+(p1_tag_SSK+Dp1half_tag_SSK)*(eta-etac_tag_SSK);

 }

__device__ double omegabar_SSK(double eta) {

   return (p0metac_tag_SSK+etac_tag_SSK-Dp0half_tag_SSK)+(p1_tag_SSK-Dp1half_tag_SSK)*(eta-etac_tag_SSK);

 }

__device__ double omega_OS(double eta) {

   return (p0metac_tag_OS+etac_tag_OS+Dp0half_tag_OS)+(p1_tag_OS+Dp1half_tag_OS)*(eta-etac_tag_OS);

 }

__device__ double omegabar_OS(double eta) {

   return (p0metac_tag_OS+etac_tag_OS-Dp0half_tag_OS)+(p1_tag_OS-Dp1half_tag_OS)*(eta-etac_tag_OS);

 }

__device__ double P_Bs(int q1, int q2, double eta1, double eta2) {

   return (1.+0.5*q1*(1.-q1-2.*omega_SSK(eta1)))*(1.+0.5*q2*(1.-q2-2.*omega_OS(eta2)));

 }

__device__ double P_Bsbar(int q1, int q2, double eta1, double eta2) {

   return (1.-0.5*q1*(1.+q1-2.*omegabar_SSK(eta1)))*(1.-0.5*q2*(1.+q2-2.*omegabar_OS(eta2)));

 }

__device__ double zeta(int q1, int q2, double eta1, double eta2) {

   return 0.5*((1.+DCP_prod)*P_Bs(q1,q2,eta1,eta2)+(1.-DCP_prod)*P_Bsbar(q1,q2,eta1,eta2));

 }

__device__ double DCP_tzero(int q1, int q2, double eta1, double eta2) {

   return 0.5/zeta(q1,q2,eta1,eta2)*((1.+DCP_prod)*P_Bs(q1,q2,eta1,eta2)-(1.-DCP_prod)*P_Bsbar(q1,q2,eta1,eta2));

 }


// ##########################################
// Time dependent terms

#define errf_const 1.12837916709551
#define xLim 5.33
#define yLim 4.29

__device__ pycuda::complex<double> faddeeva(pycuda::complex<double> z) {

   double in_real = pycuda::real(z);
   double in_imag = pycuda::imag(z);
   int n, nc, nu;
   double h, q, Saux, Sx, Sy, Tn, Tx, Ty, Wx, Wy, xh, xl, x, yh, y;
   double Rx [33];
   double Ry [33];

   x = fabs(in_real);
   y = fabs(in_imag);

   if (y < yLim && x < xLim) {
      q = (1.0 - y / yLim) * sqrt(1.0 - (x / xLim) * (x / xLim));
      h  = 1.0 / (3.2 * q);
      nc = 7 + int(23.0 * q);
      xl = pow(h, double(1 - nc));
      xh = y + 0.5 / h;
      yh = x;
      nu = 10 + int(21.0 * q);
      Rx[nu] = 0.;
      Ry[nu] = 0.;
      for (n = nu; n > 0; n--){
         Tx = xh + n * Rx[n];
         Ty = yh - n * Ry[n];
         Tn = Tx*Tx + Ty*Ty;
         Rx[n-1] = 0.5 * Tx / Tn;
         Ry[n-1] = 0.5 * Ty / Tn;
         }
      Sx = 0.;
      Sy = 0.;
      for (n = nc; n>0; n--){
         Saux = Sx + xl;
         Sx = Rx[n-1] * Saux - Ry[n-1] * Sy;
         Sy = Rx[n-1] * Sy + Ry[n-1] * Saux;
         xl = h * xl;
      };
      Wx = errf_const * Sx;
      Wy = errf_const * Sy;
   }
   else {
      xh = y;
      yh = x;
      Rx[0] = 0.;
      Ry[0] = 0.;
      for (n = 9; n>0; n--){
         Tx = xh + n * Rx[0];
         Ty = yh - n * Ry[0];
         Tn = Tx * Tx + Ty * Ty;
         Rx[0] = 0.5 * Tx / Tn;
         Ry[0] = 0.5 * Ty / Tn;
      };
      Wx = errf_const * Rx[0];
      Wy = errf_const * Ry[0];
   }

   if (y == 0.) {
      Wx = exp(-x * x);
   }
   if (in_imag < 0.) {
      Wx =   2.0 * exp(y * y - x * x) * cos(2.0 * x * y) - Wx;
      Wy = - 2.0 * exp(y * y - x * x) * sin(2.0 * x * y) - Wy;
      if (in_real > 0.) {
         Wy = -Wy;
      }
   }
   else if (in_real < 0.) {
      Wy = -Wy;
   }

   return pycuda::complex<double>(Wx,Wy);

}

__device__ pycuda::complex<double> conv_exp(double x, pycuda::complex<double> z) {

   double re = pycuda::real(z)-x;

   if (re>-5.0) {return 0.5*faddeeva(pycuda::complex<double>(-pycuda::real(z),re))*exp(-x*x);}

   else {
      pycuda::complex<double> mi(0,-1);
      pycuda::complex<double> zp  = mi*(z-x);
      pycuda::complex<double> zsq = zp*zp;
      pycuda::complex<double> v = -zsq -x*x;
      pycuda::complex<double> iz(pycuda::real(z)+x,pycuda::real(z)-x);
      return 0.5*exp(v)*(exp(zsq)/(iz*sqrt(pi)) + 1.)*2. ;
   }

 }

__device__ pycuda::complex<double> Kn(pycuda::complex<double> z, int n) {

   if (n == 0) {return 1./(2.*z);}
   else if (n == 1) {return 1./(2.*z*z);}
   else if (n == 2) {return 1./z*(1.+1./(z*z));}
   else if (n == 3) {return 3./(z*z)*(1.+1./(z*z));}
   return pycuda::complex<double>(0.,0.);

 }

__device__ pycuda::complex<double> Mn_x(double x, pycuda::complex<double> z, int n) {

   if (n == 0) {return pycuda::complex<double>(erf(x),0.)-2.*conv_exp(x,z);}
   else if (n == 1) {return 2.*(-pycuda::complex<double>(sqrt(1./pi)*exp(-x*x),0.)-2.*x*conv_exp(x,z));}
   else if (n == 2) {return 2.*(-2.*x*exp(-x*x)*pycuda::complex<double>(sqrt(1./pi),0.)-(2.*x*x-1.)*2.*conv_exp(x,z));}
   else if (n == 3) {return 4.*(-(2.*x*x-1.)*exp(-x*x)*pycuda::complex<double>(sqrt(1./pi),0.)-x*(2.*x*x-3.)*2.*conv_exp(x,z));}
   return pycuda::complex<double>(0.,0.);

 }

__device__ pycuda::complex<double> Mn(double x_1, double x_2, pycuda::complex<double> z, int n) {

   return Mn_x(x_2,z,n)-Mn_x(x_1,z,n);

 }

__device__ pycuda::complex<double> Tj1j2hj1pj2php(int j1, int j2, int h, int j1p, int j2p, int hp, int icat, int iev) {

   return zeta_temp[icat][iev]*((T_cosh_temp[icat][iev]*M_Average(j1,j2,h,j1p,j2p,hp)-T_sinh_temp[icat][iev]*M_DeltaGamma(j1,j2,h,j1p,j2p,hp))+DCP_tzero_temp[icat][iev]*(T_cos_temp[icat][iev]*M_DirCP(j1,j2,h,j1p,j2p,hp)+T_sin_temp[icat][iev]*M_MixCP(j1,j2,h,j1p,j2p,hp)));

 }

__device__ pycuda::complex<double> ITj1j2hj1pj2php_deltat(int j1, int j2, int h, int j1p, int j2p, int hp, int icat, int iev) {

   return (IT_cosh_temp_deltat[icat][iev]*M_Average(j1,j2,h,j1p,j2p,hp)-IT_sinh_temp_deltat[icat][iev]*M_DeltaGamma(j1,j2,h,j1p,j2p,hp))+DCP_prod*(IT_cos_temp_deltat[icat][iev]*M_DirCP(j1,j2,h,j1p,j2p,hp)+IT_sin_temp_deltat[icat][iev]*M_MixCP(j1,j2,h,j1p,j2p,hp));

 }


// ##########################################
// Angular terms

__device__ double fi(double x, int i) { 

   switch(i) {
      case 1 : return 1.;
      case 2 : return x;
      case 3 : return sqrt(1.-x*x);
      case 4 : return 3.*x*x-1.;
      case 5 : return x*sqrt(1.-x*x);
      case 6 : return x*x;
      case 7 : return x*(3.*x*x-1.);
      case 8 : return x*x*sqrt(1.-x*x);
      case 9 : return 1.-x*x;
      case 10 : return (3.*x*x-1.)*sqrt(1.-x*x);
      case 11 : return x*(1.-x*x);
      case 12 : return (3.*x*x-1.)*(3.*x*x-1.);
      case 13 : return x*(3.*x*x-1.)*sqrt(1.-x*x);
      case 14 : return x*x*(1.-x*x);
      case 15 : return (1.-x*x)*sqrt(1.-x*x);
      case 16 : return (3.*x*x-1.)*(1.-x*x);
      case 17 : return x*(1.-x*x)*sqrt(1.-x*x);
      case 18 : return (1.-x*x)*(1.-x*x);
   }
   return 0.;

 }

__device__ double gi(double x, int i) { 

   switch(i) {
      case 1 : return 1.;
      case 2 : return cos(x);
      case 3 : return sin(x);
      case 4 : return cos(x)*cos(x);
      case 5 : return sin(x)*cos(x);
      case 6 : return sin(x)*sin(x);
      case 7 : return cos(2.*x);
      case 8 : return sin(2.*x);
      case 9 : return cos(x)*cos(2.*x);
      case 10 : return cos(x)*sin(2.*x);
      case 11 : return sin(x)*cos(2.*x);
      case 12 : return sin(x)*sin(2.*x);
      case 13 : return cos(2.*x)*cos(2.*x);
      case 14 : return sin(2.*x)*cos(2.*x);
      case 15 : return sin(2.*x)*sin(2.*x);
   }
   return 0.;

 }

__device__ double fjjphhp_cos1(int j, int jp, int h, int hp, int icat, int iev) { 

   return fi_cos1_temp[(int) fjjphhpindexdict[j][jp][h][hp]-1][icat][iev];

 }

__device__ double fjjphhp_cos2(int j, int jp, int h, int hp, int icat, int iev) { 

   return fi_cos2_temp[(int) fjjphhpindexdict[j][jp][h][hp]-1][icat][iev];

 }

__device__ double ghhp_phi(int h, int hp, int icat, int iev) { 

   return gi_temp[(int) ghhpindexdict[h][hp]-1][icat][iev];

 }

__device__ pycuda::complex<double> Nj1j2hj1pj2php(int j1, int j2, int h, int j1p, int j2p, int hp) {

   return Nj1j2hdict(j1,j2,h)*pycuda::conj(Nj1j2hdict(j1p,j2p,hp));
  
 }


// ##########################################
// Mass dependent terms

__device__ double get_q(double M, double ma, double mb) {

   double M2 = M*M;
   double m12 = ma*ma;
   double m22 = mb*mb;
   double q2 = .25*( M2*M2 - 2*M2*(m12+m22) +(m12*m12+m22*m22)-2*m12*m22) /M2;
   if (q2<0) {return 0.;}
   return sqrt(q2);

 }

__device__ double Blatt_Weisskopf2(double q, double q0, int L) {

   if (L<1.) {return 1.;}  
   double d = 1.6e-03;
   double z = q*d*q*d;
   double z0 = q0*d*q0*d;
   if (L==1) {return (1+z0)/(1+z);}
   else if (L==2) {return ((z0-3)*(z0-3) + 9*z0) / ((z-3)*(z-3) + 9*z);}
   else if (L==3) {return (z0*(z0-15)*(z0-15) + 9*(z0-5)) / (z*(z-15)*(z-15) + 9*(z-5));}
   return ( pow(z0*z0 -45*z0+105,2) +25*z0*(2*z0-21)*(2*z0-21)) /(pow(z*z -45*z+105,2) +25*z*(2*z-21)*(2*z-21));

 }

__device__ double FL_j1j2(int j1, int j2, double ma, double mb) {

   double p = get_q(MBs,ma,mb);
   double q_1 = get_q(ma,MPion,MKaon);
   double q_2 = get_q(mb,MPion,MKaon);

   double m0 = mv;
   double p0 = get_q(MBs,m0,m0);
   double q0 = get_q(m0,MPion,MKaon);

   int L = abs(j1-j2);
   double FL_Bs = pow(p/p0,L)*sqrt(Blatt_Weisskopf2(p,p0,L));

   double FL_Kpi1 = pow((q_1/q0),j1)*sqrt(Blatt_Weisskopf2(q_1,q0,j1));

   double FL_Kpi2 = pow((q_2/q0),j2)*sqrt(Blatt_Weisskopf2(q_2,q0,j2));

   return FL_Bs*FL_Kpi1*FL_Kpi2;

 }

__device__ pycuda::complex<double> Resonance(double m, double m0, double g0, int J) {

   double q = get_q(m,MPion,MKaon);
   double q0 = get_q(m0,MPion,MKaon);

   double gamma = g0*pow(q/q0,2*J+1)*(m0/m)*Blatt_Weisskopf2(q,q0,J);

   pycuda::complex<double> num(m0*g0,0.);
   pycuda::complex<double> denom(m0*m0-m*m,-m0*gamma);
   pycuda::complex<double> BW = num/denom;

   pycuda::complex<double> I(0.,1.);
   if (J == 1) {return BW*exp(-I*1.5707963267948966);}
   else if (J == 2) {return BW*exp(-I*0.006008360479292941);}
   return BW;

 }

__device__ double omega_Stheo(double m) {

   double m_GeV = m/1000.;
   double svar_GeV = m_GeV*m_GeV;
   double Delta_Kpi = MKaon/1000.*MKaon/1000.-MPion/1000.*MPion/1000.;
   double y_s = pow((svar_GeV-Delta_Kpi)/(svar_GeV+Delta_Kpi),2);
   double y_s0 = pow((s0_Stheo-Delta_Kpi)/(s0_Stheo+Delta_Kpi),2);
   return (sqrt(y_s)-alpha_Stheo*sqrt(y_s0-y_s))/(sqrt(y_s)+alpha_Stheo*sqrt(y_s0-y_s));

 }

__device__ double cotdelta_Stheo(double m) {

   double m_GeV = m/1000.;
   double svar_GeV = m_GeV*m_GeV;
   double q_Kpi_GeV = get_q(m,MKaon,MPion)/1000.;
   double omega_func = omega_Stheo(m);
   return m_GeV/(2.*q_Kpi_GeV*(svar_GeV-sAdler_Stheo))*(B0_Stheo+B1_Stheo*omega_func);

 }

__device__ double get_p1_Stheo(double q) {

   return 1.+a_Stheo*q/1000.*q/1000.+b_Stheo*q/1000.*q/1000.*q/1000.*q/1000.;

 }

__device__ double get_p2_Stheo(double q) {

   return 1.+c_Stheo*q/1000.*q/1000.;

 }

__device__ double Theta_Keta(double m) {

   if (m>=(MKaon+MEta)) {return 1.;}
   return 0.;

 }

__device__ pycuda::complex<double> Prop_Stheo(double m) { 

   pycuda::complex<double> I(0.,1.);
   double m_GeV = m/1000.;
   double svar_GeV = m_GeV*m_GeV;
   double q_Kpi_GeV = get_q(m,MKaon,MPion)/1000.;
   double q_Keta_GeV = get_q(m,MKaon,MEta)/1000.;

   pycuda::complex<double> T;

   if (m<(MKaon+MEta)) {
      T = 1./(cotdelta_Stheo(m)-I);
   }

   else {
      pycuda::complex<double> S0b = exp(I*2.*q_Keta_GeV*(phi0_Stheo+phi1_Stheo*q_Keta_GeV*q_Keta_GeV));
      double q_Kpi_r1_GeV = get_q(sqrtsr1_Stheo*1000.,MKaon,MPion)/1000.;
      double q_Keta_r1_GeV = get_q(sqrtsr1_Stheo*1000.,MKaon,MEta)/1000.;
      double q_Kpi_r2_GeV = get_q(sqrtsr2_Stheo*1000.,MKaon,MPion)/1000.;
      double q_Keta_r2_GeV = get_q(sqrtsr2_Stheo*1000.,MKaon,MEta)/1000.;
      double q_Kpi_hat_GeV = get_q(MKaon+MEta,MKaon,MPion)/1000.;
      double beta_Stheo = 1./cotdelta_Stheo(MKaon+MEta);
      double P1_s = (sqrtsr1_Stheo*sqrtsr1_Stheo-svar_GeV)*beta_Stheo+e1_Stheo*G1_Stheo*(get_p1_Stheo(q_Kpi_GeV*1000.)*(q_Kpi_GeV-q_Kpi_hat_GeV))/(get_p1_Stheo(q_Kpi_r1_GeV*1000.)*(q_Kpi_r1_GeV-q_Kpi_hat_GeV));
      double Q1_s = (1.-e1_Stheo)*G1_Stheo*get_p1_Stheo(q_Kpi_GeV*1000.)/get_p1_Stheo(q_Kpi_r1_GeV*1000.)*q_Keta_GeV/q_Keta_r1_GeV*Theta_Keta(m);
      double P2_s = e2_Stheo*G2_Stheo*(get_p2_Stheo(q_Kpi_GeV*1000.)*(q_Kpi_GeV-q_Kpi_hat_GeV))/(get_p2_Stheo(q_Kpi_r2_GeV*1000.)*(q_Kpi_r2_GeV-q_Kpi_hat_GeV));
      double Q2_s = (1.-e2_Stheo)*G2_Stheo*get_p2_Stheo(q_Kpi_GeV*1000.)/get_p2_Stheo(q_Kpi_r2_GeV*1000.)*q_Keta_GeV/q_Keta_r2_GeV*Theta_Keta(m);
      pycuda::complex<double> S1r = (sqrtsr1_Stheo*sqrtsr1_Stheo-svar_GeV+I*(P1_s-Q1_s))/(sqrtsr1_Stheo*sqrtsr1_Stheo-svar_GeV-I*(P1_s+Q1_s));
      pycuda::complex<double> S2r = (sqrtsr2_Stheo*sqrtsr2_Stheo-svar_GeV+I*(P2_s-Q2_s))/(sqrtsr2_Stheo*sqrtsr2_Stheo-svar_GeV-I*(P2_s+Q2_s));
      T = (S0b*S1r*S2r-1.)/(2.*I);
   }

   double xm = (m-1175.)/425.;
   double modulus = sqrt(1.+c1_pol_Stheo*xm+c2_pol_Stheo*(2.*xm*xm-1.)+c3_pol_Stheo*(4.*xm*xm*xm-3.*xm)+c4_pol_Stheo*(8.*xm*xm*xm*xm-8.*xm*xm+1.));

   return pycuda::complex<double>(modulus)*exp(I*(pycuda::arg(T)-0.7095863518296103));

 }

__device__ pycuda::complex<double> Prop_S_Palano(double m) {

   pycuda::complex<double> i(0.,1.);
   double m_GeV = m/1000.;
   double svar_GeV = m_GeV*m_GeV;
   double q_Kpi_GeV = get_q(m,MKaon,MPion)/1000.;
   double q_Keta_GeV = get_q(m,MKaon,MEta)/1000.;

   double rho_1 = 2.*q_Kpi_GeV/m_GeV;
   double rho_2 = 2.*q_Keta_GeV/m_GeV;

   double sbot_GeV = 0.36;
   double stop_GeV = 5.832;
   double X = (2.*svar_GeV-(stop_GeV+sbot_GeV))/(stop_GeV-sbot_GeV);

   double K11 = (svar_GeV-s_A_palano)/s_Kpi_palano*(g_1_a_palano*g_1_a_palano/(svar_GeV-s_a_palano)+g_1_b_palano*g_1_b_palano/(svar_GeV-s_b_palano)+C_11_0_palano+C_11_1_palano*X+C_11_2_palano*X*X+C_11_3_palano*X*X*X);
   double K12 = (svar_GeV-s_A_palano)/s_Kpi_palano*(g_1_a_palano*g_2_a_palano/(svar_GeV-s_a_palano)+g_1_b_palano*g_2_b_palano/(svar_GeV-s_b_palano)+C_12_0_palano+C_12_1_palano*X+C_12_2_palano*X*X+C_12_3_palano*X*X*X);
   double K22 = (svar_GeV-s_A_palano)/s_Kpi_palano*(g_2_a_palano*g_2_a_palano/(svar_GeV-s_a_palano)+g_2_b_palano*g_2_b_palano/(svar_GeV-s_b_palano)+C_22_0_palano+C_22_1_palano*X+C_22_2_palano*X*X+C_22_3_palano*X*X*X);

   double detK = K11*K22-K12*K12;
   pycuda::complex<double> Delta(1.-rho_1*rho_2*detK,-rho_1*K11-rho_2*K22);

   pycuda::complex<double> T11_hat = s_Kpi_palano/(svar_GeV-s_A_palano)*(K11-rho_2*detK)/Delta;
   pycuda::complex<double> T12_hat = s_Kpi_palano/(svar_GeV-s_A_palano)*K12/Delta;

   double xm = (m-1175.)/425.;
   double alpha_1_s = A_1_0_palano+A_1_1_palano*xm+A_1_2_palano*(2.*xm*xm-1.)+A_1_3_palano*(4.*xm*xm*xm-3.*xm)+A_1_4_palano*(8.*xm*xm*xm*xm-8.*xm*xm+1.);
   double alpha_2_s = A_2_0_palano+A_2_1_palano*xm+A_2_2_palano*(2.*xm*xm-1.)+A_2_3_palano*(4.*xm*xm*xm-3.*xm)+A_2_4_palano*(8.*xm*xm*xm*xm-8.*xm*xm+1.);

   pycuda::complex<double> T = alpha_1_s*T11_hat+alpha_2_s*T12_hat;

   return T*exp(-i*0.0758670);

 }

__device__ pycuda::complex<double> Mji(double m, int ji) {

   pycuda::complex<double> T;

   if (ji == 0)
	{
	T = Prop_Stheo(m);
	}

   else if (ji == 1)
	{
	T = Resonance(m,mv,gv,1);
	}

   else if (ji == 2)
	{
	T = Resonance(m,mt,gt,2);
	}
   
   return T;

 }
 
__device__ pycuda::complex<double> Mj1j2(double ma, double mb, int j1, int j2) { 

   double scale_factor = sqrt(Im00);

   if ((j1 == 0) and (j2 == 0)) {return Mji(ma,0)*Mji(mb,0)*FL_j1j2(0,0,ma,mb)*(scale_factor/sqrt(Im00));}
   else if ((j1 == 0) and (j2 == 1)) {return Mji(ma,0)*Mji(mb,1)*FL_j1j2(0,1,ma,mb)*(scale_factor/sqrt(Im01));}
   else if ((j1 == 1) and (j2 == 0)) {return Mji(ma,1)*Mji(mb,0)*FL_j1j2(1,0,ma,mb)*(scale_factor/sqrt(Im10));}
   else if ((j1 == 0) and (j2 == 2)) {return Mji(ma,0)*Mji(mb,2)*FL_j1j2(0,2,ma,mb)*(scale_factor/sqrt(Im02));}
   else if ((j1 == 2) and (j2 == 0)) {return Mji(ma,2)*Mji(mb,0)*FL_j1j2(2,0,ma,mb)*(scale_factor/sqrt(Im20));}
   else if ((j1 == 1) and (j2 == 1)) {return Mji(ma,1)*Mji(mb,1)*FL_j1j2(1,1,ma,mb)*(scale_factor/sqrt(Im11));}
   else if ((j1 == 1) and (j2 == 2)) {return Mji(ma,1)*Mji(mb,2)*FL_j1j2(1,2,ma,mb)*(scale_factor/sqrt(Im12));}
   else if ((j1 == 2) and (j2 == 1)) {return Mji(ma,2)*Mji(mb,1)*FL_j1j2(2,1,ma,mb)*(scale_factor/sqrt(Im21));}
   else if ((j1 == 2) and (j2 == 2)) {return Mji(ma,2)*Mji(mb,2)*FL_j1j2(2,2,ma,mb)*(scale_factor/sqrt(Im22));}
   return pycuda::complex<double>(0.,0.);

 }

__device__ double phasespace(double ma, double mb) { 
 
   double Q1 = get_q(ma,MKaon,MPion)/get_q(mv,MKaon,MPion);
   double Q2 = get_q(mb,MKaon,MPion)/get_q(mv,MKaon,MPion);
   double QB = get_q(MBs,ma,mb)/get_q(MBs,mv,mv);
   double phsp = Q1*Q2*QB;

   return phsp;

 }

__device__ pycuda::complex<double> hj1j2j1pj2p(int j1, int j2, int j1p, int j2p, int icat, int iev) { 

   return Mj1j2_temp(j1,j2,icat,iev)*pycuda::conj(Mj1j2_temp(j1p,j2p,icat,iev))*phasespace_temp[icat][iev];

 }


// ##########################################
// PDF elements

__device__ double comp_num_fit(int j1, int j2, int h, int j1p, int j2p, int hp, int icat, int iev) {

   return pycuda::real(Tj1j2hj1pj2php(j1,j2,h,j1p,j2p,hp,icat,iev)*Nj1j2hj1pj2php(j1,j2,h,j1p,j2p,hp)*hj1j2j1pj2p(j1,j2,j1p,j2p,icat,iev))*ghhp_phi(h,hp,icat,iev)*fjjphhp_cos1(j1,j1p,h,hp,icat,iev)*fjjphhp_cos2(j2,j2p,h,hp,icat,iev);

 }

__device__ double comp_den_fit(int j1, int j2, int h, int j1p, int j2p, int hp, int icat, int iev) { 
   return pycuda::real(ITj1j2hj1pj2php_deltat(j1,j2,h,j1p,j2p,hp,icat,iev)*pycuda::complex<double>(nw_comp(year_opt[icat],trig_opt[icat],wide_window,j1,j2,h,j1p,j2p,hp,0),nw_comp(year_opt[icat],trig_opt[icat],wide_window,j1,j2,h,j1p,j2p,hp,1)));
 }

__device__ double num_fit(int icat, int iev) {

   return comp_num_fit(0,0,0,0,0,0,icat,iev)+comp_num_fit(0,1,0,0,1,0,icat,iev)+comp_num_fit(0,2,0,0,2,0,icat,iev)+comp_num_fit(1,0,0,1,0,0,icat,iev)+comp_num_fit(1,1,0,1,1,0,icat,iev)+comp_num_fit(1,1,1,1,1,1,icat,iev)
+comp_num_fit(1,1,2,1,1,2,icat,iev)+comp_num_fit(1,2,0,1,2,0,icat,iev)+comp_num_fit(1,2,1,1,2,1,icat,iev)+comp_num_fit(1,2,2,1,2,2,icat,iev)+comp_num_fit(2,0,0,2,0,0,icat,iev)+comp_num_fit(2,1,0,2,1,0,icat,iev)+comp_num_fit(2,1,1,2,1,1,icat,iev)
+comp_num_fit(2,1,2,2,1,2,icat,iev)+comp_num_fit(2,2,0,2,2,0,icat,iev)+comp_num_fit(2,2,1,2,2,1,icat,iev)+comp_num_fit(2,2,2,2,2,2,icat,iev)+comp_num_fit(2,2,3,2,2,3,icat,iev)+comp_num_fit(2,2,4,2,2,4,icat,iev)+2.*comp_num_fit(0,1,0,0,0,0,icat,iev)
+2.*comp_num_fit(0,1,0,1,0,0,icat,iev)+2.*comp_num_fit(0,1,0,2,0,0,icat,iev)+2.*comp_num_fit(0,2,0,0,0,0,icat,iev)+2.*comp_num_fit(0,2,0,0,1,0,icat,iev)+2.*comp_num_fit(0,2,0,1,0,0,icat,iev)+2.*comp_num_fit(0,2,0,1,1,0,icat,iev)
+2.*comp_num_fit(0,2,0,2,0,0,icat,iev)+2.*comp_num_fit(0,2,0,2,1,0,icat,iev)+2.*comp_num_fit(1,0,0,0,0,0,icat,iev)+2.*comp_num_fit(1,1,0,0,0,0,icat,iev)+2.*comp_num_fit(1,1,0,0,1,0,icat,iev)+2.*comp_num_fit(1,1,0,1,0,0,icat,iev)
+2.*comp_num_fit(1,1,0,2,0,0,icat,iev)+2.*comp_num_fit(1,1,1,0,0,0,icat,iev)+2.*comp_num_fit(1,1,1,0,1,0,icat,iev)+2.*comp_num_fit(1,1,1,0,2,0,icat,iev)+2.*comp_num_fit(1,1,1,1,0,0,icat,iev)+2.*comp_num_fit(1,1,1,1,1,0,icat,iev)
+2.*comp_num_fit(1,1,1,1,2,0,icat,iev)+2.*comp_num_fit(1,1,1,2,0,0,icat,iev)+2.*comp_num_fit(1,1,1,2,1,0,icat,iev)+2.*comp_num_fit(1,1,1,2,2,0,icat,iev)+2.*comp_num_fit(1,1,2,0,0,0,icat,iev)+2.*comp_num_fit(1,1,2,0,1,0,icat,iev)
+2.*comp_num_fit(1,1,2,0,2,0,icat,iev)+2.*comp_num_fit(1,1,2,1,0,0,icat,iev)+2.*comp_num_fit(1,1,2,1,1,0,icat,iev)+2.*comp_num_fit(1,1,2,1,1,1,icat,iev)+2.*comp_num_fit(1,1,2,1,2,0,icat,iev)+2.*comp_num_fit(1,1,2,1,2,1,icat,iev)
+2.*comp_num_fit(1,1,2,2,0,0,icat,iev)+2.*comp_num_fit(1,1,2,2,1,0,icat,iev)+2.*comp_num_fit(1,1,2,2,1,1,icat,iev)+2.*comp_num_fit(1,1,2,2,2,0,icat,iev)+2.*comp_num_fit(1,1,2,2,2,1,icat,iev)+2.*comp_num_fit(1,2,0,0,0,0,icat,iev)
+2.*comp_num_fit(1,2,0,0,1,0,icat,iev)+2.*comp_num_fit(1,2,0,0,2,0,icat,iev)+2.*comp_num_fit(1,2,0,1,0,0,icat,iev)+2.*comp_num_fit(1,2,0,1,1,0,icat,iev)+2.*comp_num_fit(1,2,0,2,0,0,icat,iev)+2.*comp_num_fit(1,2,0,2,1,0,icat,iev)
+2.*comp_num_fit(1,2,1,0,0,0,icat,iev)+2.*comp_num_fit(1,2,1,0,1,0,icat,iev)+2.*comp_num_fit(1,2,1,0,2,0,icat,iev)+2.*comp_num_fit(1,2,1,1,0,0,icat,iev)+2.*comp_num_fit(1,2,1,1,1,0,icat,iev)+2.*comp_num_fit(1,2,1,1,1,1,icat,iev)
+2.*comp_num_fit(1,2,1,1,2,0,icat,iev)+2.*comp_num_fit(1,2,1,2,0,0,icat,iev)+2.*comp_num_fit(1,2,1,2,1,0,icat,iev)+2.*comp_num_fit(1,2,1,2,1,1,icat,iev)+2.*comp_num_fit(1,2,1,2,2,0,icat,iev)+2.*comp_num_fit(1,2,2,0,0,0,icat,iev)
+2.*comp_num_fit(1,2,2,0,1,0,icat,iev)+2.*comp_num_fit(1,2,2,0,2,0,icat,iev)+2.*comp_num_fit(1,2,2,1,0,0,icat,iev)+2.*comp_num_fit(1,2,2,1,1,0,icat,iev)+2.*comp_num_fit(1,2,2,1,1,1,icat,iev)+2.*comp_num_fit(1,2,2,1,1,2,icat,iev)
+2.*comp_num_fit(1,2,2,1,2,0,icat,iev)+2.*comp_num_fit(1,2,2,1,2,1,icat,iev)+2.*comp_num_fit(1,2,2,2,0,0,icat,iev)+2.*comp_num_fit(1,2,2,2,1,0,icat,iev)+2.*comp_num_fit(1,2,2,2,1,1,icat,iev)+2.*comp_num_fit(1,2,2,2,1,2,icat,iev)
+2.*comp_num_fit(1,2,2,2,2,0,icat,iev)+2.*comp_num_fit(1,2,2,2,2,1,icat,iev)+2.*comp_num_fit(2,0,0,0,0,0,icat,iev)+2.*comp_num_fit(2,0,0,1,0,0,icat,iev)+2.*comp_num_fit(2,1,0,0,0,0,icat,iev)+2.*comp_num_fit(2,1,0,0,1,0,icat,iev)
+2.*comp_num_fit(2,1,0,1,0,0,icat,iev)+2.*comp_num_fit(2,1,0,1,1,0,icat,iev)+2.*comp_num_fit(2,1,0,2,0,0,icat,iev)+2.*comp_num_fit(2,1,1,0,0,0,icat,iev)+2.*comp_num_fit(2,1,1,0,1,0,icat,iev)+2.*comp_num_fit(2,1,1,0,2,0,icat,iev)
+2.*comp_num_fit(2,1,1,1,0,0,icat,iev)+2.*comp_num_fit(2,1,1,1,1,0,icat,iev)+2.*comp_num_fit(2,1,1,1,1,1,icat,iev)+2.*comp_num_fit(2,1,1,1,2,0,icat,iev)+2.*comp_num_fit(2,1,1,2,0,0,icat,iev)+2.*comp_num_fit(2,1,1,2,1,0,icat,iev)
+2.*comp_num_fit(2,1,1,2,2,0,icat,iev)+2.*comp_num_fit(2,1,2,0,0,0,icat,iev)+2.*comp_num_fit(2,1,2,0,1,0,icat,iev)+2.*comp_num_fit(2,1,2,0,2,0,icat,iev)+2.*comp_num_fit(2,1,2,1,0,0,icat,iev)+2.*comp_num_fit(2,1,2,1,1,0,icat,iev)
+2.*comp_num_fit(2,1,2,1,1,1,icat,iev)+2.*comp_num_fit(2,1,2,1,1,2,icat,iev)+2.*comp_num_fit(2,1,2,1,2,0,icat,iev)+2.*comp_num_fit(2,1,2,1,2,1,icat,iev)+2.*comp_num_fit(2,1,2,2,0,0,icat,iev)+2.*comp_num_fit(2,1,2,2,1,0,icat,iev)
+2.*comp_num_fit(2,1,2,2,1,1,icat,iev)+2.*comp_num_fit(2,1,2,2,2,0,icat,iev)+2.*comp_num_fit(2,1,2,2,2,1,icat,iev)+2.*comp_num_fit(2,2,0,0,0,0,icat,iev)+2.*comp_num_fit(2,2,0,0,1,0,icat,iev)+2.*comp_num_fit(2,2,0,0,2,0,icat,iev)
+2.*comp_num_fit(2,2,0,1,0,0,icat,iev)+2.*comp_num_fit(2,2,0,1,1,0,icat,iev)+2.*comp_num_fit(2,2,0,1,2,0,icat,iev)+2.*comp_num_fit(2,2,0,2,0,0,icat,iev)+2.*comp_num_fit(2,2,0,2,1,0,icat,iev)+2.*comp_num_fit(2,2,1,0,0,0,icat,iev)
+2.*comp_num_fit(2,2,1,0,1,0,icat,iev)+2.*comp_num_fit(2,2,1,0,2,0,icat,iev)+2.*comp_num_fit(2,2,1,1,0,0,icat,iev)+2.*comp_num_fit(2,2,1,1,1,0,icat,iev)+2.*comp_num_fit(2,2,1,1,1,1,icat,iev)+2.*comp_num_fit(2,2,1,1,2,0,icat,iev)
+2.*comp_num_fit(2,2,1,1,2,1,icat,iev)+2.*comp_num_fit(2,2,1,2,0,0,icat,iev)+2.*comp_num_fit(2,2,1,2,1,0,icat,iev)+2.*comp_num_fit(2,2,1,2,1,1,icat,iev)+2.*comp_num_fit(2,2,1,2,2,0,icat,iev)+2.*comp_num_fit(2,2,2,0,0,0,icat,iev)
+2.*comp_num_fit(2,2,2,0,1,0,icat,iev)+2.*comp_num_fit(2,2,2,0,2,0,icat,iev)+2.*comp_num_fit(2,2,2,1,0,0,icat,iev)+2.*comp_num_fit(2,2,2,1,1,0,icat,iev)+2.*comp_num_fit(2,2,2,1,1,1,icat,iev)+2.*comp_num_fit(2,2,2,1,1,2,icat,iev)
+2.*comp_num_fit(2,2,2,1,2,0,icat,iev)+2.*comp_num_fit(2,2,2,1,2,1,icat,iev)+2.*comp_num_fit(2,2,2,1,2,2,icat,iev)+2.*comp_num_fit(2,2,2,2,0,0,icat,iev)+2.*comp_num_fit(2,2,2,2,1,0,icat,iev)+2.*comp_num_fit(2,2,2,2,1,1,icat,iev)
+2.*comp_num_fit(2,2,2,2,1,2,icat,iev)+2.*comp_num_fit(2,2,2,2,2,0,icat,iev)+2.*comp_num_fit(2,2,2,2,2,1,icat,iev)+2.*comp_num_fit(2,2,3,0,0,0,icat,iev)+2.*comp_num_fit(2,2,3,0,1,0,icat,iev)+2.*comp_num_fit(2,2,3,0,2,0,icat,iev)
+2.*comp_num_fit(2,2,3,1,0,0,icat,iev)+2.*comp_num_fit(2,2,3,1,1,0,icat,iev)+2.*comp_num_fit(2,2,3,1,1,1,icat,iev)+2.*comp_num_fit(2,2,3,1,1,2,icat,iev)+2.*comp_num_fit(2,2,3,1,2,0,icat,iev)+2.*comp_num_fit(2,2,3,1,2,1,icat,iev)
+2.*comp_num_fit(2,2,3,1,2,2,icat,iev)+2.*comp_num_fit(2,2,3,2,0,0,icat,iev)+2.*comp_num_fit(2,2,3,2,1,0,icat,iev)+2.*comp_num_fit(2,2,3,2,1,1,icat,iev)+2.*comp_num_fit(2,2,3,2,1,2,icat,iev)+2.*comp_num_fit(2,2,3,2,2,0,icat,iev)
+2.*comp_num_fit(2,2,3,2,2,1,icat,iev)+2.*comp_num_fit(2,2,3,2,2,2,icat,iev)+2.*comp_num_fit(2,2,4,0,0,0,icat,iev)+2.*comp_num_fit(2,2,4,0,1,0,icat,iev)+2.*comp_num_fit(2,2,4,0,2,0,icat,iev)+2.*comp_num_fit(2,2,4,1,0,0,icat,iev)
+2.*comp_num_fit(2,2,4,1,1,0,icat,iev)+2.*comp_num_fit(2,2,4,1,1,1,icat,iev)+2.*comp_num_fit(2,2,4,1,1,2,icat,iev)+2.*comp_num_fit(2,2,4,1,2,0,icat,iev)+2.*comp_num_fit(2,2,4,1,2,1,icat,iev)+2.*comp_num_fit(2,2,4,1,2,2,icat,iev)
+2.*comp_num_fit(2,2,4,2,0,0,icat,iev)+2.*comp_num_fit(2,2,4,2,1,0,icat,iev)+2.*comp_num_fit(2,2,4,2,1,1,icat,iev)+2.*comp_num_fit(2,2,4,2,1,2,icat,iev)+2.*comp_num_fit(2,2,4,2,2,0,icat,iev)+2.*comp_num_fit(2,2,4,2,2,1,icat,iev)
+2.*comp_num_fit(2,2,4,2,2,2,icat,iev)+2.*comp_num_fit(2,2,4,2,2,3,icat,iev);

 }

__device__ double den_fit(int icat, int iev) {

   return comp_den_fit(0,0,0,0,0,0,icat,iev)+comp_den_fit(0,1,0,0,1,0,icat,iev)+comp_den_fit(0,2,0,0,2,0,icat,iev)+comp_den_fit(1,0,0,1,0,0,icat,iev)+comp_den_fit(1,1,0,1,1,0,icat,iev)+comp_den_fit(1,1,1,1,1,1,icat,iev)
+comp_den_fit(1,1,2,1,1,2,icat,iev)+comp_den_fit(1,2,0,1,2,0,icat,iev)+comp_den_fit(1,2,1,1,2,1,icat,iev)+comp_den_fit(1,2,2,1,2,2,icat,iev)+comp_den_fit(2,0,0,2,0,0,icat,iev)+comp_den_fit(2,1,0,2,1,0,icat,iev)+comp_den_fit(2,1,1,2,1,1,icat,iev)
+comp_den_fit(2,1,2,2,1,2,icat,iev)+comp_den_fit(2,2,0,2,2,0,icat,iev)+comp_den_fit(2,2,1,2,2,1,icat,iev)+comp_den_fit(2,2,2,2,2,2,icat,iev)+comp_den_fit(2,2,3,2,2,3,icat,iev)+comp_den_fit(2,2,4,2,2,4,icat,iev)+2.*comp_den_fit(0,1,0,0,0,0,icat,iev)
+2.*comp_den_fit(0,1,0,1,0,0,icat,iev)+2.*comp_den_fit(0,1,0,2,0,0,icat,iev)+2.*comp_den_fit(0,2,0,0,0,0,icat,iev)+2.*comp_den_fit(0,2,0,0,1,0,icat,iev)+2.*comp_den_fit(0,2,0,1,0,0,icat,iev)+2.*comp_den_fit(0,2,0,1,1,0,icat,iev)
+2.*comp_den_fit(0,2,0,2,0,0,icat,iev)+2.*comp_den_fit(0,2,0,2,1,0,icat,iev)+2.*comp_den_fit(1,0,0,0,0,0,icat,iev)+2.*comp_den_fit(1,1,0,0,0,0,icat,iev)+2.*comp_den_fit(1,1,0,0,1,0,icat,iev)+2.*comp_den_fit(1,1,0,1,0,0,icat,iev)
+2.*comp_den_fit(1,1,0,2,0,0,icat,iev)+2.*comp_den_fit(1,1,1,0,0,0,icat,iev)+2.*comp_den_fit(1,1,1,0,1,0,icat,iev)+2.*comp_den_fit(1,1,1,0,2,0,icat,iev)+2.*comp_den_fit(1,1,1,1,0,0,icat,iev)+2.*comp_den_fit(1,1,1,1,1,0,icat,iev)
+2.*comp_den_fit(1,1,1,1,2,0,icat,iev)+2.*comp_den_fit(1,1,1,2,0,0,icat,iev)+2.*comp_den_fit(1,1,1,2,1,0,icat,iev)+2.*comp_den_fit(1,1,1,2,2,0,icat,iev)+2.*comp_den_fit(1,1,2,0,0,0,icat,iev)+2.*comp_den_fit(1,1,2,0,1,0,icat,iev)
+2.*comp_den_fit(1,1,2,0,2,0,icat,iev)+2.*comp_den_fit(1,1,2,1,0,0,icat,iev)+2.*comp_den_fit(1,1,2,1,1,0,icat,iev)+2.*comp_den_fit(1,1,2,1,1,1,icat,iev)+2.*comp_den_fit(1,1,2,1,2,0,icat,iev)+2.*comp_den_fit(1,1,2,1,2,1,icat,iev)
+2.*comp_den_fit(1,1,2,2,0,0,icat,iev)+2.*comp_den_fit(1,1,2,2,1,0,icat,iev)+2.*comp_den_fit(1,1,2,2,1,1,icat,iev)+2.*comp_den_fit(1,1,2,2,2,0,icat,iev)+2.*comp_den_fit(1,1,2,2,2,1,icat,iev)+2.*comp_den_fit(1,2,0,0,0,0,icat,iev)
+2.*comp_den_fit(1,2,0,0,1,0,icat,iev)+2.*comp_den_fit(1,2,0,0,2,0,icat,iev)+2.*comp_den_fit(1,2,0,1,0,0,icat,iev)+2.*comp_den_fit(1,2,0,1,1,0,icat,iev)+2.*comp_den_fit(1,2,0,2,0,0,icat,iev)+2.*comp_den_fit(1,2,0,2,1,0,icat,iev)
+2.*comp_den_fit(1,2,1,0,0,0,icat,iev)+2.*comp_den_fit(1,2,1,0,1,0,icat,iev)+2.*comp_den_fit(1,2,1,0,2,0,icat,iev)+2.*comp_den_fit(1,2,1,1,0,0,icat,iev)+2.*comp_den_fit(1,2,1,1,1,0,icat,iev)+2.*comp_den_fit(1,2,1,1,1,1,icat,iev)
+2.*comp_den_fit(1,2,1,1,2,0,icat,iev)+2.*comp_den_fit(1,2,1,2,0,0,icat,iev)+2.*comp_den_fit(1,2,1,2,1,0,icat,iev)+2.*comp_den_fit(1,2,1,2,1,1,icat,iev)+2.*comp_den_fit(1,2,1,2,2,0,icat,iev)+2.*comp_den_fit(1,2,2,0,0,0,icat,iev)
+2.*comp_den_fit(1,2,2,0,1,0,icat,iev)+2.*comp_den_fit(1,2,2,0,2,0,icat,iev)+2.*comp_den_fit(1,2,2,1,0,0,icat,iev)+2.*comp_den_fit(1,2,2,1,1,0,icat,iev)+2.*comp_den_fit(1,2,2,1,1,1,icat,iev)+2.*comp_den_fit(1,2,2,1,1,2,icat,iev)
+2.*comp_den_fit(1,2,2,1,2,0,icat,iev)+2.*comp_den_fit(1,2,2,1,2,1,icat,iev)+2.*comp_den_fit(1,2,2,2,0,0,icat,iev)+2.*comp_den_fit(1,2,2,2,1,0,icat,iev)+2.*comp_den_fit(1,2,2,2,1,1,icat,iev)+2.*comp_den_fit(1,2,2,2,1,2,icat,iev)
+2.*comp_den_fit(1,2,2,2,2,0,icat,iev)+2.*comp_den_fit(1,2,2,2,2,1,icat,iev)+2.*comp_den_fit(2,0,0,0,0,0,icat,iev)+2.*comp_den_fit(2,0,0,1,0,0,icat,iev)+2.*comp_den_fit(2,1,0,0,0,0,icat,iev)+2.*comp_den_fit(2,1,0,0,1,0,icat,iev)
+2.*comp_den_fit(2,1,0,1,0,0,icat,iev)+2.*comp_den_fit(2,1,0,1,1,0,icat,iev)+2.*comp_den_fit(2,1,0,2,0,0,icat,iev)+2.*comp_den_fit(2,1,1,0,0,0,icat,iev)+2.*comp_den_fit(2,1,1,0,1,0,icat,iev)+2.*comp_den_fit(2,1,1,0,2,0,icat,iev)
+2.*comp_den_fit(2,1,1,1,0,0,icat,iev)+2.*comp_den_fit(2,1,1,1,1,0,icat,iev)+2.*comp_den_fit(2,1,1,1,1,1,icat,iev)+2.*comp_den_fit(2,1,1,1,2,0,icat,iev)+2.*comp_den_fit(2,1,1,2,0,0,icat,iev)+2.*comp_den_fit(2,1,1,2,1,0,icat,iev)
+2.*comp_den_fit(2,1,1,2,2,0,icat,iev)+2.*comp_den_fit(2,1,2,0,0,0,icat,iev)+2.*comp_den_fit(2,1,2,0,1,0,icat,iev)+2.*comp_den_fit(2,1,2,0,2,0,icat,iev)+2.*comp_den_fit(2,1,2,1,0,0,icat,iev)+2.*comp_den_fit(2,1,2,1,1,0,icat,iev)
+2.*comp_den_fit(2,1,2,1,1,1,icat,iev)+2.*comp_den_fit(2,1,2,1,1,2,icat,iev)+2.*comp_den_fit(2,1,2,1,2,0,icat,iev)+2.*comp_den_fit(2,1,2,1,2,1,icat,iev)+2.*comp_den_fit(2,1,2,2,0,0,icat,iev)+2.*comp_den_fit(2,1,2,2,1,0,icat,iev)
+2.*comp_den_fit(2,1,2,2,1,1,icat,iev)+2.*comp_den_fit(2,1,2,2,2,0,icat,iev)+2.*comp_den_fit(2,1,2,2,2,1,icat,iev)+2.*comp_den_fit(2,2,0,0,0,0,icat,iev)+2.*comp_den_fit(2,2,0,0,1,0,icat,iev)+2.*comp_den_fit(2,2,0,0,2,0,icat,iev)
+2.*comp_den_fit(2,2,0,1,0,0,icat,iev)+2.*comp_den_fit(2,2,0,1,1,0,icat,iev)+2.*comp_den_fit(2,2,0,1,2,0,icat,iev)+2.*comp_den_fit(2,2,0,2,0,0,icat,iev)+2.*comp_den_fit(2,2,0,2,1,0,icat,iev)+2.*comp_den_fit(2,2,1,0,0,0,icat,iev)
+2.*comp_den_fit(2,2,1,0,1,0,icat,iev)+2.*comp_den_fit(2,2,1,0,2,0,icat,iev)+2.*comp_den_fit(2,2,1,1,0,0,icat,iev)+2.*comp_den_fit(2,2,1,1,1,0,icat,iev)+2.*comp_den_fit(2,2,1,1,1,1,icat,iev)+2.*comp_den_fit(2,2,1,1,2,0,icat,iev)
+2.*comp_den_fit(2,2,1,1,2,1,icat,iev)+2.*comp_den_fit(2,2,1,2,0,0,icat,iev)+2.*comp_den_fit(2,2,1,2,1,0,icat,iev)+2.*comp_den_fit(2,2,1,2,1,1,icat,iev)+2.*comp_den_fit(2,2,1,2,2,0,icat,iev)+2.*comp_den_fit(2,2,2,0,0,0,icat,iev)
+2.*comp_den_fit(2,2,2,0,1,0,icat,iev)+2.*comp_den_fit(2,2,2,0,2,0,icat,iev)+2.*comp_den_fit(2,2,2,1,0,0,icat,iev)+2.*comp_den_fit(2,2,2,1,1,0,icat,iev)+2.*comp_den_fit(2,2,2,1,1,1,icat,iev)+2.*comp_den_fit(2,2,2,1,1,2,icat,iev)
+2.*comp_den_fit(2,2,2,1,2,0,icat,iev)+2.*comp_den_fit(2,2,2,1,2,1,icat,iev)+2.*comp_den_fit(2,2,2,1,2,2,icat,iev)+2.*comp_den_fit(2,2,2,2,0,0,icat,iev)+2.*comp_den_fit(2,2,2,2,1,0,icat,iev)+2.*comp_den_fit(2,2,2,2,1,1,icat,iev)
+2.*comp_den_fit(2,2,2,2,1,2,icat,iev)+2.*comp_den_fit(2,2,2,2,2,0,icat,iev)+2.*comp_den_fit(2,2,2,2,2,1,icat,iev)+2.*comp_den_fit(2,2,3,0,0,0,icat,iev)+2.*comp_den_fit(2,2,3,0,1,0,icat,iev)+2.*comp_den_fit(2,2,3,0,2,0,icat,iev)
+2.*comp_den_fit(2,2,3,1,0,0,icat,iev)+2.*comp_den_fit(2,2,3,1,1,0,icat,iev)+2.*comp_den_fit(2,2,3,1,1,1,icat,iev)+2.*comp_den_fit(2,2,3,1,1,2,icat,iev)+2.*comp_den_fit(2,2,3,1,2,0,icat,iev)+2.*comp_den_fit(2,2,3,1,2,1,icat,iev)
+2.*comp_den_fit(2,2,3,1,2,2,icat,iev)+2.*comp_den_fit(2,2,3,2,0,0,icat,iev)+2.*comp_den_fit(2,2,3,2,1,0,icat,iev)+2.*comp_den_fit(2,2,3,2,1,1,icat,iev)+2.*comp_den_fit(2,2,3,2,1,2,icat,iev)+2.*comp_den_fit(2,2,3,2,2,0,icat,iev)
+2.*comp_den_fit(2,2,3,2,2,1,icat,iev)+2.*comp_den_fit(2,2,3,2,2,2,icat,iev)+2.*comp_den_fit(2,2,4,0,0,0,icat,iev)+2.*comp_den_fit(2,2,4,0,1,0,icat,iev)+2.*comp_den_fit(2,2,4,0,2,0,icat,iev)+2.*comp_den_fit(2,2,4,1,0,0,icat,iev)
+2.*comp_den_fit(2,2,4,1,1,0,icat,iev)+2.*comp_den_fit(2,2,4,1,1,1,icat,iev)+2.*comp_den_fit(2,2,4,1,1,2,icat,iev)+2.*comp_den_fit(2,2,4,1,2,0,icat,iev)+2.*comp_den_fit(2,2,4,1,2,1,icat,iev)+2.*comp_den_fit(2,2,4,1,2,2,icat,iev)
+2.*comp_den_fit(2,2,4,2,0,0,icat,iev)+2.*comp_den_fit(2,2,4,2,1,0,icat,iev)+2.*comp_den_fit(2,2,4,2,1,1,icat,iev)+2.*comp_den_fit(2,2,4,2,1,2,icat,iev)+2.*comp_den_fit(2,2,4,2,2,0,icat,iev)+2.*comp_den_fit(2,2,4,2,2,1,icat,iev)
+2.*comp_den_fit(2,2,4,2,2,2,icat,iev)+2.*comp_den_fit(2,2,4,2,2,3,icat,iev);

 }


// ##########################################
// PDF evaluator

__device__ void set_buffer_options(double *options, int icat) {

   wide_window = (int) options[0];
   year_opt[icat] = (int) options[1];
   trig_opt[icat] = (int) options[2];
   alt_fit = options[3];
   option = options[4];
   inftres = options[5];
   acctype = options[6];
   A_j1 = options[7];
   A_j2 = options[8];
   A_h = options[9];
   A_j1p = options[10];
   A_j2p = options[11];
   A_hp = options[12];
   qcomp = options[13];

 }

__device__ void set_buffer_amplitudes(double *re_amps, double *dirCP_asyms, double *im_amps, double *weak_phases, double *mixing_params, double *calib_params) {

   reA00 = re_amps[0];
   reA01 = re_amps[1];
   reA10 = re_amps[2];
   reA02 = re_amps[3];
   reA20 = re_amps[4];
   reA110 = re_amps[5];
   reA11par = re_amps[6];
   reA11perp = re_amps[7];
   reA120 = re_amps[8];
   reA12par = re_amps[9];
   reA12perp = re_amps[10];
   reA210 = re_amps[11];
   reA21par = re_amps[12];
   reA21perp = re_amps[13];
   reA220 = re_amps[14];
   reA22par = re_amps[15];
   reA22perp = re_amps[16];
   reA22par2 = re_amps[17];
   reA22perp2 = re_amps[18];

   DCP_SS = dirCP_asyms[0];
   DCP_SV = dirCP_asyms[1];
   DCP_VS = dirCP_asyms[2];
   DCP_ST = dirCP_asyms[3];
   DCP_TS = dirCP_asyms[4];
   DCP_VV = dirCP_asyms[5];
   DCP_VT = dirCP_asyms[6];
   DCP_TV = dirCP_asyms[7];
   DCP_TT = dirCP_asyms[8];

   imA00 = im_amps[0];
   imA01 = im_amps[1];
   imA10 = im_amps[2];
   imA02 = im_amps[3];
   imA20 = im_amps[4];
   imA110 = im_amps[5];
   imA11par = im_amps[6];
   imA11perp = im_amps[7];
   imA120 = im_amps[8];
   imA12par = im_amps[9];
   imA12perp = im_amps[10];
   imA210 = im_amps[11];
   imA21par = im_amps[12];
   imA21perp = im_amps[13];
   imA220 = im_amps[14];
   imA22par = im_amps[15];
   imA22perp = im_amps[16];
   imA22par2 = im_amps[17];
   imA22perp2 = im_amps[18];

   phis = weak_phases[0];
   dphi_SS = weak_phases[1];
   dphi_SV = weak_phases[2];
   dphi_VS = weak_phases[3];
   dphi_ST = weak_phases[4];
   dphi_TS = weak_phases[5];
   dphi_VT = weak_phases[6];
   dphi_TV = weak_phases[7];
   dphi_TT = weak_phases[8];

   delta_m_freq = mixing_params[0];
   gamma_Bs_freq = mixing_params[1];
   delta_gamma_freq = mixing_params[2];

   p0metac_tag_SSK = calib_params[0];
   p0metac_tag_OS = calib_params[1];
   Dp0half_tag_SSK = calib_params[2];
   Dp0half_tag_OS = calib_params[3];
   p1_tag_SSK = calib_params[4];
   p1_tag_OS = calib_params[5];
   Dp1half_tag_SSK = calib_params[6];
   Dp1half_tag_OS = calib_params[7];
   etac_tag_SSK = calib_params[8];
   etac_tag_OS = calib_params[9];
   deltatmean_tres_11 = calib_params[10];
   p0_tres_11 = calib_params[11];
   p1_tres_11 = calib_params[12];
   deltatmean_tres_12 = calib_params[13];
   p0_tres_12 = calib_params[14];
   p1_tres_12 = calib_params[15];
   mv = calib_params[16];
   ms = calib_params[17];
   mt = calib_params[18];
   gv = calib_params[19];
   gs = calib_params[20];
   gt = calib_params[21];
   res_mass = calib_params[22];

   if (wide_window == 0) {DCP_prod = -0.0101;}
   else {DCP_prod = -0.0072;}

   reAj1j2h_temp[0][0][0] = pycuda::real(Aj1j2h(0,0,0));
   reAj1j2h_temp[0][1][0] = pycuda::real(Aj1j2h(0,1,0));
   reAj1j2h_temp[1][0][0] = pycuda::real(Aj1j2h(1,0,0));
   reAj1j2h_temp[0][2][0] = pycuda::real(Aj1j2h(0,2,0));
   reAj1j2h_temp[2][0][0] = pycuda::real(Aj1j2h(2,0,0));
   reAj1j2h_temp[1][1][0] = pycuda::real(Aj1j2h(1,1,0));
   reAj1j2h_temp[1][1][1] = pycuda::real(Aj1j2h(1,1,1));
   reAj1j2h_temp[1][1][2] = pycuda::real(Aj1j2h(1,1,2));
   reAj1j2h_temp[1][2][0] = pycuda::real(Aj1j2h(1,2,0));
   reAj1j2h_temp[1][2][1] = pycuda::real(Aj1j2h(1,2,1));
   reAj1j2h_temp[1][2][2] = pycuda::real(Aj1j2h(1,2,2));
   reAj1j2h_temp[2][1][0] = pycuda::real(Aj1j2h(2,1,0));
   reAj1j2h_temp[2][1][1] = pycuda::real(Aj1j2h(2,1,1));
   reAj1j2h_temp[2][1][2] = pycuda::real(Aj1j2h(2,1,2));
   reAj1j2h_temp[2][2][0] = pycuda::real(Aj1j2h(2,2,0));
   reAj1j2h_temp[2][2][1] = pycuda::real(Aj1j2h(2,2,1));
   reAj1j2h_temp[2][2][2] = pycuda::real(Aj1j2h(2,2,2));
   reAj1j2h_temp[2][2][3] = pycuda::real(Aj1j2h(2,2,3));
   reAj1j2h_temp[2][2][4] = pycuda::real(Aj1j2h(2,2,4));
   imAj1j2h_temp[0][0][0] = pycuda::imag(Aj1j2h(0,0,0));
   imAj1j2h_temp[0][1][0] = pycuda::imag(Aj1j2h(0,1,0));
   imAj1j2h_temp[1][0][0] = pycuda::imag(Aj1j2h(1,0,0));
   imAj1j2h_temp[0][2][0] = pycuda::imag(Aj1j2h(0,2,0));
   imAj1j2h_temp[2][0][0] = pycuda::imag(Aj1j2h(2,0,0));
   imAj1j2h_temp[1][1][0] = pycuda::imag(Aj1j2h(1,1,0));
   imAj1j2h_temp[1][1][1] = pycuda::imag(Aj1j2h(1,1,1));
   imAj1j2h_temp[1][1][2] = pycuda::imag(Aj1j2h(1,1,2));
   imAj1j2h_temp[1][2][0] = pycuda::imag(Aj1j2h(1,2,0));
   imAj1j2h_temp[1][2][1] = pycuda::imag(Aj1j2h(1,2,1));
   imAj1j2h_temp[1][2][2] = pycuda::imag(Aj1j2h(1,2,2));
   imAj1j2h_temp[2][1][0] = pycuda::imag(Aj1j2h(2,1,0));
   imAj1j2h_temp[2][1][1] = pycuda::imag(Aj1j2h(2,1,1));
   imAj1j2h_temp[2][1][2] = pycuda::imag(Aj1j2h(2,1,2));
   imAj1j2h_temp[2][2][0] = pycuda::imag(Aj1j2h(2,2,0));
   imAj1j2h_temp[2][2][1] = pycuda::imag(Aj1j2h(2,2,1));
   imAj1j2h_temp[2][2][2] = pycuda::imag(Aj1j2h(2,2,2));
   imAj1j2h_temp[2][2][3] = pycuda::imag(Aj1j2h(2,2,3));
   imAj1j2h_temp[2][2][4] = pycuda::imag(Aj1j2h(2,2,4));
   reAbarj1j2h_temp[0][0][0] = pycuda::real(Abarj1j2h(0,0,0));
   reAbarj1j2h_temp[0][1][0] = pycuda::real(Abarj1j2h(0,1,0));
   reAbarj1j2h_temp[1][0][0] = pycuda::real(Abarj1j2h(1,0,0));
   reAbarj1j2h_temp[0][2][0] = pycuda::real(Abarj1j2h(0,2,0));
   reAbarj1j2h_temp[2][0][0] = pycuda::real(Abarj1j2h(2,0,0));
   reAbarj1j2h_temp[1][1][0] = pycuda::real(Abarj1j2h(1,1,0));
   reAbarj1j2h_temp[1][1][1] = pycuda::real(Abarj1j2h(1,1,1));
   reAbarj1j2h_temp[1][1][2] = pycuda::real(Abarj1j2h(1,1,2));
   reAbarj1j2h_temp[1][2][0] = pycuda::real(Abarj1j2h(1,2,0));
   reAbarj1j2h_temp[1][2][1] = pycuda::real(Abarj1j2h(1,2,1));
   reAbarj1j2h_temp[1][2][2] = pycuda::real(Abarj1j2h(1,2,2));
   reAbarj1j2h_temp[2][1][0] = pycuda::real(Abarj1j2h(2,1,0));
   reAbarj1j2h_temp[2][1][1] = pycuda::real(Abarj1j2h(2,1,1));
   reAbarj1j2h_temp[2][1][2] = pycuda::real(Abarj1j2h(2,1,2));
   reAbarj1j2h_temp[2][2][0] = pycuda::real(Abarj1j2h(2,2,0));
   reAbarj1j2h_temp[2][2][1] = pycuda::real(Abarj1j2h(2,2,1));
   reAbarj1j2h_temp[2][2][2] = pycuda::real(Abarj1j2h(2,2,2));
   reAbarj1j2h_temp[2][2][3] = pycuda::real(Abarj1j2h(2,2,3));
   reAbarj1j2h_temp[2][2][4] = pycuda::real(Abarj1j2h(2,2,4));
   imAbarj1j2h_temp[0][0][0] = pycuda::imag(Abarj1j2h(0,0,0));
   imAbarj1j2h_temp[0][1][0] = pycuda::imag(Abarj1j2h(0,1,0));
   imAbarj1j2h_temp[1][0][0] = pycuda::imag(Abarj1j2h(1,0,0));
   imAbarj1j2h_temp[0][2][0] = pycuda::imag(Abarj1j2h(0,2,0));
   imAbarj1j2h_temp[2][0][0] = pycuda::imag(Abarj1j2h(2,0,0));
   imAbarj1j2h_temp[1][1][0] = pycuda::imag(Abarj1j2h(1,1,0));
   imAbarj1j2h_temp[1][1][1] = pycuda::imag(Abarj1j2h(1,1,1));
   imAbarj1j2h_temp[1][1][2] = pycuda::imag(Abarj1j2h(1,1,2));
   imAbarj1j2h_temp[1][2][0] = pycuda::imag(Abarj1j2h(1,2,0));
   imAbarj1j2h_temp[1][2][1] = pycuda::imag(Abarj1j2h(1,2,1));
   imAbarj1j2h_temp[1][2][2] = pycuda::imag(Abarj1j2h(1,2,2));
   imAbarj1j2h_temp[2][1][0] = pycuda::imag(Abarj1j2h(2,1,0));
   imAbarj1j2h_temp[2][1][1] = pycuda::imag(Abarj1j2h(2,1,1));
   imAbarj1j2h_temp[2][1][2] = pycuda::imag(Abarj1j2h(2,1,2));
   imAbarj1j2h_temp[2][2][0] = pycuda::imag(Abarj1j2h(2,2,0));
   imAbarj1j2h_temp[2][2][1] = pycuda::imag(Abarj1j2h(2,2,1));
   imAbarj1j2h_temp[2][2][2] = pycuda::imag(Abarj1j2h(2,2,2));
   imAbarj1j2h_temp[2][2][3] = pycuda::imag(Abarj1j2h(2,2,3));
   imAbarj1j2h_temp[2][2][4] = pycuda::imag(Abarj1j2h(2,2,4));

 }

__device__ void set_buffer_differential_terms(double *mass_integrals, int icat, int iev) {

   Im00 = mass_integrals[0];
   Im01 = mass_integrals[1];
   Im10 = mass_integrals[2];
   Im02 = mass_integrals[3];
   Im20 = mass_integrals[4];
   Im11 = mass_integrals[5];
   Im12 = mass_integrals[6];
   Im21 = mass_integrals[7];
   Im22 = mass_integrals[8];

   double f1,f2,s1,s2,x1,x2;

   if (acctype == 3) {
      f1 = 1.;
      f2 = 0.;
      s1 = p0_tres_12+p1_tres_12*(t_err[icat][iev]-deltatmean_tres_12);
      s2 = 1.;
      x1 = t[icat][iev]/(sqrt(2.)*s1);
      x2 = t[icat][iev]/(sqrt(2.)*s2);
   }
   else {
      f1 = 1.;
      f2 = 0.;
      if (year_opt == 0) {s1 = p0_tres_11+p1_tres_11*(t_err[icat][iev]-deltatmean_tres_11);}
      else {s1 = p0_tres_12+p1_tres_12*(t_err[icat][iev]-deltatmean_tres_12);}
      s2 = 1.;
      x1 = t[icat][iev]/(sqrt(2.)*s1);
      x2 = t[icat][iev]/(sqrt(2.)*s2);
   }

   pycuda::complex<double> z1_hyper_plus = s1/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq-0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z2_hyper_plus = s2/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq-0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z1_hyper_minus = s1/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq+0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z2_hyper_minus = s2/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq+0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z1_trigo = s1/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq,-delta_m_freq);
   pycuda::complex<double> z2_trigo = s2/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq,-delta_m_freq);

   double conv_exp_hyper_plus = pycuda::real(f1*conv_exp(x1,z1_hyper_plus)+f2*conv_exp(x2,z2_hyper_plus));
   double conv_exp_hyper_minus = pycuda::real(f1*conv_exp(x1,z1_hyper_minus)+f2*conv_exp(x2,z2_hyper_minus));
   pycuda::complex<double> conv_exp_trigo = f1*conv_exp(x1,z1_trigo)+f2*conv_exp(x2,z2_trigo);

   T_cosh_temp[icat][iev] = 0.5*(conv_exp_hyper_plus + conv_exp_hyper_minus);
   T_sinh_temp[icat][iev] = 0.5*(conv_exp_hyper_plus - conv_exp_hyper_minus);
   T_cos_temp[icat][iev] = pycuda::real(conv_exp_trigo);
   T_sin_temp[icat][iev] = pycuda::imag(conv_exp_trigo);

   zeta_temp[icat][iev] = zeta(decision_SSK[icat][iev],decision_OS[icat][iev],etamistag_SSK[icat][iev],etamistag_OS[icat][iev]);
   DCP_tzero_temp[icat][iev] = DCP_tzero(decision_SSK[icat][iev],decision_OS[icat][iev],etamistag_SSK[icat][iev],etamistag_OS[icat][iev]);

   for (int i=0; i<18; ++i) {fi_cos1_temp[i][icat][iev] = fi(cos1[icat][iev],i+1);}
   for (int i=0; i<18; ++i) {fi_cos2_temp[i][icat][iev] = fi(cos2[icat][iev],i+1);}
   for (int i=0; i<15; ++i) {gi_temp[i][icat][iev] = gi(phi[icat][iev],i+1);}

   for (int j1=0; j1<3; ++j1) {
      for (int j2=0; j2<3; ++j2) {
         pycuda::complex<double> M_temp = Mj1j2(m1[icat][iev],m2[icat][iev],j1,j2);
         reMj1j2_temp[j1][j2][icat][iev] = pycuda::real(M_temp);
         imMj1j2_temp[j1][j2][icat][iev] = pycuda::imag(M_temp);
      }
   }

   phasespace_temp[icat][iev] = phasespace(m1[icat][iev],m2[icat][iev]);

 }

__device__ double Factorial(int n) {

   if(n <= 0) return 1.;
   double x = 1;
   int b = 0;
   do {
      b++;
      x *= b;
   } while(b!=n);
   return x;

 }

__device__ void set_buffer_integral_terms(int icat, int iev) {

   double s1_deltat;

   if (acctype == 3) {
      s1_deltat = p0_tres_12+p1_tres_12*(t_err[icat][iev]-deltatmean_tres_12);
      for (int i=0; i<6; ++i) {spl_knot_vector[year_opt[icat]][trig_opt[icat]][i] = knot_gen(wide_window,i);}
   }

   else {
      if (year_opt == 0) {s1_deltat = p0_tres_11+p1_tres_11*(t_err[icat][iev]-deltatmean_tres_11);}
      else {s1_deltat = p0_tres_12+p1_tres_12*(t_err[icat][iev]-deltatmean_tres_12);}
      for (int i=0; i<6; ++i) {spl_knot_vector[year_opt[icat]][trig_opt[icat]][i] = spline_knot(wide_window,i);}
   }

   pycuda::complex<double> z1_hyper_plus_deltat = s1_deltat/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq-0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z1_hyper_minus_deltat = s1_deltat/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq+0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z1_trigo_deltat = s1_deltat/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq,-delta_m_freq);

   double spl_knot_x1_vector_deltat[6];
   double spl_coef_array_deltat[5][4][4][4];

   if (acctype == 1 or acctype == 2) {
      spl_knot_x1_vector_deltat[0] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][0]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[1] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][1]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[2] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][2]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[3] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][3]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[4] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][4]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[5] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][5]/(sqrt(2.)*s1_deltat);
      for (int ibin=0; ibin<5; ++ibin) {
         for (int k=0; k<4; ++k) {
            for (int i=0; i<(k+1); ++i) {
               for (int j=0; j<(i+1); ++j) {
                  spl_coef_array_deltat[ibin][k][i][j] = spline_coef(year_opt[icat],trig_opt[icat],wide_window,ibin,k)*Factorial(k)/Factorial(k-i)/Factorial(i-j)/Factorial(j)*pow(s1_deltat/sqrt(2.),i+1)*pow(0.,k-i);
               }
            }
         }
      }
   }
   else if (acctype == 3) {
      spl_knot_x1_vector_deltat[0] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][0]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[1] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][1]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[2] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][2]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[3] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][3]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[4] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][4]/(sqrt(2.)*s1_deltat);
      spl_knot_x1_vector_deltat[5] = spl_knot_vector[year_opt[icat]][trig_opt[icat]][5]/(sqrt(2.)*s1_deltat);
      for (int ibin=0; ibin<5; ++ibin) {
         for (int k=0; k<4; ++k) {
            for (int i=0; i<(k+1); ++i) {
               for (int j=0; j<(i+1); ++j) {
                  spl_coef_array_deltat[ibin][k][i][j] = coef_gen(wide_window,ibin,k)*Factorial(k)/Factorial(k-i)/Factorial(i-j)/Factorial(j)*pow(s1_deltat/sqrt(2.),i+1)*pow(0.,k-i);
               }
            }
         }
      }
   }

   double integral_conv_exp_hyper_plus_deltat = 0;
   double integral_conv_exp_hyper_minus_deltat = 0;
   pycuda::complex<double> integral_conv_exp_trigo_deltat = pycuda::complex<double>(0.,0.);

   if (acctype == 0) {
      integral_conv_exp_hyper_plus_deltat += pycuda::real(s1_deltat/sqrt(2.)*Mn(0.,12./(sqrt(2.)*s1_deltat),z1_hyper_plus_deltat,0)*Kn(z1_hyper_plus_deltat,0));
      integral_conv_exp_hyper_minus_deltat += pycuda::real(s1_deltat/sqrt(2.)*Mn(0.,12./(sqrt(2.)*s1_deltat),z1_hyper_minus_deltat,0)*Kn(z1_hyper_minus_deltat,0));
      integral_conv_exp_trigo_deltat += s1_deltat/sqrt(2.)*Mn(0.,12./(sqrt(2.)*s1_deltat),z1_trigo_deltat,0)*Kn(z1_trigo_deltat,0);
   }
   else {
      for (int ibin=0; ibin<5; ++ibin) {
         for (int k=0; k<4; ++k) {
            for (int i=0; i<(k+1); ++i) {
               for (int j=0; j<(i+1); ++j) {
                  integral_conv_exp_hyper_plus_deltat += pycuda::real(spl_coef_array_deltat[ibin][k][i][j]*Mn(spl_knot_x1_vector_deltat[ibin],spl_knot_x1_vector_deltat[ibin+1],z1_hyper_plus_deltat,i-j)*Kn(z1_hyper_plus_deltat,j));
                  integral_conv_exp_hyper_minus_deltat += pycuda::real(spl_coef_array_deltat[ibin][k][i][j]*Mn(spl_knot_x1_vector_deltat[ibin],spl_knot_x1_vector_deltat[ibin+1],z1_hyper_minus_deltat,i-j)*Kn(z1_hyper_minus_deltat,j));
                  integral_conv_exp_trigo_deltat += spl_coef_array_deltat[ibin][k][i][j]*Mn(spl_knot_x1_vector_deltat[ibin],spl_knot_x1_vector_deltat[ibin+1],z1_trigo_deltat,i-j)*Kn(z1_trigo_deltat,j);
               }
            }
         }
      }
   }

   IT_cosh_temp_deltat[icat][iev] = 0.5*(integral_conv_exp_hyper_plus_deltat + integral_conv_exp_hyper_minus_deltat);
   IT_sinh_temp_deltat[icat][iev] = 0.5*(integral_conv_exp_hyper_plus_deltat - integral_conv_exp_hyper_minus_deltat);
   IT_cos_temp_deltat[icat][iev] = pycuda::real(integral_conv_exp_trigo_deltat);
   IT_sin_temp_deltat[icat][iev] = pycuda::imag(integral_conv_exp_trigo_deltat);

 }

__global__ void evaluate(double *data, double *out, double *check, double *options, double *re_amps, double *dirCP_asyms, double *im_amps, double *weak_phases, double *mixing_params, double *calib_params, double *mass_integrals, int Nevt) {

   int row = threadIdx.x + blockDim.x * blockIdx.x;
   if (row >= Nevt) { return;}
   //row = 0;

   int cat_index;
   if (options[1]==0) {
      if (options[2]==0) {cat_index = 0;}
      else {cat_index = 1;}
   }
   else {
      if (options[2]==0) {cat_index = 2;}
      else {cat_index = 3;}
   }

   set_buffer_options(options,cat_index);
   set_buffer_amplitudes(re_amps,dirCP_asyms,im_amps,weak_phases,mixing_params,calib_params);

   int i0 = row*12;
   decision_SSK[cat_index][row] = (int) data[0 + i0];
   decision_OS[cat_index][row] = (int) data[1 + i0];
   etamistag_SSK[cat_index][row] = data[2 + i0];
   etamistag_OS[cat_index][row] = data[3 + i0];
   m1[cat_index][row] = data[4 + i0];
   m2[cat_index][row] = data[5 + i0];
   cos1[cat_index][row] = data[6 + i0];
   cos2[cat_index][row] = data[7 + i0];
   phi[cat_index][row] = data[8 + i0];
   t[cat_index][row] = data[9 + i0];
   t_err[cat_index][row] = data[10 + i0];
   double ev_weight = data[11 + i0];

   set_buffer_differential_terms(mass_integrals,cat_index,row);
   set_buffer_integral_terms(cat_index,row);

   double num_fit_temp = num_fit(cat_index,row);
   double den_fit_temp = den_fit(cat_index,row);

   if (num_fit_temp/den_fit_temp<=0) {out[row] = -10000000000;}
   else {out[row] = ev_weight*(log(num_fit_temp/den_fit_temp));}

   check[0] = num_fit_temp;
   check[1] = den_fit_temp;
   check[2] = ev_weight*(log(num_fit_temp/den_fit_temp));

 }


// ##########################################
// Event generator

__device__ double Ifi(int i) {

   if (i == 1) {return If1;}
   else if (i == 2) {return If2;}
   else if (i == 3) {return If3;}
   else if (i == 4) {return If4;}
   else if (i == 5) {return If5;}
   else if (i == 6) {return If6;}
   else if (i == 7) {return If7;}
   else if (i == 8) {return If8;}
   else if (i == 9) {return If9;}
   else if (i == 10) {return If10;}
   else if (i == 11) {return If11;}
   else if (i == 12) {return If12;}
   else if (i == 13) {return If13;}
   else if (i == 14) {return If14;}
   else if (i == 15) {return If15;}
   else if (i == 16) {return If16;}
   else if (i == 17) {return If17;}
   else if (i == 18) {return If18;}

   return 0.;

 }

__device__ double Igi(int i) {

   if (i == 1) {return 2.*pi;}
   else if (i == 2) {return 0.;}
   else if (i == 3) {return 0.;}
   else if (i == 4) {return pi;}
   else if (i == 5) {return 0;}
   else if (i == 6) {return pi;}
   else if (i == 7) {return 0.;}
   else if (i == 8) {return 0.;}
   else if (i == 9) {return 0.;}
   else if (i == 10) {return 0.;}
   else if (i == 11) {return 0.;}
   else if (i == 12) {return 0.;}
   else if (i == 13) {return pi;}
   else if (i == 14) {return 0.;}
   else if (i == 15) {return pi;}

   return 0.;

 }

__device__ double Ifjjphhp(int j, int jp, int h, int hp) {

   return Ifi(fjjphhpindexdict[j][jp][h][hp]);

 }

__device__ double Ighhp(int h, int hp) {

   return Igi(ghhpindexdict[h][hp]);

 }

__device__ double Gaus(double x, double mean, double sigma, bool norm = 0) {
   if (sigma == 0) return 1.e30;
   double arg = (x-mean)/sigma;
   double res = exp(-0.5*arg*arg);
   if (!norm) return res;
   return res/(2.50662827463100024*sigma);
 }

__device__ double ran_gamma(curandState localState, double a, double b) {

   if (a < 1){
      double u = curand_uniform_double(&localState);
      return ran_gamma (localState, 1.0 + a, b) * pow (u, 1.0 / a);
   }

   {
      double x, v, u;
      double d = a - 1.0 / 3.0;
      double c = (1.0 / 3.0) / sqrt (d);

      while (1){
         do{
            x = curand_normal_double(&localState);
            v = 1.0 + c * x;
         }
         while (v <= 0);
         v = v * v * v;
         u = curand_uniform_double(&localState);
         if (u < 1 - 0.0331 * x * x * x * x)
            break;
         if (log (u) < 0.5 * x * x + d * (1 - v + log (v)))
            break;
      }
      return b * d * v;
   }

 }

__device__ double ran_P_deltat(curandState localState) {

   double result;
   while (1) {
      result = ran_gamma(localState,gamma1_dt,beta1_dt);
      if (result>=0. and result<=0.1) {break;}
   }
   return result;

 }

__device__ double P_eta_SSK(double eta) {
   if (eta < 0.5) {return c_SSK*Gaus(eta,mu1_SSK,sigma1_SSK)+(1.-c_SSK)*Gaus(eta,mu2_SSK,sigma2_SSK);}
   else {return 0.;}
 }

__device__ double P_eta_OS(double eta) {
   if (eta < 0.5) {return c_OS*Gaus(eta,mu1_OS,sigma1_OS)+(1.-c_OS)*Gaus(eta,mu2_OS,sigma2_OS);}
   else {return 0.;}
 }

__global__ void get_max_P_eta_SSK(double *out) {

   double funmax = 0;
   double etavar;
   double funvar;
   for (int i=0; i<10000; i++) {
      etavar = i/20000.;
      funvar = P_eta_SSK(etavar);
      if (funvar > funmax) {funmax = funvar;}
   }
   out[0] = 1.1*funmax;
   return;

 }

__global__ void get_max_P_eta_OS(double *out) {

   double funmax = 0;
   double etavar;
   double funvar;
   for (int i=0; i<10000; i++) {
      etavar = i/20000.;
      funvar = P_eta_OS(etavar);
      if (funvar > funmax) {funmax = funvar;}
   }
   out[0] = 1.1*funmax;
   return;

 }

__global__ void set_generator(double *options, double *re_amps, double *dirCP_asyms, double *im_amps, double *weak_phases, double *mixing_params, double *calib_params, double *cond_distr_params, double *mass_integrals, double *ang_integrals) {

   set_buffer_options(options,0);
   year_opt[0] = 0;
   trig_opt[0] = 0;
   set_buffer_amplitudes(re_amps,dirCP_asyms,im_amps,weak_phases,mixing_params,calib_params);

   tag_eff_SSK = cond_distr_params[0];
   mu1_SSK = cond_distr_params[1];
   sigma1_SSK = cond_distr_params[2];
   c_SSK = cond_distr_params[3];
   mu2_SSK = cond_distr_params[4];
   sigma2_SSK = cond_distr_params[5];
   tag_eff_OS = cond_distr_params[6];
   mu1_OS = cond_distr_params[7];
   sigma1_OS = cond_distr_params[8];
   c_OS = cond_distr_params[9];
   mu2_OS = cond_distr_params[10];
   sigma2_OS = cond_distr_params[11];
   gamma1_dt = cond_distr_params[12];
   beta1_dt = cond_distr_params[13];
   c_dt = cond_distr_params[14];
   gamma2_dt = cond_distr_params[15];
   beta2_dt = cond_distr_params[16];

   Im00 = mass_integrals[0];
   Im01 = mass_integrals[1];
   Im10 = mass_integrals[2];
   Im02 = mass_integrals[3];
   Im20 = mass_integrals[4];
   Im11 = mass_integrals[5];
   Im12 = mass_integrals[6];
   Im21 = mass_integrals[7];
   Im22 = mass_integrals[8];

   Ih1Re = mass_integrals[9];
   Ih2Re = mass_integrals[10];
   Ih3Re = mass_integrals[11];
   Ih4Re = mass_integrals[12];
   Ih5Re = mass_integrals[13];
   Ih6Re = mass_integrals[14];
   Ih7Re = mass_integrals[15];
   Ih8Re = mass_integrals[16];
   Ih9Re = mass_integrals[17];
   Ih10Re = mass_integrals[18];
   Ih11Re = mass_integrals[19];
   Ih12Re = mass_integrals[20];
   Ih13Re = mass_integrals[21];
   Ih14Re = mass_integrals[22];
   Ih15Re = mass_integrals[23];
   Ih16Re = mass_integrals[24];
   Ih17Re = mass_integrals[25];
   Ih18Re = mass_integrals[26];
   Ih19Re = mass_integrals[27];
   Ih20Re = mass_integrals[28];
   Ih21Re = mass_integrals[29];
   Ih22Re = mass_integrals[30];
   Ih23Re = mass_integrals[31];
   Ih24Re = mass_integrals[32];
   Ih25Re = mass_integrals[33];
   Ih26Re = mass_integrals[34];
   Ih27Re = mass_integrals[35];
   Ih28Re = mass_integrals[36];
   Ih29Re = mass_integrals[37];
   Ih30Re = mass_integrals[38];

   Ih1Im = mass_integrals[39];
   Ih2Im = mass_integrals[40];
   Ih3Im = mass_integrals[41];
   Ih4Im = mass_integrals[42];
   Ih5Im = mass_integrals[43];
   Ih6Im = mass_integrals[44];
   Ih7Im = mass_integrals[45];
   Ih8Im = mass_integrals[46];
   Ih9Im = mass_integrals[47];
   Ih10Im = mass_integrals[48];
   Ih11Im = mass_integrals[49];
   Ih12Im = mass_integrals[50];
   Ih13Im = mass_integrals[51];
   Ih14Im = mass_integrals[52];
   Ih15Im = mass_integrals[53];
   Ih16Im = mass_integrals[54];
   Ih17Im = mass_integrals[55];
   Ih18Im = mass_integrals[56];
   Ih19Im = mass_integrals[57];
   Ih20Im = mass_integrals[58];
   Ih21Im = mass_integrals[59];

   If1 = ang_integrals[0];
   If2 = ang_integrals[1];
   If3 = ang_integrals[2];
   If4 = ang_integrals[3];
   If5 = ang_integrals[4];
   If6 = ang_integrals[5];
   If7 = ang_integrals[6];
   If8 = ang_integrals[7];
   If9 = ang_integrals[8];
   If10 = ang_integrals[9];
   If11 = ang_integrals[10];
   If12 = ang_integrals[11];
   If13 = ang_integrals[12];
   If14 = ang_integrals[13];
   If15 = ang_integrals[14];
   If16 = ang_integrals[15];
   If17 = ang_integrals[16];
   If18 = ang_integrals[17];

   reIhj1j2j1pj2pdict[0][0][0][0] = pycuda::real(pycuda::complex<double>(Ih22Re,0.));
   reIhj1j2j1pj2pdict[0][0][0][1] = pycuda::real(pycuda::complex<double>(Ih1Re,Ih1Im));
   reIhj1j2j1pj2pdict[0][0][0][2] = pycuda::real(pycuda::complex<double>(Ih2Re,Ih2Im));
   reIhj1j2j1pj2pdict[0][0][1][0] = pycuda::real(pycuda::complex<double>(Ih1Re,Ih1Im));
   reIhj1j2j1pj2pdict[0][0][1][1] = pycuda::real(pycuda::complex<double>(Ih3Re,Ih3Im));
   reIhj1j2j1pj2pdict[0][0][1][2] = pycuda::real(pycuda::complex<double>(Ih4Re,Ih4Im));
   reIhj1j2j1pj2pdict[0][0][2][0] = pycuda::real(pycuda::complex<double>(Ih2Re,Ih2Im));
   reIhj1j2j1pj2pdict[0][0][2][1] = pycuda::real(pycuda::complex<double>(Ih4Re,Ih4Im));
   reIhj1j2j1pj2pdict[0][0][2][2] = pycuda::real(pycuda::complex<double>(Ih5Re,Ih5Im));
   reIhj1j2j1pj2pdict[0][1][0][0] = pycuda::real(pycuda::complex<double>(Ih1Re,-Ih1Im));
   reIhj1j2j1pj2pdict[0][1][0][1] = pycuda::real(pycuda::complex<double>(Ih23Re,0.));
   reIhj1j2j1pj2pdict[0][1][0][2] = pycuda::real(pycuda::complex<double>(Ih6Re,Ih6Im));
   reIhj1j2j1pj2pdict[0][1][1][0] = pycuda::real(pycuda::complex<double>(Ih7Re,Ih7Im));
   reIhj1j2j1pj2pdict[0][1][1][1] = pycuda::real(pycuda::complex<double>(Ih8Re,Ih8Im));
   reIhj1j2j1pj2pdict[0][1][1][2] = pycuda::real(pycuda::complex<double>(Ih9Re,Ih9Im));
   reIhj1j2j1pj2pdict[0][1][2][0] = pycuda::real(pycuda::complex<double>(Ih10Re,Ih10Im));
   reIhj1j2j1pj2pdict[0][1][2][1] = pycuda::real(pycuda::complex<double>(Ih11Re,Ih11Im));
   reIhj1j2j1pj2pdict[0][1][2][2] = pycuda::real(pycuda::complex<double>(Ih12Re,Ih12Im));
   reIhj1j2j1pj2pdict[0][2][0][0] = pycuda::real(pycuda::complex<double>(Ih2Re,-Ih2Im));
   reIhj1j2j1pj2pdict[0][2][0][1] = pycuda::real(pycuda::complex<double>(Ih6Re,-Ih6Im));
   reIhj1j2j1pj2pdict[0][2][0][2] = pycuda::real(pycuda::complex<double>(Ih25Re,0.));
   reIhj1j2j1pj2pdict[0][2][1][0] = pycuda::real(pycuda::complex<double>(Ih10Re,-Ih10Im));
   reIhj1j2j1pj2pdict[0][2][1][1] = pycuda::real(pycuda::complex<double>(Ih13Re,Ih13Im));
   reIhj1j2j1pj2pdict[0][2][1][2] = pycuda::real(pycuda::complex<double>(Ih14Re,Ih14Im));
   reIhj1j2j1pj2pdict[0][2][2][0] = pycuda::real(pycuda::complex<double>(Ih15Re,Ih15Im));
   reIhj1j2j1pj2pdict[0][2][2][1] = pycuda::real(pycuda::complex<double>(Ih16Re,Ih16Im));
   reIhj1j2j1pj2pdict[0][2][2][2] = pycuda::real(pycuda::complex<double>(Ih17Re,Ih17Im));
   reIhj1j2j1pj2pdict[1][0][0][0] = pycuda::real(pycuda::complex<double>(Ih1Re,-Ih1Im));
   reIhj1j2j1pj2pdict[1][0][0][1] = pycuda::real(pycuda::complex<double>(Ih7Re,Ih7Im));
   reIhj1j2j1pj2pdict[1][0][0][2] = pycuda::real(pycuda::complex<double>(Ih10Re,Ih10Im));
   reIhj1j2j1pj2pdict[1][0][1][0] = pycuda::real(pycuda::complex<double>(Ih24Re,0.));
   reIhj1j2j1pj2pdict[1][0][1][1] = pycuda::real(pycuda::complex<double>(Ih8Re,Ih8Im));
   reIhj1j2j1pj2pdict[1][0][1][2] = pycuda::real(pycuda::complex<double>(Ih11Re,Ih11Im));
   reIhj1j2j1pj2pdict[1][0][2][0] = pycuda::real(pycuda::complex<double>(Ih6Re,Ih6Im));
   reIhj1j2j1pj2pdict[1][0][2][1] = pycuda::real(pycuda::complex<double>(Ih9Re,Ih9Im));
   reIhj1j2j1pj2pdict[1][0][2][2] = pycuda::real(pycuda::complex<double>(Ih12Re,Ih12Im));
   reIhj1j2j1pj2pdict[1][1][0][0] = pycuda::real(pycuda::complex<double>(Ih3Re,-Ih3Im));
   reIhj1j2j1pj2pdict[1][1][0][1] = pycuda::real(pycuda::complex<double>(Ih8Re,-Ih8Im));
   reIhj1j2j1pj2pdict[1][1][0][2] = pycuda::real(pycuda::complex<double>(Ih13Re,-Ih13Im));
   reIhj1j2j1pj2pdict[1][1][1][0] = pycuda::real(pycuda::complex<double>(Ih8Re,-Ih8Im));
   reIhj1j2j1pj2pdict[1][1][1][1] = pycuda::real(pycuda::complex<double>(Ih27Re,0.));
   reIhj1j2j1pj2pdict[1][1][1][2] = pycuda::real(pycuda::complex<double>(Ih18Re,Ih18Im));
   reIhj1j2j1pj2pdict[1][1][2][0] = pycuda::real(pycuda::complex<double>(Ih13Re,-Ih13Im));
   reIhj1j2j1pj2pdict[1][1][2][1] = pycuda::real(pycuda::complex<double>(Ih18Re,Ih18Im));
   reIhj1j2j1pj2pdict[1][1][2][2] = pycuda::real(pycuda::complex<double>(Ih19Re,Ih19Im));
   reIhj1j2j1pj2pdict[1][2][0][0] = pycuda::real(pycuda::complex<double>(Ih4Re,-Ih4Im));
   reIhj1j2j1pj2pdict[1][2][0][1] = pycuda::real(pycuda::complex<double>(Ih9Re,-Ih9Im));
   reIhj1j2j1pj2pdict[1][2][0][2] = pycuda::real(pycuda::complex<double>(Ih14Re,-Ih14Im));
   reIhj1j2j1pj2pdict[1][2][1][0] = pycuda::real(pycuda::complex<double>(Ih11Re,-Ih11Im));
   reIhj1j2j1pj2pdict[1][2][1][1] = pycuda::real(pycuda::complex<double>(Ih18Re,-Ih18Im));
   reIhj1j2j1pj2pdict[1][2][1][2] = pycuda::real(pycuda::complex<double>(Ih28Re,0.));
   reIhj1j2j1pj2pdict[1][2][2][0] = pycuda::real(pycuda::complex<double>(Ih16Re,-Ih16Im));
   reIhj1j2j1pj2pdict[1][2][2][1] = pycuda::real(pycuda::complex<double>(Ih20Re,Ih20Im));
   reIhj1j2j1pj2pdict[1][2][2][2] = pycuda::real(pycuda::complex<double>(Ih21Re,Ih21Im));
   reIhj1j2j1pj2pdict[2][0][0][0] = pycuda::real(pycuda::complex<double>(Ih2Re,-Ih2Im));
   reIhj1j2j1pj2pdict[2][0][0][1] = pycuda::real(pycuda::complex<double>(Ih10Re,-Ih10Im));
   reIhj1j2j1pj2pdict[2][0][0][2] = pycuda::real(pycuda::complex<double>(Ih15Re,Ih15Im));
   reIhj1j2j1pj2pdict[2][0][1][0] = pycuda::real(pycuda::complex<double>(Ih6Re,-Ih6Im));
   reIhj1j2j1pj2pdict[2][0][1][1] = pycuda::real(pycuda::complex<double>(Ih13Re,Ih13Im));
   reIhj1j2j1pj2pdict[2][0][1][2] = pycuda::real(pycuda::complex<double>(Ih16Re,Ih16Im));
   reIhj1j2j1pj2pdict[2][0][2][0] = pycuda::real(pycuda::complex<double>(Ih26Re,0.));
   reIhj1j2j1pj2pdict[2][0][2][1] = pycuda::real(pycuda::complex<double>(Ih14Re,Ih14Im));
   reIhj1j2j1pj2pdict[2][0][2][2] = pycuda::real(pycuda::complex<double>(Ih17Re,Ih17Im));
   reIhj1j2j1pj2pdict[2][1][0][0] = pycuda::real(pycuda::complex<double>(Ih4Re,-Ih4Im));
   reIhj1j2j1pj2pdict[2][1][0][1] = pycuda::real(pycuda::complex<double>(Ih11Re,-Ih11Im));
   reIhj1j2j1pj2pdict[2][1][0][2] = pycuda::real(pycuda::complex<double>(Ih16Re,-Ih16Im));
   reIhj1j2j1pj2pdict[2][1][1][0] = pycuda::real(pycuda::complex<double>(Ih9Re,-Ih9Im));
   reIhj1j2j1pj2pdict[2][1][1][1] = pycuda::real(pycuda::complex<double>(Ih18Re,-Ih18Im));
   reIhj1j2j1pj2pdict[2][1][1][2] = pycuda::real(pycuda::complex<double>(Ih20Re,Ih20Im));
   reIhj1j2j1pj2pdict[2][1][2][0] = pycuda::real(pycuda::complex<double>(Ih14Re,-Ih14Im));
   reIhj1j2j1pj2pdict[2][1][2][1] = pycuda::real(pycuda::complex<double>(Ih29Re,0.));
   reIhj1j2j1pj2pdict[2][1][2][2] = pycuda::real(pycuda::complex<double>(Ih21Re,Ih21Im));
   reIhj1j2j1pj2pdict[2][2][0][0] = pycuda::real(pycuda::complex<double>(Ih5Re,-Ih5Im));
   reIhj1j2j1pj2pdict[2][2][0][1] = pycuda::real(pycuda::complex<double>(Ih12Re,-Ih12Im));
   reIhj1j2j1pj2pdict[2][2][0][2] = pycuda::real(pycuda::complex<double>(Ih17Re,-Ih17Im));
   reIhj1j2j1pj2pdict[2][2][1][0] = pycuda::real(pycuda::complex<double>(Ih12Re,-Ih12Im));
   reIhj1j2j1pj2pdict[2][2][1][1] = pycuda::real(pycuda::complex<double>(Ih19Re,-Ih19Im));
   reIhj1j2j1pj2pdict[2][2][1][2] = pycuda::real(pycuda::complex<double>(Ih21Re,-Ih21Im));
   reIhj1j2j1pj2pdict[2][2][2][0] = pycuda::real(pycuda::complex<double>(Ih17Re,-Ih17Im));
   reIhj1j2j1pj2pdict[2][2][2][1] = pycuda::real(pycuda::complex<double>(Ih21Re,-Ih21Im));
   reIhj1j2j1pj2pdict[2][2][2][2] = pycuda::real(pycuda::complex<double>(Ih30Re,0.));
   imIhj1j2j1pj2pdict[0][0][0][0] = pycuda::imag(pycuda::complex<double>(Ih22Re,0.));
   imIhj1j2j1pj2pdict[0][0][0][1] = pycuda::imag(pycuda::complex<double>(Ih1Re,Ih1Im));
   imIhj1j2j1pj2pdict[0][0][0][2] = pycuda::imag(pycuda::complex<double>(Ih2Re,Ih2Im));
   imIhj1j2j1pj2pdict[0][0][1][0] = pycuda::imag(pycuda::complex<double>(Ih1Re,Ih1Im));
   imIhj1j2j1pj2pdict[0][0][1][1] = pycuda::imag(pycuda::complex<double>(Ih3Re,Ih3Im));
   imIhj1j2j1pj2pdict[0][0][1][2] = pycuda::imag(pycuda::complex<double>(Ih4Re,Ih4Im));
   imIhj1j2j1pj2pdict[0][0][2][0] = pycuda::imag(pycuda::complex<double>(Ih2Re,Ih2Im));
   imIhj1j2j1pj2pdict[0][0][2][1] = pycuda::imag(pycuda::complex<double>(Ih4Re,Ih4Im));
   imIhj1j2j1pj2pdict[0][0][2][2] = pycuda::imag(pycuda::complex<double>(Ih5Re,Ih5Im));
   imIhj1j2j1pj2pdict[0][1][0][0] = pycuda::imag(pycuda::complex<double>(Ih1Re,-Ih1Im));
   imIhj1j2j1pj2pdict[0][1][0][1] = pycuda::imag(pycuda::complex<double>(Ih23Re,0.));
   imIhj1j2j1pj2pdict[0][1][0][2] = pycuda::imag(pycuda::complex<double>(Ih6Re,Ih6Im));
   imIhj1j2j1pj2pdict[0][1][1][0] = pycuda::imag(pycuda::complex<double>(Ih7Re,Ih7Im));
   imIhj1j2j1pj2pdict[0][1][1][1] = pycuda::imag(pycuda::complex<double>(Ih8Re,Ih8Im));
   imIhj1j2j1pj2pdict[0][1][1][2] = pycuda::imag(pycuda::complex<double>(Ih9Re,Ih9Im));
   imIhj1j2j1pj2pdict[0][1][2][0] = pycuda::imag(pycuda::complex<double>(Ih10Re,Ih10Im));
   imIhj1j2j1pj2pdict[0][1][2][1] = pycuda::imag(pycuda::complex<double>(Ih11Re,Ih11Im));
   imIhj1j2j1pj2pdict[0][1][2][2] = pycuda::imag(pycuda::complex<double>(Ih12Re,Ih12Im));
   imIhj1j2j1pj2pdict[0][2][0][0] = pycuda::imag(pycuda::complex<double>(Ih2Re,-Ih2Im));
   imIhj1j2j1pj2pdict[0][2][0][1] = pycuda::imag(pycuda::complex<double>(Ih6Re,-Ih6Im));
   imIhj1j2j1pj2pdict[0][2][0][2] = pycuda::imag(pycuda::complex<double>(Ih25Re,0.));
   imIhj1j2j1pj2pdict[0][2][1][0] = pycuda::imag(pycuda::complex<double>(Ih10Re,-Ih10Im));
   imIhj1j2j1pj2pdict[0][2][1][1] = pycuda::imag(pycuda::complex<double>(Ih13Re,Ih13Im));
   imIhj1j2j1pj2pdict[0][2][1][2] = pycuda::imag(pycuda::complex<double>(Ih14Re,Ih14Im));
   imIhj1j2j1pj2pdict[0][2][2][0] = pycuda::imag(pycuda::complex<double>(Ih15Re,Ih15Im));
   imIhj1j2j1pj2pdict[0][2][2][1] = pycuda::imag(pycuda::complex<double>(Ih16Re,Ih16Im));
   imIhj1j2j1pj2pdict[0][2][2][2] = pycuda::imag(pycuda::complex<double>(Ih17Re,Ih17Im));
   imIhj1j2j1pj2pdict[1][0][0][0] = pycuda::imag(pycuda::complex<double>(Ih1Re,-Ih1Im));
   imIhj1j2j1pj2pdict[1][0][0][1] = pycuda::imag(pycuda::complex<double>(Ih7Re,Ih7Im));
   imIhj1j2j1pj2pdict[1][0][0][2] = pycuda::imag(pycuda::complex<double>(Ih10Re,Ih10Im));
   imIhj1j2j1pj2pdict[1][0][1][0] = pycuda::imag(pycuda::complex<double>(Ih24Re,0.));
   imIhj1j2j1pj2pdict[1][0][1][1] = pycuda::imag(pycuda::complex<double>(Ih8Re,Ih8Im));
   imIhj1j2j1pj2pdict[1][0][1][2] = pycuda::imag(pycuda::complex<double>(Ih11Re,Ih11Im));
   imIhj1j2j1pj2pdict[1][0][2][0] = pycuda::imag(pycuda::complex<double>(Ih6Re,Ih6Im));
   imIhj1j2j1pj2pdict[1][0][2][1] = pycuda::imag(pycuda::complex<double>(Ih9Re,Ih9Im));
   imIhj1j2j1pj2pdict[1][0][2][2] = pycuda::imag(pycuda::complex<double>(Ih12Re,Ih12Im));
   imIhj1j2j1pj2pdict[1][1][0][0] = pycuda::imag(pycuda::complex<double>(Ih3Re,-Ih3Im));
   imIhj1j2j1pj2pdict[1][1][0][1] = pycuda::imag(pycuda::complex<double>(Ih8Re,-Ih8Im));
   imIhj1j2j1pj2pdict[1][1][0][2] = pycuda::imag(pycuda::complex<double>(Ih13Re,-Ih13Im));
   imIhj1j2j1pj2pdict[1][1][1][0] = pycuda::imag(pycuda::complex<double>(Ih8Re,-Ih8Im));
   imIhj1j2j1pj2pdict[1][1][1][1] = pycuda::imag(pycuda::complex<double>(Ih27Re,0.));
   imIhj1j2j1pj2pdict[1][1][1][2] = pycuda::imag(pycuda::complex<double>(Ih18Re,Ih18Im));
   imIhj1j2j1pj2pdict[1][1][2][0] = pycuda::imag(pycuda::complex<double>(Ih13Re,-Ih13Im));
   imIhj1j2j1pj2pdict[1][1][2][1] = pycuda::imag(pycuda::complex<double>(Ih18Re,Ih18Im));
   imIhj1j2j1pj2pdict[1][1][2][2] = pycuda::imag(pycuda::complex<double>(Ih19Re,Ih19Im));
   imIhj1j2j1pj2pdict[1][2][0][0] = pycuda::imag(pycuda::complex<double>(Ih4Re,-Ih4Im));
   imIhj1j2j1pj2pdict[1][2][0][1] = pycuda::imag(pycuda::complex<double>(Ih9Re,-Ih9Im));
   imIhj1j2j1pj2pdict[1][2][0][2] = pycuda::imag(pycuda::complex<double>(Ih14Re,-Ih14Im));
   imIhj1j2j1pj2pdict[1][2][1][0] = pycuda::imag(pycuda::complex<double>(Ih11Re,-Ih11Im));
   imIhj1j2j1pj2pdict[1][2][1][1] = pycuda::imag(pycuda::complex<double>(Ih18Re,-Ih18Im));
   imIhj1j2j1pj2pdict[1][2][1][2] = pycuda::imag(pycuda::complex<double>(Ih28Re,0.));
   imIhj1j2j1pj2pdict[1][2][2][0] = pycuda::imag(pycuda::complex<double>(Ih16Re,-Ih16Im));
   imIhj1j2j1pj2pdict[1][2][2][1] = pycuda::imag(pycuda::complex<double>(Ih20Re,Ih20Im));
   imIhj1j2j1pj2pdict[1][2][2][2] = pycuda::imag(pycuda::complex<double>(Ih21Re,Ih21Im));
   imIhj1j2j1pj2pdict[2][0][0][0] = pycuda::imag(pycuda::complex<double>(Ih2Re,-Ih2Im));
   imIhj1j2j1pj2pdict[2][0][0][1] = pycuda::imag(pycuda::complex<double>(Ih10Re,-Ih10Im));
   imIhj1j2j1pj2pdict[2][0][0][2] = pycuda::imag(pycuda::complex<double>(Ih15Re,Ih15Im));
   imIhj1j2j1pj2pdict[2][0][1][0] = pycuda::imag(pycuda::complex<double>(Ih6Re,-Ih6Im));
   imIhj1j2j1pj2pdict[2][0][1][1] = pycuda::imag(pycuda::complex<double>(Ih13Re,Ih13Im));
   imIhj1j2j1pj2pdict[2][0][1][2] = pycuda::imag(pycuda::complex<double>(Ih16Re,Ih16Im));
   imIhj1j2j1pj2pdict[2][0][2][0] = pycuda::imag(pycuda::complex<double>(Ih26Re,0.));
   imIhj1j2j1pj2pdict[2][0][2][1] = pycuda::imag(pycuda::complex<double>(Ih14Re,Ih14Im));
   imIhj1j2j1pj2pdict[2][0][2][2] = pycuda::imag(pycuda::complex<double>(Ih17Re,Ih17Im));
   imIhj1j2j1pj2pdict[2][1][0][0] = pycuda::imag(pycuda::complex<double>(Ih4Re,-Ih4Im));
   imIhj1j2j1pj2pdict[2][1][0][1] = pycuda::imag(pycuda::complex<double>(Ih11Re,-Ih11Im));
   imIhj1j2j1pj2pdict[2][1][0][2] = pycuda::imag(pycuda::complex<double>(Ih16Re,-Ih16Im));
   imIhj1j2j1pj2pdict[2][1][1][0] = pycuda::imag(pycuda::complex<double>(Ih9Re,-Ih9Im));
   imIhj1j2j1pj2pdict[2][1][1][1] = pycuda::imag(pycuda::complex<double>(Ih18Re,-Ih18Im));
   imIhj1j2j1pj2pdict[2][1][1][2] = pycuda::imag(pycuda::complex<double>(Ih20Re,Ih20Im));
   imIhj1j2j1pj2pdict[2][1][2][0] = pycuda::imag(pycuda::complex<double>(Ih14Re,-Ih14Im));
   imIhj1j2j1pj2pdict[2][1][2][1] = pycuda::imag(pycuda::complex<double>(Ih29Re,0.));
   imIhj1j2j1pj2pdict[2][1][2][2] = pycuda::imag(pycuda::complex<double>(Ih21Re,Ih21Im));
   imIhj1j2j1pj2pdict[2][2][0][0] = pycuda::imag(pycuda::complex<double>(Ih5Re,-Ih5Im));
   imIhj1j2j1pj2pdict[2][2][0][1] = pycuda::imag(pycuda::complex<double>(Ih12Re,-Ih12Im));
   imIhj1j2j1pj2pdict[2][2][0][2] = pycuda::imag(pycuda::complex<double>(Ih17Re,-Ih17Im));
   imIhj1j2j1pj2pdict[2][2][1][0] = pycuda::imag(pycuda::complex<double>(Ih12Re,-Ih12Im));
   imIhj1j2j1pj2pdict[2][2][1][1] = pycuda::imag(pycuda::complex<double>(Ih19Re,-Ih19Im));
   imIhj1j2j1pj2pdict[2][2][1][2] = pycuda::imag(pycuda::complex<double>(Ih21Re,-Ih21Im));
   imIhj1j2j1pj2pdict[2][2][2][0] = pycuda::imag(pycuda::complex<double>(Ih17Re,-Ih17Im));
   imIhj1j2j1pj2pdict[2][2][2][1] = pycuda::imag(pycuda::complex<double>(Ih21Re,-Ih21Im));
   imIhj1j2j1pj2pdict[2][2][2][2] = pycuda::imag(pycuda::complex<double>(Ih30Re,0.));

 }

__device__ void set_buffer_differential_terms_gen(int iev) {

   double f1,f2,s1,s2,x1,x2;

   if (acctype == 3) {
      f1 = 1.;
      f2 = 0.;
      s1 = p0_tres_12+p1_tres_12*(t_err[0][iev]-deltatmean_tres_12);
      s2 = 1.;
      x1 = t[0][iev]/(sqrt(2.)*s1);
      x2 = t[0][iev]/(sqrt(2.)*s2);
   }
   else {
      f1 = 1.;
      f2 = 0.;
      if (year_opt == 0) {s1 = p0_tres_11+p1_tres_11*(t_err[0][iev]-deltatmean_tres_11);}
      else {s1 = p0_tres_12+p1_tres_12*(t_err[0][iev]-deltatmean_tres_12);}
      s2 = 1.;
      x1 = t[0][iev]/(sqrt(2.)*s1);
      x2 = t[0][iev]/(sqrt(2.)*s2);
   }

   pycuda::complex<double> z1_hyper_plus = s1/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq-0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z2_hyper_plus = s2/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq-0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z1_hyper_minus = s1/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq+0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z2_hyper_minus = s2/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq+0.5*delta_gamma_freq,0.);
   pycuda::complex<double> z1_trigo = s1/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq,-delta_m_freq);
   pycuda::complex<double> z2_trigo = s2/sqrt(2.)*pycuda::complex<double>(gamma_Bs_freq,-delta_m_freq);

   double conv_exp_hyper_plus = pycuda::real(f1*conv_exp(x1,z1_hyper_plus)+f2*conv_exp(x2,z2_hyper_plus));
   double conv_exp_hyper_minus = pycuda::real(f1*conv_exp(x1,z1_hyper_minus)+f2*conv_exp(x2,z2_hyper_minus));
   pycuda::complex<double> conv_exp_trigo = f1*conv_exp(x1,z1_trigo)+f2*conv_exp(x2,z2_trigo);

   T_cosh_temp[0][iev] = 0.5*(conv_exp_hyper_plus + conv_exp_hyper_minus);
   T_sinh_temp[0][iev] = 0.5*(conv_exp_hyper_plus - conv_exp_hyper_minus);
   T_cos_temp[0][iev] = pycuda::real(conv_exp_trigo);
   T_sin_temp[0][iev] = pycuda::imag(conv_exp_trigo);

   zeta_temp[0][iev] = zeta(decision_SSK[0][iev],decision_OS[0][iev],etamistag_SSK[0][iev],etamistag_OS[0][iev]);
   DCP_tzero_temp[0][iev] = DCP_tzero(decision_SSK[0][iev],decision_OS[0][iev],etamistag_SSK[0][iev],etamistag_OS[0][iev]);

   for (int i=0; i<18; ++i) {fi_cos1_temp[i][0][iev] = fi(cos1[0][iev],i+1);}
   for (int i=0; i<18; ++i) {fi_cos2_temp[i][0][iev] = fi(cos2[0][iev],i+1);}
   for (int i=0; i<15; ++i) {gi_temp[i][0][iev] = gi(phi[0][iev],i+1);}

   for (int j1=0; j1<3; ++j1) {
      for (int j2=0; j2<3; ++j2) {
         pycuda::complex<double> M_temp = Mj1j2(m1[0][iev],m2[0][iev],j1,j2);
         reMj1j2_temp[j1][j2][0][iev] = pycuda::real(M_temp);
         imMj1j2_temp[j1][j2][0][iev] = pycuda::imag(M_temp);
      }
   }

   phasespace_temp[0][iev] = phasespace(m1[0][iev],m2[0][iev]);

 }

__device__ double comp_den_toy(int j1, int j2, int h, int j1p, int j2p, int hp, int iev) { 
   return pycuda::real(ITj1j2hj1pj2php_deltat(j1,j2,h,j1p,j2p,hp,0,iev)*Nj1j2hj1pj2php(j1,j2,h,j1p,j2p,hp)*Ihj1j2j1pj2p(j1,j2,j1p,j2p))*Ighhp(h,hp)*Ifjjphhp(j1,j1p,h,hp)*Ifjjphhp(j2,j2p,h,hp);
 }

__device__ double den_toy(int iev) {

   return comp_den_toy(0,0,0,0,0,0,iev)+comp_den_toy(0,1,0,0,1,0,iev)+comp_den_toy(0,2,0,0,2,0,iev)+comp_den_toy(1,0,0,1,0,0,iev)+comp_den_toy(1,1,0,1,1,0,iev)
+comp_den_toy(1,1,1,1,1,1,iev)+comp_den_toy(1,1,2,1,1,2,iev)+comp_den_toy(1,2,0,1,2,0,iev)+comp_den_toy(1,2,1,1,2,1,iev)+comp_den_toy(1,2,2,1,2,2,iev)
+comp_den_toy(2,0,0,2,0,0,iev)+comp_den_toy(2,1,0,2,1,0,iev)+comp_den_toy(2,1,1,2,1,1,iev)+comp_den_toy(2,1,2,2,1,2,iev)+comp_den_toy(2,2,0,2,2,0,iev)
+comp_den_toy(2,2,1,2,2,1,iev)+comp_den_toy(2,2,2,2,2,2,iev)+comp_den_toy(2,2,3,2,2,3,iev)+comp_den_toy(2,2,4,2,2,4,iev)+2.*comp_den_toy(0,1,0,0,0,0,iev)
+2.*comp_den_toy(0,1,0,1,0,0,iev)+2.*comp_den_toy(0,1,0,2,0,0,iev)+2.*comp_den_toy(0,2,0,0,0,0,iev)+2.*comp_den_toy(0,2,0,0,1,0,iev)+2.*comp_den_toy(0,2,0,1,0,0,iev)
+2.*comp_den_toy(0,2,0,1,1,0,iev)+2.*comp_den_toy(0,2,0,2,0,0,iev)+2.*comp_den_toy(0,2,0,2,1,0,iev)+2.*comp_den_toy(1,0,0,0,0,0,iev)+2.*comp_den_toy(1,1,0,0,0,0,iev)
+2.*comp_den_toy(1,1,0,0,1,0,iev)+2.*comp_den_toy(1,1,0,1,0,0,iev)+2.*comp_den_toy(1,1,0,2,0,0,iev)+2.*comp_den_toy(1,2,0,0,0,0,iev)+2.*comp_den_toy(1,2,0,0,1,0,iev)
+2.*comp_den_toy(1,2,0,0,2,0,iev)+2.*comp_den_toy(1,2,0,1,0,0,iev)+2.*comp_den_toy(1,2,0,1,1,0,iev)+2.*comp_den_toy(1,2,0,2,0,0,iev)+2.*comp_den_toy(1,2,0,2,1,0,iev)
+2.*comp_den_toy(1,2,1,1,1,1,iev)+2.*comp_den_toy(1,2,1,2,1,1,iev)+2.*comp_den_toy(1,2,2,1,1,2,iev)+2.*comp_den_toy(1,2,2,2,1,2,iev)+2.*comp_den_toy(2,0,0,0,0,0,iev)
+2.*comp_den_toy(2,0,0,1,0,0,iev)+2.*comp_den_toy(2,1,0,0,0,0,iev)+2.*comp_den_toy(2,1,0,0,1,0,iev)+2.*comp_den_toy(2,1,0,1,0,0,iev)+2.*comp_den_toy(2,1,0,1,1,0,iev)
+2.*comp_den_toy(2,1,0,2,0,0,iev)+2.*comp_den_toy(2,1,1,1,1,1,iev)+2.*comp_den_toy(2,1,2,1,1,2,iev)+2.*comp_den_toy(2,2,0,0,0,0,iev)+2.*comp_den_toy(2,2,0,0,1,0,iev)
+2.*comp_den_toy(2,2,0,0,2,0,iev)+2.*comp_den_toy(2,2,0,1,0,0,iev)+2.*comp_den_toy(2,2,0,1,1,0,iev)+2.*comp_den_toy(2,2,0,1,2,0,iev)+2.*comp_den_toy(2,2,0,2,0,0,iev)
+2.*comp_den_toy(2,2,0,2,1,0,iev)+2.*comp_den_toy(2,2,1,1,1,1,iev)+2.*comp_den_toy(2,2,1,1,2,1,iev)+2.*comp_den_toy(2,2,1,2,1,1,iev)+2.*comp_den_toy(2,2,2,1,1,2,iev)
+2.*comp_den_toy(2,2,2,1,2,2,iev)+2.*comp_den_toy(2,2,2,2,1,2,iev);

 }

__global__ void evaluate_CondPDF(double m1_ran, double m2_ran, double cos1_ran, double cos2_ran, double phi_ran, double t_ran, double t_err_ran, int q_SSK_ran, int q_OS_ran, double eta_SSK_ran, double eta_OS_ran, double *mixing_params, double *calib_params, double *out) {

   m1[0][0] = m1_ran;
   m2[0][0] = m2_ran;
   cos1[0][0] = cos1_ran;
   cos2[0][0] = cos2_ran;
   phi[0][0] = phi_ran;
   t[0][0] = t_ran;
   t_err[0][0] = t_err_ran;
   decision_SSK[0][0] = q_SSK_ran;
   decision_OS[0][0] = q_OS_ran;
   etamistag_SSK[0][0] = eta_SSK_ran;
   etamistag_OS[0][0] = eta_OS_ran;

   gamma_Bs_freq = mixing_params[1];
   delta_gamma_freq = mixing_params[2];
   p0metac_tag_SSK = calib_params[0];
   p0metac_tag_OS = calib_params[1];
   Dp0half_tag_SSK = calib_params[2];
   Dp0half_tag_OS = calib_params[3];
   p1_tag_SSK = calib_params[4];
   p1_tag_OS = calib_params[5];
   Dp1half_tag_SSK = calib_params[6];
   Dp1half_tag_OS = calib_params[7];
   p0_tres_12 = calib_params[14];
   p1_tres_12 = calib_params[15];

   set_buffer_differential_terms_gen(0);
   set_buffer_integral_terms(0,0);

   double num_temp = num_fit(0,0)*accGen(t_ran,m1_ran,m2_ran,cos1_ran,cos2_ran,phi_ran);
   double den_temp = den_toy(0);

   if (num_temp/den_temp<=0) {out[0] = -1.e20;}
   else {out[0] = log(num_temp/den_temp);}

 }

__global__ void generateEvent(double *gendata, double max_fun_eta_SSK, double max_fun_eta_OS, double max_fun_cond, int Nevt) {

   int row = threadIdx.x + blockDim.x * blockIdx.x;
   if (row >= Nevt) { return;}

   curandState state;
   curand_init((unsigned long long)clock(), row, 0, &state);

   // Determination of the per event decay time error.
   t_err[0][row] = ran_P_deltat(state);

   // Determination of the SSK mistag probability.
   double dec_SSK_tagged = curand_uniform(&state);
   if (dec_SSK_tagged < tag_eff_SSK) {
      double etamistag_SSK_ran;
      max_fun[row] = max_fun_eta_SSK;
      while (1) {
         etamistag_SSK_ran = 0.5*curand_uniform(&state);
         fun_ran[row] = P_eta_SSK(etamistag_SSK_ran);
         dec_accepted[row] = max_fun[row]*curand_uniform(&state);
         if (fun_ran[row] > dec_accepted[row]) {break;}
         }
      etamistag_SSK[0][row] = etamistag_SSK_ran;
      }
   else {
      etamistag_SSK[0][row] = 0.5;
      }

   // Determination of the OS mistag probability.
   double dec_OS_tagged = curand_uniform(&state);
   if (dec_OS_tagged < tag_eff_OS) {
      double etamistag_OS_ran;
      max_fun[row] = max_fun_eta_OS;
      while (1) {
         etamistag_OS_ran = 0.5*curand_uniform(&state);
         fun_ran[row] = P_eta_OS(etamistag_OS_ran);
         dec_accepted[row] = max_fun[row]*curand_uniform(&state);
         if (fun_ran[row] > dec_accepted[row]) {break;}
         }
      etamistag_OS[0][row] = etamistag_OS_ran;
      }
   else {
      etamistag_OS[0][row] = 0.5;
      }

   // Determination of the decay observables.
   max_fun[row] = max_fun_cond;
   while (1) {
      if (wide_window == 1) {
         m1[0][row] = 750.+curand_uniform(&state)*(1600.-750.);
         m2[0][row] = 750.+curand_uniform(&state)*(1600.-750.);
      }
      else {
         m1[0][row] = 750.+curand_uniform(&state)*(1050.-750.);
         m2[0][row] = 750.+curand_uniform(&state)*(1050.-750.);
      }
      cos1[0][row] = -1.+curand_uniform(&state)*2.;
      cos2[0][row] = -1.+curand_uniform(&state)*2.;
      phi[0][row] = curand_uniform(&state)*2.*pi;
      t[0][row] = curand_uniform(&state)*12.;
      if (etamistag_SSK[0][row] == 0.5) {decision_SSK[0][row] = 0;}
      else {
         double d_SSK = curand_uniform(&state);
         if (d_SSK <= 0.5) {decision_SSK[0][row] = -1;}
         else {decision_SSK[0][row] = 1;}
      }
      if (etamistag_OS[0][row] == 0.5) {decision_OS[0][row] = 0;}
      else {
         double d_OS = curand_uniform(&state);
         if (d_OS <= 0.5) {decision_OS[0][row] = -1;}
         else {decision_OS[0][row] = 1;}
      }
      set_buffer_differential_terms_gen(row);
      set_buffer_integral_terms(0,row);
      dec_accepted[row] = curand_uniform(&state);
      fun_ran[row] = num_fit(0,row)/den_toy(row)*accGen(t[0][row],m1[0][row],m2[0][row],cos1[0][row],cos2[0][row],phi[0][row])/max_fun[row];
      if (fun_ran[row] > dec_accepted[row]) {break;}

   }

   int i0 = row*12;
   gendata[0 + i0] = (double) decision_SSK[0][row];
   gendata[1 + i0] = (double) decision_OS[0][row];
   gendata[2 + i0] = etamistag_SSK[0][row];
   gendata[3 + i0] = etamistag_OS[0][row];
   gendata[4 + i0] = m1[0][row];
   gendata[5 + i0] = m2[0][row];
   gendata[6 + i0] = cos1[0][row];
   gendata[7 + i0] = cos2[0][row];
   gendata[8 + i0] = phi[0][row];
   gendata[9 + i0] = t[0][row];
   gendata[10 + i0] = t_err[0][row];
   gendata[11 + i0] = 1.;

   return;

 }

__global__ void evaluate_toy(double *data, double *out, double *re_amps, double *dirCP_asyms, double *im_amps, double *weak_phases, double *mixing_params, double *calib_params, int Nevt) {

   int row = threadIdx.x + blockDim.x * blockIdx.x;
   if (row >= Nevt) { return;}

   set_buffer_amplitudes(re_amps,dirCP_asyms,im_amps,weak_phases,mixing_params,calib_params);

   int i0 = row*12;
   decision_SSK[0][row] = (int) data[0 + i0];
   decision_OS[0][row] = (int) data[1 + i0];
   etamistag_SSK[0][row] = data[2 + i0];
   etamistag_OS[0][row] = data[3 + i0];
   m1[0][row] = data[4 + i0];
   m2[0][row] = data[5 + i0];
   cos1[0][row] = data[6 + i0];
   cos2[0][row] = data[7 + i0];
   phi[0][row] = data[8 + i0];
   t[0][row] = data[9 + i0];
   t_err[0][row] = data[10 + i0];

   set_buffer_differential_terms_gen(row);
   set_buffer_integral_terms(0,row);

   double num_fit_temp = num_fit(0,row);
   double den_fit_temp = den_toy(row);

   if (num_fit_temp/den_fit_temp<=0) {out[row] = -10000000000;}
   else {out[row] = log(num_fit_temp/den_fit_temp);}

 }

}
