/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "BkgAngPDF.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(BkgAngPDF) 

 BkgAngPDF::BkgAngPDF(const char *name, const char *title, 
                        RooAbsReal& _c1,
                        RooAbsReal& _c2,
                        RooAbsReal& _ph,
                        RooAbsReal& _c1_th,
                        RooAbsReal& _c2_th,
                        RooAbsReal& _c3_th,
                        RooAbsReal& _c4_th,
                        RooAbsReal& _c5_th,
                        RooAbsReal& _upper) :
   RooAbsPdf(name,title), 
   c1("c1","c1",this,_c1),
   c2("c2","c2",this,_c2),
   ph("ph","ph",this,_ph),
   c1_th("c1_th","c1_th",this,_c1_th),
   c2_th("c2_th","c2_th",this,_c2_th),
   c3_th("c3_th","c3_th",this,_c3_th),
   c4_th("c4_th","c4_th",this,_c4_th),
   c5_th("c5_th","c5_th",this,_c5_th),
   upper("upper","upper",this,_upper)
 { 
 } 


 BkgAngPDF::BkgAngPDF(const BkgAngPDF& other, const char* name) :  
   RooAbsPdf(other,name), 
   c1("c1",this,other.c1),
   c2("c2",this,other.c2),
   ph("ph",this,other.ph),
   c1_th("c1_th",this,other.c1_th),
   c2_th("c2_th",this,other.c2_th),
   c3_th("c3_th",this,other.c3_th),
   c4_th("c4_th",this,other.c4_th),
   c5_th("c5_th",this,other.c5_th),
   upper("upper",this,other.upper)
 { 
 } 



 Double_t BkgAngPDF::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 


   Double_t bkg_c1 = 1 + c1_th*c1 + c2_th*c1*c1 + c3_th*c1*c1*c1 + c4_th*c1*c1*c1*c1 + c5_th*c1*c1*c1*c1*c1;
   Double_t bkg_c2 = 1 + c1_th*c2 + c2_th*c2*c2 + c3_th*c2*c2*c2 + c4_th*c2*c2*c2*c2 + c5_th*c2*c2*c2*c2*c2;

   Double_t bkg = bkg_c1*bkg_c2;

   if(c1>upper || c2>upper){
     return 1e-20;
     
   }
 
   return bkg;
} 



