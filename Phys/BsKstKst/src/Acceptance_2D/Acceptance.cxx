/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "Acceptance.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TFile.h"
#include "TMath.h" 
#include "Math/SpecFuncMathMore.h"
#include "TTree.h"
#include "TF1.h"
//#include <gsl/gsl_sf_legendre.h>


ClassImp(Acceptance) 

//  template<int i, int j, int l, int n, int m>  Acceptance::Acceptance(const char *name, const char *title, 
//                         RooAbsReal& _c1,
//                         RooAbsReal& _c2,
//                         RooAbsReal& _ph,
//                         RooAbsReal& _m1,
//                         RooAbsReal& _m2,
// 			Int_t *_orders,
// 								     double (&_coeffs)[i][j][l])://double _coeffs[][][]);
//    RooAbsReal(name,title), 
//    c1("c1","c1",this,_c1),
//    c2("c2","c2",this,_c2),
//    ph("ph","ph",this,_ph),
//    m1("m1","m1",this,_m1),
//    m2("m2","m2",this,_m2)
//  {

//    int dimension = 3;
   

//    for(int r=0;r<dimension; r++){
//      orders[r] = (Int_t)_orders[r];
//    }


//    for (int a=0;a<orders[0];a++){
//      for (int b=0;b<orders[1];b++){
//         for (int c=0;c<orders[2];c++){

// 	     coeffs[a][b][c] = _coeffs[a][b][c];
// 	}}}
 
//  }

 Acceptance::Acceptance(const char *name, const char *title, 
                        RooAbsReal& _c1,
                        RooAbsReal& _m1,
// 			Int_t _dimension,
			TTree *tin,//) :
// 			char *_filename,
// 			char *_treename,
			char *_branchname) :
// 			Double_t (&_coeffs)[3][3][5][5][3]) :
   RooAbsReal(name,title), 
   c1("c1","c1",this,_c1),
   m1("m1","m1",this,_m1)
 { 
   
   tin->SetBranchAddress(_branchname,&coeffs);
   tin->GetEntry(0);
 } 


 Acceptance::Acceptance(const Acceptance& other, const char* name) :  
   RooAbsReal(other,name), 
   c1("c1",this,other.c1),
   m1("m1",this,other.m1)
 { 


   Int_t orders[MYDIM];
   orders[0] = MYA; orders[1] = MYB;
   for (Int_t i=0;i<orders[0];i++){
     for (Int_t j=0;j<orders[1];j++){

	     coeffs[i][j] = other.coeffs[i][j];
	     cout <<"C_"<<i<<j<<" = "<< coeffs[i][j] << endl;
	     
	     
     }
   }
 } 



 Double_t Acceptance::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 

//    cout<<"Entro aqui..."<<endl;

   double P_i1=0; double P_j1=0; 
   double Eff1=0;

   double massmin = 896-150;//800;
   double massmax = 896+150;//1000;
   
   double m1_red = (m1 - massmin)/(massmax - massmin)*2. + (-1);

   Int_t orders[MYDIM];
   orders[0] = MYA; orders[1] = MYB;
   for (Int_t i=0;i<orders[0];i++){
     for (Int_t j=0;j<orders[1];j++){
	     P_i1  = ROOT::Math::legendre(i,m1_red);//gsl_sf_legendre_Pl(i,m1_red);                                                                              
	     P_j1 = ROOT::Math::legendre(j,c1);
	     
             Eff1 += coeffs[i][j]*(P_i1*P_j1);
	   }
	 }


   if (Eff1<0) cout<< "Acceptance is less than 0 @ cth = "<<c1<<", m = "<<m1<<endl;
   
//    cout<<"Salgo de aqui..."<<endl;
     return Eff1;
 } 

