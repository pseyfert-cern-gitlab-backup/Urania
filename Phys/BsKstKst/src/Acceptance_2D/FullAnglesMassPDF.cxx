/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "FullAnglesMassPDF.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "Math/SpecFuncMathMore.h"
#include "Math/SpecFunc.h"

#include <AllAngFunctions.C>
#include <AllMassFunctions.C>

#include "RooArgList.h"

using namespace std;


ClassImp(FullAnglesMassPDF) 

 FullAnglesMassPDF::FullAnglesMassPDF(const char *name, const char *title, 
                        RooAbsReal& _c1,
                        RooAbsReal& _c2,
                        RooAbsReal& _ph,
                        RooAbsReal& _m1,
                        RooAbsReal& _m2,
		    RooAbsReal& _fL,
		    RooAbsReal& _fpa,
		    RooAbsReal& _Asp2,
		    RooAbsReal& _Asm2,
		    RooAbsReal& _Ass2,
		    RooAbsReal& _dpa,
		    RooAbsReal& _dpe,
		    RooAbsReal& _dsp,
		    RooAbsReal& _dsm,
		    RooAbsReal& _dss,		    
		    RooAbsReal& _m_kst,
		    RooAbsReal& _m_kst0,
		    RooAbsReal& _g_kst,
		    RooAbsReal& _g_kst0,
		    RooAbsReal& _m_Bs,
		    RooAbsReal& _Gs,
		    RooAbsReal& _DGs,
		    RooAbsReal& _normP,
		    RooAbsReal& _normS,
		    RooAbsReal& _normSS,
		    TTree *tin,
		    char *_branchname) :
   RooAbsPdf(name,title), 
   c1("c1","c1",this,_c1),
   c2("c2","c2",this,_c2),
   ph("ph","ph",this,_ph),
   m1("m1","m1",this,_m1),
   m2("m2","m2",this,_m2),
   fL("fL","fL",this,_fL),
   fpa("fpa","fpa",this,_fpa),
   Asp2("Asp2","Asp2",this,_Asp2),
   Asm2("Asm2","Asm2",this,_Asm2),
   Ass2("Ass2","Ass2",this,_Ass2),
   dpa("dpa","dpa",this,_dpa),
   dpe("dpe","dpe",this,_dpe),
   dsp("dsp","dsp",this,_dsp),
   dsm("dsm","dsm",this,_dsm),
   dss("dss","dss",this,_dss),
   m_kst("m_kst","m_kst",this,_m_kst),
   m_kst0("m_kst0","m_kst0",this,_m_kst0),
   g_kst("g_kst","g_kst",this,_g_kst),
   g_kst0("g_kst0","g_kst0",this,_g_kst0),
   m_Bs("m_Bs","m_Bs",this,_m_Bs),
   Gs("Gs","Gs",this,_Gs),
   DGs("DGs","DGs",this,_DGs),
   normP("normP","normP",this,_normP),
   normS("normS","normS",this,_normS),
   normSS("normSS","normSS",this,_normSS)
 { 
   double _acc_coeffs[MYA][MYB][MYC][MYD][MYF];
   tin->SetBranchAddress(_branchname,&_acc_coeffs);
   tin->GetEntry(0);

   Int_t orders[MYDIM];
   orders[0] = MYA; orders[1] = MYB; orders[2] = MYC; orders[3] = MYD; orders[4] =MYF;
   for (Int_t i=0;i<orders[0];i++){
     for (Int_t j=0;j<orders[1];j++){
       for (Int_t l=0;l<orders[2];l++){
         for (Int_t n=0;n<orders[3];n++){
           for (Int_t m=0;m<orders[4];m++){

             acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD] = _acc_coeffs[i][j][l][n][m];


           }
         }
       }
     }
   }
  

 } 


 FullAnglesMassPDF::FullAnglesMassPDF(const FullAnglesMassPDF& other, const char* name) :  
   RooAbsPdf(other,name), 
   c1("c1",this,other.c1),
   c2("c2",this,other.c2),
   ph("ph",this,other.ph),
   m1("m1",this,other.m1),
   m2("m2",this,other.m2),
   fL("fL",this,other.fL),
   fpa("fpa",this,other.fpa),
   Asp2("Asp2",this,other.Asp2),
   Asm2("Asm2",this,other.Asm2),
   Ass2("Ass2",this,other.Ass2),
   dpa("dpa",this,other.dpa),
   dpe("dpe",this,other.dpe),
   dsp("dsp",this,other.dsp),
   dsm("dsm",this,other.dsm),
   dss("dss",this,other.dss),
   m_kst("m_kst",this,other.m_kst),
   m_kst0("m_kst0",this,other.m_kst0),
   g_kst("g_kst",this,other.g_kst),
   g_kst0("g_kst0",this,other.g_kst0),
   m_Bs("m_Bs",this,other.m_Bs),
   Gs("Gs",this,other.Gs),
   DGs("DGs",this,other.DGs),
   normP("normP",this,other.normP),
   normS("normS",this,other.normS),
   normSS("normSS",this,other.normSS) { 

   Int_t orders[MYDIM];
   orders[0] = MYA; orders[1] = MYB; orders[2] = MYC; orders[3] = MYD; orders[4] =MYF;
   for (Int_t i=0;i<orders[0];i++){
     for (Int_t j=0;j<orders[1];j++){
       for (Int_t l=0;l<orders[2];l++){
         for (Int_t n=0;n<orders[3];n++){
           for (Int_t m=0;m<orders[4];m++){

             acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD] = other.acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];


           }
         }
       }
     }
   }
 } 


double FullAnglesMassPDF::get_Acceptance() const 
{

  double Y_nm= 0.; double P_i= 0; double P_j= 0; double P_l= 0;
  double Eff = 0.;
  double m1_red = (m1 - 746)/(1046 - 746)*2. + (-1);
  double m2_red = (m2 - 746)/(1046 - 746)*2. + (-1);


  int orders[MYDIM];
  orders[0] = MYA; orders[1] = MYB; orders[2] = MYC; orders[3] = MYD; orders[4] =MYF;
  for (int i=0;i<orders[0];i++){
    for (int j=0;j<orders[1];j++){
      for (int l=0;l<orders[2];l++){
	for (int n=0;n<orders[3];n++){
	  for (int m=0;m<orders[4];m++){
	    //           if (i==0 && j==1 && n==3 && m==1) cout <<"C_"<<i<<j<<l<<n<<m<<" = "<<acc_coeffs[i][j][l][n][m]<<endl;
	    //cout<< "P_i" << endl;                                                                                                                                                      
	    P_i  = ROOT::Math::legendre(i,m1_red);//gsl_sf_legendre_Pl(i,m1_red);                                                                                                        
	    //cout<< "P_j" << endl;                                                                                                                                                      
	    P_j  = ROOT::Math::legendre(j,m2_red);//gsl_sf_legendre_Pl(j,m2_red);                                                                                                        
	    //cout<< "P_l" << endl;                                                                                                                                                      
	    P_l  = ROOT::Math::legendre(l,c1);//gsl_sf_legendre_Pl(l,c1);                                                                                                                
	    //cout<< "Y_nm" << endl;                                                                                                                                                     
	    if ( m>n ) continue;
	    else if ( m == 0 ) Y_nm = ROOT::Math::sph_legendre(n,m,c2);//gsl_sf_legendre_sphPlm (n,m,c2);                                                                                
	    else          Y_nm = sqrt(2) * ROOT::Math::sph_legendre(n,m,c2) * cos(m*ph);//sqrt(2) * gsl_sf_legendre_sphPlm(n,m,c2) * cos(m*ph); 
	    
// 	    cout <<"C_"<<i<<j<<l<<n<<m<<" = "<< acc_coeffs[i][j][l][n][m] << endl;

	    Eff += acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD]*(P_i*P_j*P_l* Y_nm);
           }
         }
       }
     }
   }

//    cout<<"Salgo de aqui..."<<endl;                                                                                                                                                     
     return Eff;

}



 Double_t FullAnglesMassPDF::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 


   Double_t Ap2 = 1-Asp2-Asm2-Ass2;
   Double_t A02 = fL*Ap2;
   Double_t Apa2 = fpa*Ap2;
   Double_t fpe = 1-fL-fpa;
   Double_t Ape2 = fpe*Ap2;

   Double_t A0 = sqrt(A02);
   Double_t Apa = sqrt(Apa2);
   Double_t Ape = sqrt(Ape2);
   Double_t Asp = sqrt(Asp2);
   Double_t Asm = sqrt(Asm2);
   Double_t Ass = sqrt(Ass2);

   Double_t norm_int = sqrt(normP*normS);
   Double_t norm_int_ss = sqrt(normP*normSS);
   Double_t norm_int_sv_ss = sqrt(normS*normSS);

   Double_t d0 = 0;

   Double_t GL = Gs + DGs/2.;
   Double_t GH = Gs - DGs/2.;


   //Time integrated amplitudes
   Double_t K1 = A02;
   Double_t K2 = Apa2;
   Double_t K3 = Ape2*GL/GH;
   Double_t K5 = A0*Apa*cos(dpa);
   // K4 & K6 & K16 are zero if no CPV is assumed
   Double_t K7 = GL;
   Double_t K8 = 1;
   Double_t K9 = 1;
   Double_t K10 = GL/GH;
   Double_t K10b = -1*GL/GH;
   Double_t K11 = 1.;
   Double_t K13 = Ass2;
   Double_t K14 = 1.;
   Double_t K15 = 1.;



   // Mass amplitudes
   Double_t M1 = get_MassTerm(1,m1,m2,0,0,0,0,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normP);   

   Double_t M7 = get_MassTerm(7,m1,m2,Asp,dsp,Asm,dsm,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normS);   
   Double_t M7bar = get_MassTerm(7,m2,m1,Asp,dsp,Asm,dsm,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normS);
   Double_t M12 = get_MassTerm(12,m2,m1,Asp,dsp,Asm,dsm,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normS);

   Double_t M8 = get_MassTerm(8,m1,m2,Asp,dsp,Asm,dsm,A0,d0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);
   Double_t M8bar = get_MassTerm(8,m2,m1,Asp,dsp,Asm,dsm,A0,d0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);

   Double_t M9 = get_MassTerm(9,m1,m2,Asp,dsp,Asm,dsm,Apa,dpa,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);
   Double_t M9bar = get_MassTerm(9,m2,m1,Asp,dsp,Asm,dsm,Apa,dpa,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);

   Double_t M10 = get_MassTerm(10,m1,m2,Asp,dsp,Asm,dsm,Ape,dpe,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);
   Double_t M10bar = get_MassTerm(10,m2,m1,Asp,dsp,Asm,dsm,Ape,dpe,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);

   Double_t M11 = get_MassTerm(11,m1,m2,Asp,dsp,Asm,dsm,Ass,dss,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int_sv_ss);
   Double_t M11bar = get_MassTerm(11,m2,m1,Asp,dsp,Asm,dsm,Ass,dss,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int_sv_ss);

   Double_t M13 = get_MassTerm(13,m1,m2,0,0,0,0,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normSS);
   
   Double_t M14 = get_MassTerm(14,m1,m2,Ass,dss,A0,d0,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int_ss);

   Double_t M15 = get_MassTerm(15,m1,m2,Ass,dss,Apa,dpa,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int_ss);


   // Angular Amplitudes

   Double_t f1 = get_AngTerm(1,c1,c2,ph);
   Double_t f2 = get_AngTerm(2,c1,c2,ph);
   Double_t f3 = get_AngTerm(3,c1,c2,ph);
   Double_t f5 = get_AngTerm(5,c1,c2,ph);
   
   Double_t f7 = get_AngTerm(7,c1,c2,ph);
   Double_t f7bar = get_AngTerm(7,c2,c1,ph);
   Double_t f12 = get_AngTerm(12,c1,c2,ph);

   Double_t f8 = get_AngTerm(8,c1,c2,ph);
   Double_t f8bar = get_AngTerm(8,c2,c1,ph);

   Double_t f9 = get_AngTerm(9,c1,c2,ph);
   Double_t f9bar = get_AngTerm(9,c2,c1,ph);

   Double_t f10 = get_AngTerm(10,c1,c2,ph);
   Double_t f10bar = get_AngTerm(10,c2,c1,ph);

   Double_t f11 = get_AngTerm(11,c1,c2,ph);
   Double_t f11bar = get_AngTerm(11,c2,c1,ph);

   Double_t f13 = get_AngTerm(13,c1,c2,ph);

   Double_t f14 = get_AngTerm(14,c1,c2,ph);

   Double_t f15 = get_AngTerm(15,c1,c2,ph);


   // Products
   Double_t product1 = M1*f1*K1;
   Double_t product2 = M1*f2*K2;
   Double_t product3 = M1*f3*K3;
   Double_t product5 = M1*f5*K5;

   Double_t product7 = M7*f7*K7;
   Double_t product7b = M7bar*f7bar*K7;
   Double_t product12 = M12*f12*K7; //equivalent to old 7_int

   Double_t product8 = M8*f8*K8;
   Double_t product8b = M8bar*f8bar*K8;

   Double_t product9 = M9*f9*K9;
   Double_t product9b = M9bar*f9bar*K9;

   Double_t product10 = M10*f10*K10;
   Double_t product10b = M10bar*f10bar*K10b;

   Double_t product11 = M11*f11*K11;
   Double_t product11b = M11bar*f11bar*K11;

   Double_t product13 = M13*f13*K13;

   Double_t product14 = M14*f14*K14;

   Double_t product15 = M15*f15*K15;



   Double_t acc = get_Acceptance();

   Double_t val = (product1 + product2 + product3 + product5 + product7 + product7b + product12 + product8 + product8b + product9 + product9b + product10 + product10b + product11 + product11b + product13 + product14 + product15)*acc;


   return val;



 } 



Int_t FullAnglesMassPDF::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
 {
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,  
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS   
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X      
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs   
   // EXPRESSION MULTIPLE TIMES       

   // if (matchArgs(allVars,analVars,x)) return 1 ; 

   if (matchArgs(allVars,analVars,c1,c2,ph)) return 1 ;
   // if (matchArgs(allVars,analVars,c1,c2)) return 2 ;
   // if (matchArgs(allVars,analVars,c1,ph)) return 3 ;
   if (matchArgs(allVars,analVars,c2,ph)) return 4 ;
   // if (matchArgs(allVars,analVars,c1)) return 5 ;
   // if (matchArgs(allVars,analVars,c2)) return 6 ;
   // if (matchArgs(allVars,analVars,ph)) return 7 ;

   return 0 ;
 }


Double_t FullAnglesMassPDF::analyticalIntegral(Int_t code, const char* rangeName) const
{

       Double_t Ap2 = 1-Asp2-Asm2-Ass2;
       Double_t A02 = fL*Ap2;
       Double_t Apa2 = fpa*Ap2;
       Double_t fpe = 1-fL-fpa;
       Double_t Ape2 = fpe*Ap2;

       Double_t A0 = sqrt(A02);
       Double_t Apa = sqrt(Apa2);
       Double_t Ape = sqrt(Ape2);
       Double_t Asp = sqrt(Asp2);
       Double_t Asm = sqrt(Asm2);
       Double_t Ass = sqrt(Ass2);

       Double_t norm_int = sqrt(normP*normS);
       Double_t norm_int_ss = sqrt(normP*normSS);
       Double_t norm_int_sv_ss = sqrt(normS*normSS);

       Double_t d0 = 0;

       Double_t GL = Gs + DGs/2.;
       Double_t GH = Gs - DGs/2.;


       //Time integrated amplitudes
       Double_t K1 = A02;
       Double_t K2 = Apa2;
       Double_t K3 = Ape2*GL/GH;
       Double_t K5 = A0*Apa*cos(dpa);
       // K4 & K6 & K16 are zero if no CPV is assumed
       Double_t K7 = GL;
       Double_t K8 = 1;
       Double_t K9 = 1;
       Double_t K10 = GL/GH;
       Double_t K10b = -1*GL/GH;
       Double_t K11 = 1.;
       Double_t K13 = Ass2;
       Double_t K14 = 1.;
       Double_t K15 = 1.;



       // Mass amplitudes
       Double_t M1 = get_MassTerm(1,m1,m2,0,0,0,0,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normP);   
       
       Double_t M7 = get_MassTerm(7,m1,m2,Asp,dsp,Asm,dsm,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normS);   
       Double_t M7bar = get_MassTerm(7,m2,m1,Asp,dsp,Asm,dsm,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normS);
       Double_t M12 = get_MassTerm(12,m2,m1,Asp,dsp,Asm,dsm,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normS);
       
       Double_t M8 = get_MassTerm(8,m1,m2,Asp,dsp,Asm,dsm,A0,d0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);
       Double_t M8bar = get_MassTerm(8,m2,m1,Asp,dsp,Asm,dsm,A0,d0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);

       Double_t M9 = get_MassTerm(9,m1,m2,Asp,dsp,Asm,dsm,Apa,dpa,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);
       Double_t M9bar = get_MassTerm(9,m2,m1,Asp,dsp,Asm,dsm,Apa,dpa,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);
       
       Double_t M10 = get_MassTerm(10,m1,m2,Asp,dsp,Asm,dsm,Ape,dpe,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);
       Double_t M10bar = get_MassTerm(10,m2,m1,Asp,dsp,Asm,dsm,Ape,dpe,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int);

       Double_t M11 = get_MassTerm(11,m1,m2,Asp,dsp,Asm,dsm,Ass,dss,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int_sv_ss);
       Double_t M11bar = get_MassTerm(11,m2,m1,Asp,dsp,Asm,dsm,Ass,dss,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int_sv_ss);

       Double_t M13 = get_MassTerm(13,m1,m2,0,0,0,0,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,normSS);
       
       Double_t M14 = get_MassTerm(14,m1,m2,Ass,dss,A0,d0,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int_ss);
       
       Double_t M15 = get_MassTerm(15,m1,m2,Ass,dss,Apa,dpa,0,0,Gs,DGs,m_kst,m_kst0,g_kst,g_kst0,m_Bs,norm_int_ss);


       // Angular Amplitudes Integrals

       Double_t If1 = 0; 
       Double_t If2 = 0; 
       Double_t If3 = 0; 
       Double_t If5 = 0; 
   
       Double_t If7 = 0; 
       Double_t If7bar = 0; 
       Double_t If12 = 0; 
       
       Double_t If8 = 0; 
       Double_t If8bar = 0; 

       Double_t If9 = 0; 
       Double_t If9bar = 0; 
       
       Double_t If10 = 0; 
       Double_t If10bar = 0; 
       
       Double_t If11 = 0; 
       Double_t If11bar = 0; 
       
       Double_t If13 = 0; 
       
       Double_t If14 = 0; 
       
       Double_t If15 = 0; 

       
       double m1_red = (m1 - 746)/(1046 - 746)*2. + (-1);
       double m2_red = (m2 - 746)/(1046 - 746)*2. + (-1);


   if (code==1)
     {

       double P_i,P_j;

       int orders[MYDIM];
       orders[0] = MYA; orders[1] = MYB; orders[2] = MYC; orders[3] = MYD; orders[4] =MYF;
       for (int i=0;i<orders[0];i++){
	 for (int j=0;j<orders[1];j++){
	   for (int l=0;l<orders[2];l++){
	     for (int n=0;n<orders[3];n++){
	       for (int m=0;m<orders[4];m++){
		 if ( m>n ) continue;

		 // Mass terms
		 P_i  = ROOT::Math::legendre(i,m1_red);
		 P_j  = ROOT::Math::legendre(j,m2_red);
	
		 // Angular terms
		 If1 += get_AngTerm_Integral(1,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If2 += get_AngTerm_Integral(2,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If3 += get_AngTerm_Integral(3,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If5 += get_AngTerm_Integral(5,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 
		 If7 += get_AngTerm_Integral(7,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If7bar += get_AngTerm_Integral(71,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If12 += get_AngTerm_Integral(12,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 
		 If8 += get_AngTerm_Integral(8,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If8bar += get_AngTerm_Integral(81,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];

		 If9 += get_AngTerm_Integral(9,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If9bar += get_AngTerm_Integral(91,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];

		 If10 += get_AngTerm_Integral(10,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If10bar += get_AngTerm_Integral(101,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];

		 If11 += get_AngTerm_Integral(11,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If11bar += get_AngTerm_Integral(111,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];

		 If13 += get_AngTerm_Integral(13,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If14 += get_AngTerm_Integral(14,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If15 += get_AngTerm_Integral(15,l,n,m)*P_i*P_j*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];


	       }
	     }
	   }
	 }
       }
     }

   else if (code==4)
     {

       double P_i,P_j,P_l;

       int orders[MYDIM];
       orders[0] = MYA; orders[1] = MYB; orders[2] = MYC; orders[3] = MYD; orders[4] =MYF;
//        int i,j,l,n,m;
//        i=0;j=0;l=0;n=0;m=0;
       for (int i=0;i<orders[0];i++){
	 for (int j=0;j<orders[1];j++){
	   for (int l=0;l<orders[2];l++){
	     for (int n=0;n<orders[3];n++){
	       for (int m=0;m<orders[4];m++){
		 if ( m>n ) continue;

		 // Mass terms
		 P_i  = ROOT::Math::legendre(i,m1_red);
		 P_j  = ROOT::Math::legendre(j,m2_red);
		 P_l  = ROOT::Math::legendre(l,c1);
	
		 // Angular terms
		 If1 += get_AngTerm_Integral_c2_ph(1,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If2 += get_AngTerm_Integral_c2_ph(2,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If3 += get_AngTerm_Integral_c2_ph(3,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If5 += get_AngTerm_Integral_c2_ph(5,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 
		 If7 += get_AngTerm_Integral_c2_ph(7,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If7bar += get_AngTerm_Integral_c2_ph(71,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If12 += get_AngTerm_Integral_c2_ph(12,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 
		 If8 += get_AngTerm_Integral_c2_ph(8,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If8bar += get_AngTerm_Integral_c2_ph(81,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];

		 If9 += get_AngTerm_Integral_c2_ph(9,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If9bar += get_AngTerm_Integral_c2_ph(91,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];

		 If10 += get_AngTerm_Integral_c2_ph(10,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If10bar += get_AngTerm_Integral_c2_ph(101,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];

		 If11 += get_AngTerm_Integral_c2_ph(11,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If11bar += get_AngTerm_Integral_c2_ph(111,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];

		 If13 += get_AngTerm_Integral_c2_ph(13,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If14 += get_AngTerm_Integral_c2_ph(14,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];
		 If15 += get_AngTerm_Integral_c2_ph(15,c1,n,m)*P_i*P_j*P_l*acc_coeffs[i + j*MYA + l*MYA*MYB + n*MYA*MYB*MYC +m*MYA*MYB*MYC*MYD];


	       }
	     }
	   }
	 }
       }
     }




   else 
     {
       cout<< "Integral not calculated... returning 0."<<endl;
       return 0;
     }



       // Products
       Double_t product1 = M1*If1*K1;
       Double_t product2 = M1*If2*K2;
       Double_t product3 = M1*If3*K3;
       Double_t product5 = M1*If5*K5;
       
       Double_t product7 = M7*If7*K7;
       Double_t product7b = M7bar*If7bar*K7;
       Double_t product12 = M12*If12*K7; //equivalent to old 7_int
       
       Double_t product8 = M8*If8*K8;
       Double_t product8b = M8bar*If8bar*K8;
       
       Double_t product9 = M9*If9*K9;
       Double_t product9b = M9bar*If9bar*K9;

       Double_t product10 = M10*If10*K10;
       Double_t product10b = M10bar*If10bar*K10b;

       Double_t product11 = M11*If11*K11;
       Double_t product11b = M11bar*If11bar*K11;

       Double_t product13 = M13*If13*K13;
       
       Double_t product14 = M14*If14*K14;
       
       Double_t product15 = M15*If15*K15;



       Double_t val = (product1 + product2 + product3 + product5 + product7 + product7b + product12 + product8 + product8b + product9 + product9b + product10 + product10b + product11 + product11b + product13 + product14 + product15);

       //cout<< "Funcion de integral analitica en indx "<< code <<endl;
       return val;

     


}
