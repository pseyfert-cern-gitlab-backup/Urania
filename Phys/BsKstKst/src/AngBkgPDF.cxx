 /***************************************************************************** 
  * Project: RooFit                                                           * 
  *                                                                           * 
  * This code was autogenerated by RooClassFactory                            * 
  *****************************************************************************/ 

 // Your description goes here... 

 #include "Riostream.h" 

 #include "AngBkgPDF.h" 
 #include "RooAbsReal.h" 
 #include "RooAbsCategory.h" 
 #include <math.h> 
 #include "TMath.h" 

 #include <cmath>
 #include "Math/SpecFunc.h"


 ClassImp(AngBkgPDF) 

 AngBkgPDF::AngBkgPDF(const char *name, const char *title, 
                        RooAbsReal& _k0,
                        RooAbsReal& _k1,
                        RooAbsReal& _k2,
                        RooAbsReal& _k3,
                        RooAbsReal& _k4,
                        RooAbsReal& _k5,
                        RooAbsReal& _k6,
                        RooAbsReal& _beta,
                        RooAbsReal& _c1,
                        RooAbsReal& _c2) :
   RooAbsPdf(name,title), 
   k0("k0","k0",this,_k0),
   k1("k1","k1",this,_k1),
   k2("k2","k2",this,_k2),
   k3("k3","k3",this,_k3),
   k4("k4","k4",this,_k4),
   k5("k5","k5",this,_k5),
   k6("k6","k6",this,_k6),
   beta("beta","beta",this,_beta),
   c1("c1","c1",this,_c1),
   c2("c2","c2",this,_c2)
 { 
 } 


 AngBkgPDF::AngBkgPDF(const AngBkgPDF& other, const char* name) :  
   RooAbsPdf(other,name), 
   k0("k0",this,other.k0),
   k1("k1",this,other.k1),
   k2("k2",this,other.k2),
   k3("k3",this,other.k3),
   k4("k4",this,other.k4),
   k5("k5",this,other.k5),
   k6("k6",this,other.k6),
   beta("beta",this,other.beta),
   c1("c1",this,other.c1),
   c2("c2",this,other.c2)
 { 
 } 



 Double_t AngBkgPDF::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   Double_t p0c1 = ROOT::Math::legendre(0,c1);
   Double_t p1c1 = ROOT::Math::legendre(1,c1);
   Double_t p2c1 = ROOT::Math::legendre(2,c1);
   Double_t p3c1 = ROOT::Math::legendre(3,c1);
   Double_t p4c1 = ROOT::Math::legendre(4,c1);
   Double_t p5c1 = ROOT::Math::legendre(5,c1);
   Double_t p6c1 = ROOT::Math::legendre(6,c1);

   Double_t p0c2 = ROOT::Math::legendre(0,c2);
   Double_t p1c2 = ROOT::Math::legendre(1,c2);
   Double_t p2c2 = ROOT::Math::legendre(2,c2);
   Double_t p3c2 = ROOT::Math::legendre(3,c2);
   Double_t p4c2 = ROOT::Math::legendre(4,c2);
   Double_t p5c2 = ROOT::Math::legendre(5,c2);
   Double_t p6c2 = ROOT::Math::legendre(6,c2);


   Double_t phys = (1+beta*c1)*(1+beta*c2);
   Double_t acc = ( k0*p0c1 + k1*p1c1 + k2*p2c1 + k3*p3c1 + k4*p4c1 + k5*p5c1 + k6*p6c1 )*( k0*p0c2 + k1*p1c2 + k2*p2c2 + k3*p3c2 + k4*p4c2 + k5*p5c2 + k6*p6c2);

   // if (((phys*acc)==0) || ((phys*acc)<0)){
   //   return 10e-10;
   //   }
   // else {
   //   return  phys*acc;
   // } 

   return phys*acc;
 }



