/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by Urania using RooClassFactory               *
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "AngularPDF.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(AngularPDF) 

 AngularPDF::AngularPDF(const char *name, const char *title, 
                        RooAbsReal& _helcosthetaK,
                        RooAbsReal& _helcosthetaL,
                        RooAbsReal& _helphi,
                        RooAbsReal& _A_2pe_mod,
                        RooAbsReal& _A_2pa_mod,
                        RooAbsReal& _A_20_mod,
                        RooAbsReal& _A_0_mod,
                        RooAbsReal& _A_pa_mod,
                        RooAbsReal& _A_pe_mod,
                        RooAbsReal& _A_S_mod,
                        RooAbsReal& _delta_2pe,
                        RooAbsReal& _delta_2pa,
                        RooAbsReal& _delta_20,
                        RooAbsReal& _delta_pa,
                        RooAbsReal& _delta_pe,
                        RooAbsReal& _delta_S) :
   RooAbsPdf(name,title), 
   helcosthetaK("helcosthetaK","helcosthetaK",this,_helcosthetaK),
   helcosthetaL("helcosthetaL","helcosthetaL",this,_helcosthetaL),
   helphi("helphi","helphi",this,_helphi),
   A_2pe_mod("A_2pe_mod","A_2pe_mod",this,_A_2pe_mod),
   A_2pa_mod("A_2pa_mod","A_2pa_mod",this,_A_2pa_mod),
   A_20_mod("A_20_mod","A_20_mod",this,_A_20_mod),
   A_0_mod("A_0_mod","A_0_mod",this,_A_0_mod),
   A_pa_mod("A_pa_mod","A_pa_mod",this,_A_pa_mod),
   A_pe_mod("A_pe_mod","A_pe_mod",this,_A_pe_mod),
   A_S_mod("A_S_mod","A_S_mod",this,_A_S_mod),
   delta_2pe("delta_2pe","delta_2pe",this,_delta_2pe),
   delta_2pa("delta_2pa","delta_2pa",this,_delta_2pa),
   delta_20("delta_20","delta_20",this,_delta_20),
   delta_pa("delta_pa","delta_pa",this,_delta_pa),
   delta_pe("delta_pe","delta_pe",this,_delta_pe),
   delta_S("delta_S","delta_S",this,_delta_S)
 { 
 } 


 AngularPDF::AngularPDF(const AngularPDF& other, const char* name) :  
   RooAbsPdf(other,name), 
   helcosthetaK("helcosthetaK",this,other.helcosthetaK),
   helcosthetaL("helcosthetaL",this,other.helcosthetaL),
   helphi("helphi",this,other.helphi),
   A_2pe_mod("A_2pe_mod",this,other.A_2pe_mod),
   A_2pa_mod("A_2pa_mod",this,other.A_2pa_mod),
   A_20_mod("A_20_mod",this,other.A_20_mod),
   A_0_mod("A_0_mod",this,other.A_0_mod),
   A_pa_mod("A_pa_mod",this,other.A_pa_mod),
   A_pe_mod("A_pe_mod",this,other.A_pe_mod),
   A_S_mod("A_S_mod",this,other.A_S_mod),
   delta_2pe("delta_2pe",this,other.delta_2pe),
   delta_2pa("delta_2pa",this,other.delta_2pa),
   delta_20("delta_20",this,other.delta_20),
   delta_pa("delta_pa",this,other.delta_pa),
   delta_pe("delta_pe",this,other.delta_pe),
   delta_S("delta_S",this,other.delta_S)
 { 
 } 



 Double_t AngularPDF::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return 3*pow(A_0_mod, 2)*pow(helcosthetaK, 2)*pow(helcosthetaL, 2)/(4*M_PI) + sqrt(15)*A_0_mod*A_20_mod*helcosthetaK*pow(helcosthetaL, 2)*(6*pow(helcosthetaK, 2) - 2)*cos(delta_20)/(8*M_PI) - 3*sqrt(10)*A_0_mod*A_2pa_mod*pow(helcosthetaK, 2)*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*cos(delta_2pa)*cos(helphi)/(4*M_PI) - 3*sqrt(10)*A_0_mod*A_2pe_mod*pow(helcosthetaK, 2)*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*sin(delta_2pe)*sin(helphi)/(4*M_PI) + sqrt(3)*A_0_mod*A_S_mod*helcosthetaK*pow(helcosthetaL, 2)*cos(delta_S)/(2*M_PI) - 3*sqrt(2)*A_0_mod*A_pa_mod*helcosthetaK*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*cos(delta_pa)*cos(helphi)/(4*M_PI) + 5*pow(A_20_mod, 2)*pow(helcosthetaL, 2)*(-36*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1) + 12*pow(helcosthetaK, 2) + 4)/(64*M_PI) + 5*sqrt(6)*A_20_mod*A_2pa_mod*helcosthetaK*helcosthetaL*(-6*pow(helcosthetaK, 2) + 2)*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_20)*sin(delta_2pa) + cos(delta_20)*cos(delta_2pa))*cos(helphi)/(16*M_PI) + 5*sqrt(6)*A_20_mod*A_2pe_mod*helcosthetaK*helcosthetaL*(-6*pow(helcosthetaK, 2) + 2)*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(-sin(delta_20)*cos(delta_2pe) + sin(delta_2pe)*cos(delta_20))*sin(helphi)/(16*M_PI) + sqrt(5)*A_20_mod*A_S_mod*pow(helcosthetaL, 2)*(6*pow(helcosthetaK, 2) - 2)*(sin(delta_20)*sin(delta_S) + cos(delta_20)*cos(delta_S))/(8*M_PI) + sqrt(30)*A_20_mod*A_pa_mod*helcosthetaL*(-6*pow(helcosthetaK, 2) + 2)*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_20)*sin(delta_pa) + cos(delta_20)*cos(delta_pa))*cos(helphi)/(16*M_PI) + 15*pow(A_2pa_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*pow(cos(helphi), 2)/(8*M_PI) + 15*A_2pa_mod*A_2pe_mod*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*(-sin(delta_2pa)*cos(delta_2pe) + sin(delta_2pe)*cos(delta_2pa))*sin(helphi)*cos(helphi)/(4*M_PI) - sqrt(30)*A_2pa_mod*A_S_mod*helcosthetaK*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_2pa)*sin(delta_S) + cos(delta_2pa)*cos(delta_S))*cos(helphi)/(4*M_PI) + 3*sqrt(5)*A_2pa_mod*A_pa_mod*helcosthetaK*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*(sin(delta_2pa)*sin(delta_pa) + cos(delta_2pa)*cos(delta_pa))*pow(cos(helphi), 2)/(4*M_PI) + 15*pow(A_2pe_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*pow(sin(helphi), 2)/(8*M_PI) - sqrt(30)*A_2pe_mod*A_S_mod*helcosthetaK*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_2pe)*cos(delta_S) - sin(delta_S)*cos(delta_2pe))*sin(helphi)/(4*M_PI) + 3*sqrt(5)*A_2pe_mod*A_pa_mod*helcosthetaK*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*(sin(delta_2pe)*cos(delta_pa) - sin(delta_pa)*cos(delta_2pe))*sin(helphi)*cos(helphi)/(4*M_PI) + pow(A_S_mod, 2)*pow(helcosthetaL, 2)/(4*M_PI) - sqrt(6)*A_S_mod*A_pa_mod*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_S)*sin(delta_pa) + cos(delta_S)*cos(delta_pa))*cos(helphi)/(4*M_PI) + 3*pow(A_pa_mod, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*pow(cos(helphi), 2)/(8*M_PI) + 3*pow(A_pe_mod, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*pow(sin(helphi), 2)/(8*M_PI) ; 
 } 



 Int_t AngularPDF::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
 if ( matchArgs(allVars, analVars, helcosthetaL ) )  return 2;
 if ( matchArgs(allVars, analVars, helphi ) )  return 3;
 if ( matchArgs(allVars, analVars, helcosthetaK,helcosthetaL ) )  return 4;
 if ( matchArgs(allVars, analVars, helcosthetaK,helphi ) )  return 5;
 if ( matchArgs(allVars, analVars, helcosthetaL,helphi ) )  return 6;
 if ( matchArgs(allVars, analVars, helcosthetaK,helcosthetaL,helphi ) )  return 7;
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   // if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t AngularPDF::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
if ( code == 2)
{
Double_t Integral = pow(A_0_mod, 2)*pow(helcosthetaK, 2)/(2*M_PI) + sqrt(15)*A_0_mod*A_20_mod*helcosthetaK*(6*pow(helcosthetaK, 2) - 2)*cos(delta_20)/(12*M_PI) + sqrt(3)*A_0_mod*A_S_mod*helcosthetaK*cos(delta_S)/(3*M_PI) + 5*pow(A_20_mod, 2)*(-36*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1) + 12*pow(helcosthetaK, 2) + 4)/(96*M_PI) + sqrt(5)*A_20_mod*A_S_mod*(6*pow(helcosthetaK, 2) - 2)*(sin(delta_20)*sin(delta_S) + cos(delta_20)*cos(delta_S))/(12*M_PI) + 5*pow(A_2pa_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*pow(cos(helphi), 2)/(2*M_PI) + 5*A_2pa_mod*A_2pe_mod*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*(-sin(delta_2pa)*cos(delta_2pe) + sin(delta_2pe)*cos(delta_2pa))*sin(helphi)*cos(helphi)/M_PI + sqrt(5)*A_2pa_mod*A_pa_mod*helcosthetaK*(-pow(helcosthetaK, 2) + 1)*(sin(delta_2pa)*sin(delta_pa) + cos(delta_2pa)*cos(delta_pa))*pow(cos(helphi), 2)/M_PI + 5*pow(A_2pe_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*pow(sin(helphi), 2)/(2*M_PI) + sqrt(5)*A_2pe_mod*A_pa_mod*helcosthetaK*(-pow(helcosthetaK, 2) + 1)*(sin(delta_2pe)*cos(delta_pa) - sin(delta_pa)*cos(delta_2pe))*sin(helphi)*cos(helphi)/M_PI + pow(A_S_mod, 2)/(6*M_PI) + pow(A_pa_mod, 2)*(-pow(helcosthetaK, 2) + 1)*pow(cos(helphi), 2)/(2*M_PI) + pow(A_pe_mod, 2)*(-pow(helcosthetaK, 2) + 1)*pow(sin(helphi), 2)/(2*M_PI);
return Integral;
}
else if ( code == 3)
{
Double_t Integral = 3*pow(A_0_mod, 2)*pow(helcosthetaK, 2)*pow(helcosthetaL, 2)/2 + sqrt(15)*A_0_mod*A_20_mod*helcosthetaK*pow(helcosthetaL, 2)*(6*pow(helcosthetaK, 2) - 2)*cos(delta_20)/4 + sqrt(3)*A_0_mod*A_S_mod*helcosthetaK*pow(helcosthetaL, 2)*cos(delta_S) + 5*pow(A_20_mod, 2)*pow(helcosthetaL, 2)*(-36*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1) + 12*pow(helcosthetaK, 2) + 4)/32 + sqrt(5)*A_20_mod*A_S_mod*pow(helcosthetaL, 2)*(6*pow(helcosthetaK, 2) - 2)*(sin(delta_20)*sin(delta_S) + cos(delta_20)*cos(delta_S))/4 + 15*pow(A_2pa_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)/8 + 3*sqrt(5)*A_2pa_mod*A_pa_mod*helcosthetaK*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*(sin(delta_2pa)*sin(delta_pa) + cos(delta_2pa)*cos(delta_pa))/4 + 15*pow(A_2pe_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)/8 + pow(A_S_mod, 2)*pow(helcosthetaL, 2)/2 + 3*pow(A_pa_mod, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)/8 + 3*pow(A_pe_mod, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)/8;
return Integral;
}
else if ( code == 4)
{
Double_t Integral = (3*pow(A_20_mod, 2) - 4*pow(A_2pa_mod, 2)*pow(cos(helphi), 2) + 8*A_2pa_mod*A_2pe_mod*sin(delta_2pa)*sin(helphi)*cos(delta_2pe)*cos(helphi) - 8*A_2pa_mod*A_2pe_mod*sin(delta_2pe)*sin(helphi)*cos(delta_2pa)*cos(helphi) - 4*pow(A_2pe_mod, 2)*pow(sin(helphi), 2))/(4*M_PI) - (-5*pow(A_20_mod, 2) + 4*sqrt(5)*A_20_mod*A_S_mod*sin(delta_20)*sin(delta_S) + 4*sqrt(5)*A_20_mod*A_S_mod*cos(delta_20)*cos(delta_S) - 4*pow(A_S_mod, 2) - 12*pow(A_pa_mod, 2)*pow(cos(helphi), 2) - 12*pow(A_pe_mod, 2)*pow(sin(helphi), 2))/(12*M_PI) + (2*pow(A_0_mod, 2) - 5*pow(A_20_mod, 2) + 2*sqrt(5)*A_20_mod*A_S_mod*sin(delta_20)*sin(delta_S) + 2*sqrt(5)*A_20_mod*A_S_mod*cos(delta_20)*cos(delta_S) + 10*pow(A_2pa_mod, 2)*pow(cos(helphi), 2) - 20*A_2pa_mod*A_2pe_mod*sin(delta_2pa)*sin(helphi)*cos(delta_2pe)*cos(helphi) + 20*A_2pa_mod*A_2pe_mod*sin(delta_2pe)*sin(helphi)*cos(delta_2pa)*cos(helphi) + 10*pow(A_2pe_mod, 2)*pow(sin(helphi), 2) - 2*pow(A_pa_mod, 2)*pow(cos(helphi), 2) - 2*pow(A_pe_mod, 2)*pow(sin(helphi), 2))/(6*M_PI);
return Integral;
}
else if ( code == 5)
{
Double_t Integral = pow(A_0_mod, 2)*pow(helcosthetaL, 2) + pow(A_20_mod, 2)*pow(helcosthetaL, 2) - pow(A_2pa_mod, 2)*pow(helcosthetaL, 2)/2 + pow(A_2pa_mod, 2)/2 - pow(A_2pe_mod, 2)*pow(helcosthetaL, 2)/2 + pow(A_2pe_mod, 2)/2 + pow(A_S_mod, 2)*pow(helcosthetaL, 2) - pow(A_pa_mod, 2)*pow(helcosthetaL, 2)/2 + pow(A_pa_mod, 2)/2 - pow(A_pe_mod, 2)*pow(helcosthetaL, 2)/2 + pow(A_pe_mod, 2)/2;
return Integral;
}
else if ( code == 6)
{
Double_t Integral = pow(A_0_mod, 2)*pow(helcosthetaK, 2) + sqrt(15)*A_0_mod*A_20_mod*helcosthetaK*(6*pow(helcosthetaK, 2) - 2)*cos(delta_20)/6 + 2*sqrt(3)*A_0_mod*A_S_mod*helcosthetaK*cos(delta_S)/3 + 5*pow(A_20_mod, 2)*(-36*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1) + 12*pow(helcosthetaK, 2) + 4)/48 + sqrt(5)*A_20_mod*A_S_mod*(6*pow(helcosthetaK, 2) - 2)*(sin(delta_20)*sin(delta_S) + cos(delta_20)*cos(delta_S))/6 + 5*pow(A_2pa_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)/2 + sqrt(5)*A_2pa_mod*A_pa_mod*helcosthetaK*(-pow(helcosthetaK, 2) + 1)*(sin(delta_2pa)*sin(delta_pa) + cos(delta_2pa)*cos(delta_pa)) + 5*pow(A_2pe_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)/2 + pow(A_S_mod, 2)/3 + pow(A_pa_mod, 2)*(-pow(helcosthetaK, 2) + 1)/2 + pow(A_pe_mod, 2)*(-pow(helcosthetaK, 2) + 1)/2;
return Integral;
}
else if ( code == 7)
{
Double_t Integral = -(-3*M_PI*pow(A_20_mod, 2) + 2*M_PI*pow(A_2pa_mod, 2) - 4*A_2pa_mod*A_2pe_mod*sin(delta_2pa)*cos(delta_2pe) + 4*A_2pa_mod*A_2pe_mod*sin(delta_2pe)*cos(delta_2pa) + 2*M_PI*pow(A_2pe_mod, 2))/(4*M_PI) + (3*M_PI*pow(A_20_mod, 2) - 2*M_PI*pow(A_2pa_mod, 2) - 4*A_2pa_mod*A_2pe_mod*sin(delta_2pa)*cos(delta_2pe) + 4*A_2pa_mod*A_2pe_mod*sin(delta_2pe)*cos(delta_2pa) - 2*M_PI*pow(A_2pe_mod, 2))/(4*M_PI) - (-5*M_PI*pow(A_20_mod, 2) + 4*sqrt(5)*M_PI*A_20_mod*A_S_mod*sin(delta_20)*sin(delta_S) + 4*sqrt(5)*M_PI*A_20_mod*A_S_mod*cos(delta_20)*cos(delta_S) - 4*M_PI*pow(A_S_mod, 2) - 6*M_PI*pow(A_pa_mod, 2) - 6*M_PI*pow(A_pe_mod, 2))/(12*M_PI) + (5*M_PI*pow(A_20_mod, 2) - 4*sqrt(5)*M_PI*A_20_mod*A_S_mod*sin(delta_20)*sin(delta_S) - 4*sqrt(5)*M_PI*A_20_mod*A_S_mod*cos(delta_20)*cos(delta_S) + 4*M_PI*pow(A_S_mod, 2) + 6*M_PI*pow(A_pa_mod, 2) + 6*M_PI*pow(A_pe_mod, 2))/(12*M_PI) - (-2*M_PI*pow(A_0_mod, 2) + 5*M_PI*pow(A_20_mod, 2) - 2*sqrt(5)*M_PI*A_20_mod*A_S_mod*sin(delta_20)*sin(delta_S) - 2*sqrt(5)*M_PI*A_20_mod*A_S_mod*cos(delta_20)*cos(delta_S) - 5*M_PI*pow(A_2pa_mod, 2) + 10*A_2pa_mod*A_2pe_mod*sin(delta_2pa)*cos(delta_2pe) - 10*A_2pa_mod*A_2pe_mod*sin(delta_2pe)*cos(delta_2pa) - 5*M_PI*pow(A_2pe_mod, 2) + M_PI*pow(A_pa_mod, 2) + M_PI*pow(A_pe_mod, 2))/(6*M_PI) + (2*M_PI*pow(A_0_mod, 2) - 5*M_PI*pow(A_20_mod, 2) + 2*sqrt(5)*M_PI*A_20_mod*A_S_mod*sin(delta_20)*sin(delta_S) + 2*sqrt(5)*M_PI*A_20_mod*A_S_mod*cos(delta_20)*cos(delta_S) + 5*M_PI*pow(A_2pa_mod, 2) + 10*A_2pa_mod*A_2pe_mod*sin(delta_2pa)*cos(delta_2pe) - 10*A_2pa_mod*A_2pe_mod*sin(delta_2pe)*cos(delta_2pa) + 5*M_PI*pow(A_2pe_mod, 2) - M_PI*pow(A_pa_mod, 2) - M_PI*pow(A_pe_mod, 2))/(6*M_PI);
return Integral;
}
}