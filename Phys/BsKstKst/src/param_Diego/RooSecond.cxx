/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooSecond.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooSecond) 

 RooSecond::RooSecond(const char *name, const char *title, 
                        RooAbsReal& _helcosthetaK,
                        RooAbsReal& _helcosthetaL,
                        RooAbsReal& _helphi,
                        RooAbsReal& _A_2pe_mod,
                        RooAbsReal& _A_2pa_mod,
                        RooAbsReal& _A_20_mod,
                        RooAbsReal& _A_0_mod,
                        RooAbsReal& _A_pa_mod,
                        RooAbsReal& _A_pe_mod,
                        RooAbsReal& _A_S_mod,
                        RooAbsReal& _delta_2pe,
                        RooAbsReal& _delta_2pa,
                        RooAbsReal& _delta_20,
                        RooAbsReal& _delta_pa,
                        RooAbsReal& _delta_pe,
                        RooAbsReal& _delta_S,
                        RooAbsReal& _c1th,
                        RooAbsReal& _c2th,
                        RooAbsReal& _c3th,
                        RooAbsReal& _c4th,
                        RooAbsReal& _yth) :
   RooAbsPdf(name,title), 
   helcosthetaK("helcosthetaK","helcosthetaK",this,_helcosthetaK),
   helcosthetaL("helcosthetaL","helcosthetaL",this,_helcosthetaL),
   helphi("helphi","helphi",this,_helphi),
   A_2pe_mod("A_2pe_mod","A_2pe_mod",this,_A_2pe_mod),
   A_2pa_mod("A_2pa_mod","A_2pa_mod",this,_A_2pa_mod),
   A_20_mod("A_20_mod","A_20_mod",this,_A_20_mod),
   A_0_mod("A_0_mod","A_0_mod",this,_A_0_mod),
   A_pa_mod("A_pa_mod","A_pa_mod",this,_A_pa_mod),
   A_pe_mod("A_pe_mod","A_pe_mod",this,_A_pe_mod),
   A_S_mod("A_S_mod","A_S_mod",this,_A_S_mod),
   delta_2pe("delta_2pe","delta_2pe",this,_delta_2pe),
   delta_2pa("delta_2pa","delta_2pa",this,_delta_2pa),
   delta_20("delta_20","delta_20",this,_delta_20),
   delta_pa("delta_pa","delta_pa",this,_delta_pa),
   delta_pe("delta_pe","delta_pe",this,_delta_pe),
   delta_S("delta_S","delta_S",this,_delta_S),
   c1th("c1th","c1th",this,_c1th),
   c2th("c2th","c2th",this,_c2th),
   c3th("c3th","c3th",this,_c3th),
   c4th("c4th","c4th",this,_c4th),
   yth("yth","yth",this,_yth)
 { 
 } 


 RooSecond::RooSecond(const RooSecond& other, const char* name) :  
   RooAbsPdf(other,name), 
   helcosthetaK("helcosthetaK",this,other.helcosthetaK),
   helcosthetaL("helcosthetaL",this,other.helcosthetaL),
   helphi("helphi",this,other.helphi),
   A_2pe_mod("A_2pe_mod",this,other.A_2pe_mod),
   A_2pa_mod("A_2pa_mod",this,other.A_2pa_mod),
   A_20_mod("A_20_mod",this,other.A_20_mod),
   A_0_mod("A_0_mod",this,other.A_0_mod),
   A_pa_mod("A_pa_mod",this,other.A_pa_mod),
   A_pe_mod("A_pe_mod",this,other.A_pe_mod),
   A_S_mod("A_S_mod",this,other.A_S_mod),
   delta_2pe("delta_2pe",this,other.delta_2pe),
   delta_2pa("delta_2pa",this,other.delta_2pa),
   delta_20("delta_20",this,other.delta_20),
   delta_pa("delta_pa",this,other.delta_pa),
   delta_pe("delta_pe",this,other.delta_pe),
   delta_S("delta_S",this,other.delta_S),
   c1th("c1th",this,other.c1th),
   c2th("c2th",this,other.c2th),
   c3th("c3th",this,other.c3th),
   c4th("c4th",this,other.c4th),
   yth("yth",this,other.yth)
 { 
 } 



 Double_t RooSecond::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return (c1th*helcosthetaK + c2th*pow(helcosthetaK, 2) + c3th*pow(helcosthetaK, 3) + c4th*pow(helcosthetaK, 4) + pow(helcosthetaK, 5)*(-c1th - c2th - c3th - c4th + yth - 1) + 1)*(c1th*helcosthetaL + c2th*pow(helcosthetaL, 2) + c3th*pow(helcosthetaL, 3) + c4th*pow(helcosthetaL, 4) + pow(helcosthetaL, 5)*(-c1th - c2th - c3th - c4th + yth - 1) + 1)*(3*pow(A_0_mod, 2)*pow(helcosthetaK, 2)*pow(helcosthetaL, 2)/(4*M_PI) + sqrt(15)*A_0_mod*A_20_mod*helcosthetaK*pow(helcosthetaL, 2)*(6*pow(helcosthetaK, 2) - 2)*cos(delta_20)/(8*M_PI) - 3*sqrt(10)*A_0_mod*A_2pa_mod*pow(helcosthetaK, 2)*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*cos(delta_2pa)*cos(helphi)/(4*M_PI) - 3*sqrt(10)*A_0_mod*A_2pe_mod*pow(helcosthetaK, 2)*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*sin(delta_2pe)*sin(helphi)/(4*M_PI) + sqrt(3)*A_0_mod*A_S_mod*helcosthetaK*pow(helcosthetaL, 2)*cos(delta_S)/(2*M_PI) - 3*sqrt(2)*A_0_mod*A_pa_mod*helcosthetaK*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*cos(delta_pa)*cos(helphi)/(4*M_PI) + 5*pow(A_20_mod, 2)*pow(helcosthetaL, 2)*(-36*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1) + 12*pow(helcosthetaK, 2) + 4)/(64*M_PI) + 5*sqrt(6)*A_20_mod*A_2pa_mod*helcosthetaK*helcosthetaL*(-6*pow(helcosthetaK, 2) + 2)*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_20)*sin(delta_2pa) + cos(delta_20)*cos(delta_2pa))*cos(helphi)/(16*M_PI) + 5*sqrt(6)*A_20_mod*A_2pe_mod*helcosthetaK*helcosthetaL*(-6*pow(helcosthetaK, 2) + 2)*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(-sin(delta_20)*cos(delta_2pe) + sin(delta_2pe)*cos(delta_20))*sin(helphi)/(16*M_PI) + sqrt(5)*A_20_mod*A_S_mod*pow(helcosthetaL, 2)*(6*pow(helcosthetaK, 2) - 2)*(sin(delta_20)*sin(delta_S) + cos(delta_20)*cos(delta_S))/(8*M_PI) + sqrt(30)*A_20_mod*A_pa_mod*helcosthetaL*(-6*pow(helcosthetaK, 2) + 2)*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_20)*sin(delta_pa) + cos(delta_20)*cos(delta_pa))*cos(helphi)/(16*M_PI) + 15*pow(A_2pa_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*pow(cos(helphi), 2)/(8*M_PI) + 15*A_2pa_mod*A_2pe_mod*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*(-sin(delta_2pa)*cos(delta_2pe) + sin(delta_2pe)*cos(delta_2pa))*sin(helphi)*cos(helphi)/(4*M_PI) - sqrt(30)*A_2pa_mod*A_S_mod*helcosthetaK*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_2pa)*sin(delta_S) + cos(delta_2pa)*cos(delta_S))*cos(helphi)/(4*M_PI) + 3*sqrt(5)*A_2pa_mod*A_pa_mod*helcosthetaK*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*(sin(delta_2pa)*sin(delta_pa) + cos(delta_2pa)*cos(delta_pa))*pow(cos(helphi), 2)/(4*M_PI) + 15*pow(A_2pe_mod, 2)*pow(helcosthetaK, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*pow(sin(helphi), 2)/(8*M_PI) - sqrt(30)*A_2pe_mod*A_S_mod*helcosthetaK*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_2pe)*cos(delta_S) - sin(delta_S)*cos(delta_2pe))*sin(helphi)/(4*M_PI) + 3*sqrt(5)*A_2pe_mod*A_pa_mod*helcosthetaK*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*(sin(delta_2pe)*cos(delta_pa) - sin(delta_pa)*cos(delta_2pe))*sin(helphi)*cos(helphi)/(4*M_PI) + pow(A_S_mod, 2)*pow(helcosthetaL, 2)/(4*M_PI) - sqrt(6)*A_S_mod*A_pa_mod*helcosthetaL*sqrt(-pow(helcosthetaK, 2) + 1)*sqrt(-pow(helcosthetaL, 2) + 1)*(sin(delta_S)*sin(delta_pa) + cos(delta_S)*cos(delta_pa))*cos(helphi)/(4*M_PI) + 3*pow(A_pa_mod, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*pow(cos(helphi), 2)/(8*M_PI) + 3*pow(A_pe_mod, 2)*(-pow(helcosthetaK, 2) + 1)*(-pow(helcosthetaL, 2) + 1)*pow(sin(helphi), 2)/(8*M_PI)) ; 
 } 



 Int_t RooSecond::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   // if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t RooSecond::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   // assert(code==1) ; 
   // return (x.max(rangeName)-x.min(rangeName)) ; 
   return 0 ; 
 } 



