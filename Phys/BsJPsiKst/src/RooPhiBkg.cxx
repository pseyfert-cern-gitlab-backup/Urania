/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by Urania using RooClassFactory               *
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooPhiBkg.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooPhiBkg) 

 RooPhiBkg::RooPhiBkg(const char *name, const char *title, 
                        RooAbsReal& _helphi,
                        RooAbsReal& _c1_phi,
                        RooAbsReal& _c2_phi,
                        RooAbsReal& _c3_phi) :
   RooAbsPdf(name,title), 
   helphi("helphi","helphi",this,_helphi),
   c1_phi("c1_phi","c1_phi",this,_c1_phi),
   c2_phi("c2_phi","c2_phi",this,_c2_phi),
   c3_phi("c3_phi","c3_phi",this,_c3_phi)
 { 
 } 


 RooPhiBkg::RooPhiBkg(const RooPhiBkg& other, const char* name) :  
   RooAbsPdf(other,name), 
   helphi("helphi",this,other.helphi),
   c1_phi("c1_phi",this,other.c1_phi),
   c2_phi("c2_phi",this,other.c2_phi),
   c3_phi("c3_phi",this,other.c3_phi)
 { 
 } 



 Double_t RooPhiBkg::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return c1_phi*cos(c2_phi*helphi + c3_phi) + 1.0 ; 
 } 



 Int_t RooPhiBkg::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
 if ( matchArgs(allVars, analVars, helphi ) )  return 1;
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   // if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t RooPhiBkg::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
if ( code == 1)
{
Double_t Integral = c1_phi*sin(M_PI*c2_phi - c3_phi)/c2_phi + c1_phi*sin(M_PI*c2_phi + c3_phi)/c2_phi + 2.0*M_PI;
return Integral;
}
}