/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by Urania using RooClassFactory               *
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "TristanJpsiKpi_J1.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(TristanJpsiKpi_J1) 

 TristanJpsiKpi_J1::TristanJpsiKpi_J1(const char *name, const char *title, 
                        RooAbsReal& _helcosthetaK,
                        RooAbsReal& _helcosthetaL,
                        RooAbsReal& _helphi,
                        RooAbsReal& _As2,
                        RooAbsReal& _fL,
                        RooAbsReal& _fpa,
                        RooAbsReal& _delta_pa,
                        RooAbsReal& _delta_pe,
                        RooAbsReal& _delta_S,
                        RooAbsReal& _w_2A_pe,
                        RooAbsReal& _w_A_S2,
                        RooAbsReal& _w_A_0A_pe,
                        RooAbsReal& _w_A_SA_pe,
                        RooAbsReal& _w_A_paA_pe,
                        RooAbsReal& _w_2A_pa,
                        RooAbsReal& _w_A_SA_pa,
                        RooAbsReal& _w_A_0A_pa,
                        RooAbsReal& _w_A_SA_0,
                        RooAbsReal& _w_A_02) :
   RooAbsPdf(name,title), 
   helcosthetaK("helcosthetaK","helcosthetaK",this,_helcosthetaK),
   helcosthetaL("helcosthetaL","helcosthetaL",this,_helcosthetaL),
   helphi("helphi","helphi",this,_helphi),
   As2("As2","As2",this,_As2),
   fL("fL","fL",this,_fL),
   fpa("fpa","fpa",this,_fpa),
   delta_pa("delta_pa","delta_pa",this,_delta_pa),
   delta_pe("delta_pe","delta_pe",this,_delta_pe),
   delta_S("delta_S","delta_S",this,_delta_S),
   w_2A_pe("w_2A_pe","w_2A_pe",this,_w_2A_pe),
   w_A_S2("w_A_S2","w_A_S2",this,_w_A_S2),
   w_A_0A_pe("w_A_0A_pe","w_A_0A_pe",this,_w_A_0A_pe),
   w_A_SA_pe("w_A_SA_pe","w_A_SA_pe",this,_w_A_SA_pe),
   w_A_paA_pe("w_A_paA_pe","w_A_paA_pe",this,_w_A_paA_pe),
   w_2A_pa("w_2A_pa","w_2A_pa",this,_w_2A_pa),
   w_A_SA_pa("w_A_SA_pa","w_A_SA_pa",this,_w_A_SA_pa),
   w_A_0A_pa("w_A_0A_pa","w_A_0A_pa",this,_w_A_0A_pa),
   w_A_SA_0("w_A_SA_0","w_A_SA_0",this,_w_A_SA_0),
   w_A_02("w_A_02","w_A_02",this,_w_A_02)
 { 
 } 


 TristanJpsiKpi_J1::TristanJpsiKpi_J1(const TristanJpsiKpi_J1& other, const char* name) :  
   RooAbsPdf(other,name), 
   helcosthetaK("helcosthetaK",this,other.helcosthetaK),
   helcosthetaL("helcosthetaL",this,other.helcosthetaL),
   helphi("helphi",this,other.helphi),
   As2("As2",this,other.As2),
   fL("fL",this,other.fL),
   fpa("fpa",this,other.fpa),
   delta_pa("delta_pa",this,other.delta_pa),
   delta_pe("delta_pe",this,other.delta_pe),
   delta_S("delta_S",this,other.delta_S),
   w_2A_pe("w_2A_pe",this,other.w_2A_pe),
   w_A_S2("w_A_S2",this,other.w_A_S2),
   w_A_0A_pe("w_A_0A_pe",this,other.w_A_0A_pe),
   w_A_SA_pe("w_A_SA_pe",this,other.w_A_SA_pe),
   w_A_paA_pe("w_A_paA_pe",this,other.w_A_paA_pe),
   w_2A_pa("w_2A_pa",this,other.w_2A_pa),
   w_A_SA_pa("w_A_SA_pa",this,other.w_A_SA_pa),
   w_A_0A_pa("w_A_0A_pa",this,other.w_A_0A_pa),
   w_A_SA_0("w_A_SA_0",this,other.w_A_SA_0),
   w_A_02("w_A_02",this,other.w_A_02)
 { 
 } 



 Double_t TristanJpsiKpi_J1::evaluate() const 
 { 
Double_t sthk = sqrt(-pow(helcosthetaK, 2) + 1);
Double_t sthl = sqrt(-pow(helcosthetaL, 2) + 1);
Double_t sthk2 = -pow(helcosthetaK, 2) + 1;
Double_t sthl2 = -pow(helcosthetaL, 2) + 1;
Double_t cthk2 = pow(helcosthetaK, 2);
Double_t cthl2 = pow(helcosthetaL, 2);
Double_t cosphi2 = pow(cos(helphi), 2);
Double_t sinphi2 = pow(sin(helphi), 2);
Double_t cosphi = cos(helphi);
Double_t sinphi = sin(helphi);
Double_t As = sqrt(As2);
Double_t sqfL = sqrt(fL);
Double_t sqfpa = sqrt(fpa);
Double_t cdelta_pa = cos(delta_pa);
Double_t cdelta_pe = cos(delta_pe);
Double_t sdelta_pa = sin(delta_pa);
Double_t sdelta_pe = sin(delta_pe);
Double_t sdelta_s = sin(delta_S);
Double_t cdelta_s = cos(delta_S);
Double_t sq2 = sqrt(2);
Double_t sq3 = sqrt(3);
Double_t sq5 = sqrt(5);
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return As*cdelta_s*helcosthetaK*sq3*sqfL*sthl2*sqrt(-As2 + 1)/(2*M_PI) - sqrt(6)*As*cosphi*helcosthetaL*sqfpa*sthk*sthl*sqrt(-As2 + 1)*(cdelta_pa*cdelta_s + sdelta_pa*sdelta_s)/(4*M_PI) + sqrt(6)*As*helcosthetaL*sinphi*sthk*sthl*sqrt((-As2 + 1)*(-fL - fpa + 1))*(-cdelta_pe*sdelta_s + cdelta_s*sdelta_pe)/(4*M_PI) + As2*sthl2/(4*M_PI) - 3*cdelta_pa*cosphi*helcosthetaK*helcosthetaL*sq2*sqfL*sqfpa*sthk*sthl*(-As2 + 1)/(4*M_PI) - 3*cosphi*sinphi*sqfpa*sthk2*sthl2*sqrt((-As2 + 1)*(-fL - fpa + 1))*sqrt(-As2 + 1)*(-cdelta_pa*sdelta_pe + cdelta_pe*sdelta_pa)/(4*M_PI) + 3*cthk2*fL*sthl2*(-As2 + 1)/(4*M_PI) + 3*fpa*sthk2*(-As2 + 1)*(2*cosphi2*cthl2 + 2*sinphi2)/(16*M_PI) + 3*helcosthetaK*helcosthetaL*sdelta_pe*sinphi*sq2*sqfL*sthk*sthl*sqrt((-As2 + 1)*(-fL - fpa + 1))*sqrt(-As2 + 1)/(4*M_PI) + 3*sthk2*(-As2 + 1)*(-fL - fpa + 1)*(-2*cosphi2*cthl2 + 2*cosphi2 + 2*cthl2)/(16*M_PI) ; 
 } 



 Int_t TristanJpsiKpi_J1::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
 if ( matchArgs(allVars, analVars, helcosthetaK,helcosthetaL,helphi ) )  return 1;
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   // if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t TristanJpsiKpi_J1::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
Double_t sthk = sqrt(-pow(helcosthetaK, 2) + 1);
Double_t sthl = sqrt(-pow(helcosthetaL, 2) + 1);
Double_t sthk2 = -pow(helcosthetaK, 2) + 1;
Double_t sthl2 = -pow(helcosthetaL, 2) + 1;
Double_t cthk2 = pow(helcosthetaK, 2);
Double_t cthl2 = pow(helcosthetaL, 2);
Double_t cosphi2 = pow(cos(helphi), 2);
Double_t sinphi2 = pow(sin(helphi), 2);
Double_t cosphi = cos(helphi);
Double_t sinphi = sin(helphi);
Double_t As = sqrt(As2);
Double_t sqfL = sqrt(fL);
Double_t sqfpa = sqrt(fpa);
Double_t cdelta_pa = cos(delta_pa);
Double_t cdelta_pe = cos(delta_pe);
Double_t sdelta_pa = sin(delta_pa);
Double_t sdelta_pe = sin(delta_pe);
Double_t sdelta_s = sin(delta_S);
Double_t cdelta_s = cos(delta_S);
Double_t sq2 = sqrt(2);
Double_t sq3 = sqrt(3);
Double_t sq5 = sqrt(5);
if ( code == 1)
{
Double_t Integral = As*cdelta_s*sqfL*w_A_SA_0*sqrt(-As2 + 1) + As*sqfpa*w_A_SA_pa*sqrt(-As2 + 1)*(cdelta_pa*cdelta_s + sdelta_pa*sdelta_s) + As*w_A_SA_pe*sqrt((-As2 + 1)*(-fL - fpa + 1))*(-cdelta_pe*sdelta_s + cdelta_s*sdelta_pe) + As2*w_A_S2 + cdelta_pa*sqfL*sqfpa*w_A_0A_pa*(-As2 + 1) + fL*w_A_02*(-As2 + 1) + fpa*w_2A_pa*(-As2 + 1) + sdelta_pe*sqfL*w_A_0A_pe*sqrt((-As2 + 1)*(-fL - fpa + 1))*sqrt(-As2 + 1) + sqfpa*w_A_paA_pe*sqrt((-As2 + 1)*(-fL - fpa + 1))*sqrt(-As2 + 1)*(-cdelta_pa*sdelta_pe + cdelta_pe*sdelta_pa) + w_2A_pe*(-As2 + 1)*(-fL - fpa + 1);
return Integral;
}
}