/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "AngJpsiKst_Swave_ks.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(AngJpsiKst_Swave_ks) 

 AngJpsiKst_Swave_ks::AngJpsiKst_Swave_ks(const char *name, const char *title, 
                        RooAbsReal& _CPsi,
                        RooAbsReal& _CTheta,
                        RooAbsReal& _Phi,
                        RooAbsReal& _A0,
                        RooAbsReal& _Apa,
                        RooAbsReal& _Ape,
                        RooAbsReal& _As,
                        RooAbsReal& _dpa,
                        RooAbsReal& _ks1,
                        RooAbsReal& _ks2,
                        RooAbsReal& _c1_psi,
                        RooAbsReal& _c2_psi,
                        RooAbsReal& _c3_psi,
                        RooAbsReal& _c4_psi,
                        RooAbsReal& _c5_psi,
                        RooAbsReal& _c2_theta,
                        RooAbsReal& _c1_phi,
                        RooAbsReal& _c2_phi,
                        RooAbsReal& _c3_phi) :
   RooAbsPdf(name,title), 
   CPsi("CPsi","CPsi",this,_CPsi),
   CTheta("CTheta","CTheta",this,_CTheta),
   Phi("Phi","Phi",this,_Phi),
   A0("A0","A0",this,_A0),
   Apa("Apa","Apa",this,_Apa),
   Ape("Ape","Ape",this,_Ape),
   As("As","As",this,_As),
   dpa("dpa","dpa",this,_dpa),
   ks1("ks1","ks1",this,_ks1),
   ks2("ks2","ks2",this,_ks2),
   c1_psi("c1_psi","c1_psi",this,_c1_psi),
   c2_psi("c2_psi","c2_psi",this,_c2_psi),
   c3_psi("c3_psi","c3_psi",this,_c3_psi),
   c4_psi("c4_psi","c4_psi",this,_c4_psi),
   c5_psi("c5_psi","c5_psi",this,_c5_psi),
   c2_theta("c2_theta","c2_theta",this,_c2_theta),
   c1_phi("c1_phi","c1_phi",this,_c1_phi),
   c2_phi("c2_phi","c2_phi",this,_c2_phi),
   c3_phi("c3_phi","c3_phi",this,_c3_phi)
 { 
 } 


 AngJpsiKst_Swave_ks::AngJpsiKst_Swave_ks(const AngJpsiKst_Swave_ks& other, const char* name) :  
   RooAbsPdf(other,name), 
   CPsi("CPsi",this,other.CPsi),
   CTheta("CTheta",this,other.CTheta),
   Phi("Phi",this,other.Phi),
   A0("A0",this,other.A0),
   Apa("Apa",this,other.Apa),
   Ape("Ape",this,other.Ape),
   As("As",this,other.As),
   dpa("dpa",this,other.dpa),
   ks1("ks1",this,other.ks1),
   ks2("ks2",this,other.ks2),
   c1_psi("c1_psi",this,other.c1_psi),
   c2_psi("c2_psi",this,other.c2_psi),
   c3_psi("c3_psi",this,other.c3_psi),
   c4_psi("c4_psi",this,other.c4_psi),
   c5_psi("c5_psi",this,other.c5_psi),
   c2_theta("c2_theta",this,other.c2_theta),
   c1_phi("c1_phi",this,other.c1_phi),
   c2_phi("c2_phi",this,other.c2_phi),
   c3_phi("c3_phi",this,other.c3_phi)
 { 
 } 



 Double_t AngJpsiKst_Swave_ks::evaluate() const 
 { 
// ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 

   Double_t K1 = A0*A0 ;
   Double_t K2 = Apa*Apa ;
   Double_t K3 = Ape*Ape ;
   Double_t K5 = A0*Apa*cos(dpa) ;


   Double_t K7 = As*As;
   Double_t K8 = Apa*As*ks1;
   Double_t K10 = A0*As*ks2;
   


   Double_t CPsi2 = CPsi*CPsi;
   Double_t SPsi2 = 1 - CPsi2;
   Double_t SPsi = sqrt(SPsi2);
   Double_t CTheta2 = CTheta*CTheta;
   Double_t STheta2 = 1-CTheta2;
   Double_t CPhi = cos(Phi);
   Double_t SPhi = sin(Phi);
   Double_t CPhi2 = CPhi*CPhi;
   Double_t SPhi2 = SPhi*SPhi;

   Double_t f1 = 2*CPsi2*(1-STheta2*CPhi2);
   Double_t f2 = SPsi2*(1-STheta2*SPhi2);
   Double_t f3 = SPsi2*STheta2;
   Double_t f5 = sqrt(2.)*SPsi*CPsi*STheta2*2.*SPhi*CPhi;

   Double_t f7 = 2./3.*(1-STheta2*CPhi2);
   Double_t f8 = sqrt(6.)/3.*SPsi*STheta2*2.*SPhi*CPhi;
   Double_t f10 = 4.*sqrt(3.)/3.*CPsi*(1-STheta2*CPhi2);
   
   

   Double_t phys = K1*f1 + K2*f2 + K3*f3 + K5*f5 + K7*f7 + K8*f8 + K10*f10;


   //Angular acceptance

   //Psi
   Double_t acc_psi = 1. + c1_psi*CPsi + c2_psi*CPsi2 + c3_psi*CPsi2*CPsi + c4_psi*CPsi2*CPsi2 + c5_psi*CPsi2*CPsi2*CPsi;
   Double_t acc_theta = 1. + c2_theta*CTheta2;
   Double_t acc_phi = 1. + c1_phi*cos( c2_phi*Phi + c3_phi);//+c4_phi*cos(c5_phi*Phi + c6_phi);

   Double_t Acc = acc_psi*acc_theta*acc_phi;

   Double_t PDF = Acc*phys;
   if(PDF<0.){
     PDF = 0.;

   }
 return PDF; 

 } 



