/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by Urania using RooClassFactory               *
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "AccAngJpsiKpi_J1.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(AccAngJpsiKpi_J1) 

 AccAngJpsiKpi_J1::AccAngJpsiKpi_J1(const char *name, const char *title, 
                        RooAbsReal& _helcosthetaK,
                        RooAbsReal& _helcosthetaL,
                        RooAbsReal& _helphi,
                        RooAbsReal& _As2,
                        RooAbsReal& _fL,
                        RooAbsReal& _fpa,
                        RooAbsReal& _delta_pa,
                        RooAbsReal& _delta_pe,
                        RooAbsReal& _delta_S,
                        RooAbsReal& _c1_psi,
                        RooAbsReal& _c2_psi,
                        RooAbsReal& _c3_psi,
                        RooAbsReal& _c4_psi,
                        RooAbsReal& _y_acc,
                        RooAbsReal& _c2_theta) :
   RooAbsPdf(name,title), 
   helcosthetaK("helcosthetaK","helcosthetaK",this,_helcosthetaK),
   helcosthetaL("helcosthetaL","helcosthetaL",this,_helcosthetaL),
   helphi("helphi","helphi",this,_helphi),
   As2("As2","As2",this,_As2),
   fL("fL","fL",this,_fL),
   fpa("fpa","fpa",this,_fpa),
   delta_pa("delta_pa","delta_pa",this,_delta_pa),
   delta_pe("delta_pe","delta_pe",this,_delta_pe),
   delta_S("delta_S","delta_S",this,_delta_S),
   c1_psi("c1_psi","c1_psi",this,_c1_psi),
   c2_psi("c2_psi","c2_psi",this,_c2_psi),
   c3_psi("c3_psi","c3_psi",this,_c3_psi),
   c4_psi("c4_psi","c4_psi",this,_c4_psi),
   y_acc("y_acc","y_acc",this,_y_acc),
   c2_theta("c2_theta","c2_theta",this,_c2_theta)
 { 
 } 


 AccAngJpsiKpi_J1::AccAngJpsiKpi_J1(const AccAngJpsiKpi_J1& other, const char* name) :  
   RooAbsPdf(other,name), 
   helcosthetaK("helcosthetaK",this,other.helcosthetaK),
   helcosthetaL("helcosthetaL",this,other.helcosthetaL),
   helphi("helphi",this,other.helphi),
   As2("As2",this,other.As2),
   fL("fL",this,other.fL),
   fpa("fpa",this,other.fpa),
   delta_pa("delta_pa",this,other.delta_pa),
   delta_pe("delta_pe",this,other.delta_pe),
   delta_S("delta_S",this,other.delta_S),
   c1_psi("c1_psi",this,other.c1_psi),
   c2_psi("c2_psi",this,other.c2_psi),
   c3_psi("c3_psi",this,other.c3_psi),
   c4_psi("c4_psi",this,other.c4_psi),
   y_acc("y_acc",this,other.y_acc),
   c2_theta("c2_theta",this,other.c2_theta)
 { 
 } 



 Double_t AccAngJpsiKpi_J1::evaluate() const 
 { 
Double_t sthk = sqrt(-pow(helcosthetaK, 2) + 1);
Double_t sthl = sqrt(-pow(helcosthetaL, 2) + 1);
Double_t sthk2 = -pow(helcosthetaK, 2) + 1;
Double_t sthl2 = -pow(helcosthetaL, 2) + 1;
Double_t cthk2 = pow(helcosthetaK, 2);
Double_t cthl2 = pow(helcosthetaL, 2);
Double_t cosphi2 = pow(cos(helphi), 2);
Double_t sinphi2 = pow(sin(helphi), 2);
Double_t cosphi = cos(helphi);
Double_t sinphi = sin(helphi);
Double_t As = sqrt(As2);
Double_t sqfL = sqrt(fL);
Double_t sqfpa = sqrt(fpa);
Double_t cdelta_pa = cos(delta_pa);
Double_t cdelta_pe = cos(delta_pe);
Double_t sdelta_pa = sin(delta_pa);
Double_t sdelta_pe = sin(delta_pe);
Double_t sdelta_s = sin(delta_S);
Double_t cdelta_s = cos(delta_S);
Double_t sq2 = sqrt(2);
Double_t sq3 = sqrt(3);
Double_t sq5 = sqrt(5);
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return (c2_theta*cthl2 + 1.0)*(c1_psi*helcosthetaK + c2_psi*cthk2 + c3_psi*pow(cthk2, 3.0/2.0) + c4_psi*pow(cthk2, 2) + pow(cthk2, 5.0/2.0)*(-c1_psi - c2_psi - c3_psi - c4_psi + y_acc - 1) + 1.0)*(As*cdelta_s*helcosthetaK*sq3*sqfL*sthl2*sqrt(-As2 + 1)/(2*M_PI) + sqrt(6)*As*cosphi*helcosthetaL*sqfpa*sthk*sthl*sqrt(-As2 + 1)*(cdelta_pa*cdelta_s + sdelta_pa*sdelta_s)/(4*M_PI) + sqrt(6)*As*helcosthetaL*sinphi*sthk*sthl*sqrt((-As2 + 1)*(-fL - fpa + 1))*(-cdelta_pe*sdelta_s + cdelta_s*sdelta_pe)/(4*M_PI) + As2*sthl2/(4*M_PI) + 3*cdelta_pa*cosphi*helcosthetaK*helcosthetaL*sq2*sqfL*sqfpa*sthk*sthl*(-As2 + 1)/(4*M_PI) + 3*cosphi*sinphi*sqfpa*sthk2*sthl2*sqrt((-As2 + 1)*(-fL - fpa + 1))*sqrt(-As2 + 1)*(-cdelta_pa*sdelta_pe + cdelta_pe*sdelta_pa)/(4*M_PI) + 3*cthk2*fL*sthl2*(-As2 + 1)/(4*M_PI) + 3*fpa*sthk2*(-As2 + 1)*(2*cosphi2*cthl2 + 2*sinphi2)/(16*M_PI) + 3*helcosthetaK*helcosthetaL*sdelta_pe*sinphi*sq2*sqfL*sthk*sthl*sqrt((-As2 + 1)*(-fL - fpa + 1))*sqrt(-As2 + 1)/(4*M_PI) + 3*sthk2*(-As2 + 1)*(-fL - fpa + 1)*(-2*cosphi2*cthl2 + 2*cosphi2 + 2*cthl2)/(16*M_PI)) ; 
 } 



 Int_t AccAngJpsiKpi_J1::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
 if ( matchArgs(allVars, analVars, helphi,helcosthetaK,helcosthetaL ) )  return 1;
 if ( matchArgs(allVars, analVars, helcosthetaK,helcosthetaL ) )  return 2;
 if ( matchArgs(allVars, analVars, helphi,helcosthetaK ) )  return 3;
 if ( matchArgs(allVars, analVars, helphi,helcosthetaL ) )  return 4;
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   // if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t AccAngJpsiKpi_J1::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
Double_t sthk = sqrt(-pow(helcosthetaK, 2) + 1);
Double_t sthl = sqrt(-pow(helcosthetaL, 2) + 1);
Double_t sthk2 = -pow(helcosthetaK, 2) + 1;
Double_t sthl2 = -pow(helcosthetaL, 2) + 1;
Double_t cthk2 = pow(helcosthetaK, 2);
Double_t cthl2 = pow(helcosthetaL, 2);
Double_t cosphi2 = pow(cos(helphi), 2);
Double_t sinphi2 = pow(sin(helphi), 2);
Double_t cosphi = cos(helphi);
Double_t sinphi = sin(helphi);
Double_t As = sqrt(As2);
Double_t sqfL = sqrt(fL);
Double_t sqfpa = sqrt(fpa);
Double_t cdelta_pa = cos(delta_pa);
Double_t cdelta_pe = cos(delta_pe);
Double_t sdelta_pa = sin(delta_pa);
Double_t sdelta_pe = sin(delta_pe);
Double_t sdelta_s = sin(delta_S);
Double_t cdelta_s = cos(delta_S);
Double_t sq2 = sqrt(2);
Double_t sq3 = sqrt(3);
Double_t sq5 = sqrt(5);
if ( code == 1)
{
Double_t Integral = 0.0318309886183791*As2*(c2_psi*(c2_theta*(-1.67551608191456*fL + 2.22044604925031e-16*fpa - 0.558505360638185) - 16.7551608191456*fL - 1.77635683940025e-15*fpa + 5.58505360638186) + c2_theta*(c4_psi*(-2.15423496246157*fL + 2.77555756156289e-16*fpa + 0.239359440273508) + 8.37758040957278*fL - 8.88178419700125e-16*fpa - 8.37758040957278) - 14.3615664164105*c4_psi*fL + 9.99200722162641e-16*c4_psi*fpa + 4.78718880547016*c4_psi + 7.105427357601e-15*fL + 1.77635683940025e-15*fpa + 3.5527136788005e-15) + 0.0533333333333334*c2_psi*c2_theta*fL - 7.06789929214115e-18*c2_psi*c2_theta*fpa + 0.106666666666667*c2_psi*c2_theta + 0.533333333333333*c2_psi*fL + 5.65431943371292e-17*c2_psi*fpa + 0.266666666666667*c2_psi + 0.0685714285714286*c2_theta*c4_psi*fL - 8.83487411517644e-18*c2_theta*c4_psi*fpa + 0.0457142857142857*c2_theta*c4_psi - 0.266666666666667*c2_theta*fL + 2.82715971685646e-17*c2_theta*fpa + 0.533333333333333*c2_theta + 0.457142857142857*c4_psi*fL - 3.18055468146352e-17*c4_psi*fpa + 0.114285714285714*c4_psi + 0.0318309886183791*sqrt(fL)*sqrt(-As2*(As2 - 1))*(c1_psi*(5.52776949099952*c2_theta + 27.6388474549976) + c2_psi*(-4.14582711824964*c2_theta - 20.7291355912482) + 1.65833084729986*c2_theta*c3_psi - 4.14582711824964*c2_theta*c4_psi + 4.14582711824964*c2_theta*y_acc - 4.14582711824964*c2_theta + 8.29165423649928*c3_psi - 20.7291355912482*c4_psi + 20.7291355912482*y_acc - 20.7291355912482)*cos(delta_S) - 2.26172777348517e-16*fL - 5.65431943371292e-17*fpa + 1.33333333333333;
return Integral;
}
else if ( code == 2)
{
Double_t Integral = -0.0127323954473516*As2*c2_psi*c2_theta*fL - 0.0212206590789194*As2*c2_psi*c2_theta*fpa*pow(sin(helphi), 2) + 0.0127323954473516*As2*c2_psi*c2_theta*fpa + 0.00141471060526129*As2*c2_psi*c2_theta - 0.106103295394597*As2*c2_psi*fL - 0.0636619772367581*As2*c2_psi*fpa*pow(sin(helphi), 2) + 0.0212206590789194*As2*c2_psi*fpa + 0.0495148711841452*As2*c2_psi - 0.0127323954473516*As2*c2_theta*c4_psi*fL - 0.00909456817667974*As2*c2_theta*c4_psi*fpa*pow(sin(helphi), 2) + 0.00545674090600784*As2*c2_theta*c4_psi*fpa + 0.00303152272555991*As2*c2_theta*c4_psi + 0.0212206590789194*As2*c2_theta*fL - 0.106103295394597*As2*c2_theta*fpa*pow(sin(helphi), 2) + 0.0636619772367581*As2*c2_theta*fpa - 0.0212206590789194*As2*c2_theta - 0.0818511135901176*As2*c4_psi*fL - 0.0272837045300392*As2*c4_psi*fpa*pow(sin(helphi), 2) + 0.00909456817667974*As2*c4_psi*fpa + 0.033346749981159*As2*c4_psi - 0.106103295394597*As2*fL - 0.318309886183791*As2*fpa*pow(sin(helphi), 2) + 0.106103295394597*As2*fpa + 0.106103295394597*As2 + 0.0127323954473516*c2_psi*c2_theta*fL - 0.00848826363156775*c2_psi*c2_theta*sqrt(fpa)*sqrt((As2 - 1)*(fL + fpa - 1))*sqrt(-As2 + 1)*sin(2*helphi)*sin(-delta_pa + delta_pe) + 0.0212206590789194*c2_psi*c2_theta*fpa*pow(sin(helphi), 2) - 0.0127323954473516*c2_psi*c2_theta*fpa + 0.0127323954473516*c2_psi*c2_theta + 0.106103295394597*c2_psi*fL - 0.0424413181578387*c2_psi*sqrt(fpa)*sqrt((As2 - 1)*(fL + fpa - 1))*sqrt(-As2 + 1)*sin(2*helphi)*sin(-delta_pa + delta_pe) + 0.0636619772367581*c2_psi*fpa*pow(sin(helphi), 2) - 0.0212206590789194*c2_psi*fpa + 0.0212206590789194*c2_psi + 0.0127323954473516*c2_theta*c4_psi*fL - 0.00363782727067189*c2_theta*c4_psi*sqrt(fpa)*sqrt((As2 - 1)*(fL + fpa - 1))*sqrt(-As2 + 1)*sin(2*helphi)*sin(-delta_pa + delta_pe) + 0.00909456817667974*c2_theta*c4_psi*fpa*pow(sin(helphi), 2) - 0.00545674090600784*c2_theta*c4_psi*fpa + 0.00545674090600784*c2_theta*c4_psi - 0.0212206590789194*c2_theta*fL - 0.0424413181578388*c2_theta*sqrt(fpa)*sqrt((As2 - 1)*(fL + fpa - 1))*sqrt(-As2 + 1)*sin(2*helphi)*sin(-delta_pa + delta_pe) + 0.106103295394597*c2_theta*fpa*pow(sin(helphi), 2) - 0.0636619772367581*c2_theta*fpa + 0.0636619772367581*c2_theta + 0.0818511135901176*c4_psi*fL - 0.0181891363533595*c4_psi*sqrt(fpa)*sqrt((As2 - 1)*(fL + fpa - 1))*sqrt(-As2 + 1)*sin(2*helphi)*sin(-delta_pa + delta_pe) + 0.0272837045300392*c4_psi*fpa*pow(sin(helphi), 2) - 0.00909456817667974*c4_psi*fpa + 0.00909456817667974*c4_psi + 0.0318309886183791*sqrt(fL)*sqrt(-As2*(As2 - 1))*(c1_psi*(0.879771838765144*c2_theta + 4.39885919382572) + c2_psi*(-0.659828879073858*c2_theta - 3.29914439536929) + 0.263931551629543*c2_theta*c3_psi - 0.659828879073858*c2_theta*c4_psi + 0.659828879073858*c2_theta*y_acc - 0.659828879073858*c2_theta + 1.31965775814772*c3_psi - 3.29914439536929*c4_psi + 3.29914439536929*y_acc - 3.29914439536929)*cos(delta_S) + 0.106103295394597*fL - 0.212206590789194*sqrt(fpa)*sqrt((As2 - 1)*(fL + fpa - 1))*sqrt(-As2 + 1)*sin(2*helphi)*sin(-delta_pa + delta_pe) + 0.318309886183791*fpa*pow(sin(helphi), 2) - 0.106103295394597*fpa + 0.0318309886183791*(As2*(c2_psi*(c2_theta*(0.266666666666667*fL - 0.133333333333333*fpa - 0.266666666666667) + 1.33333333333333*fL + 0.666666666666667*fpa - 1.33333333333333) + c2_theta*(c4_psi*(0.114285714285714*fL - 0.0571428571428572*fpa - 0.114285714285714) + 1.33333333333333*fL - 0.666666666666667*fpa - 1.33333333333333) + 0.571428571428572*c4_psi*fL + 0.285714285714286*c4_psi*fpa - 0.571428571428572*c4_psi + 6.66666666666667*fL + 3.33333333333333*fpa - 6.66666666666667) + c2_psi*(c2_theta*(-0.266666666666667*fL + 0.133333333333333*fpa + 0.266666666666667) - 1.33333333333333*fL - 0.666666666666667*fpa + 1.33333333333333) - 0.114285714285714*c2_theta*c4_psi*fL + 0.0571428571428572*c2_theta*c4_psi*fpa + 0.114285714285714*c2_theta*c4_psi - 1.33333333333333*c2_theta*fL + 0.666666666666667*c2_theta*fpa + 1.33333333333333*c2_theta - 0.571428571428572*c4_psi*fL - 0.285714285714286*c4_psi*fpa + 0.571428571428572*c4_psi - 6.66666666666667*fL - 3.33333333333333*fpa + 6.66666666666667)*pow(cos(helphi), 2) + 0.106103295394597;
return Integral;
}
else if ( code == 3)
{
Double_t Integral = (-0.0318309886183791*c2_theta*pow(helcosthetaL, 2) - 0.0318309886183791)*(As2*(c2_psi*(15.707963267949*fL - 7.33038285837618) + c4_psi*(12.1175716638463*fL - 4.9367884556411) + 15.707963267949*fL - 15.707963267949) - 15.707963267949*c2_psi*fL - 3.14159265358979*c2_psi - 12.1175716638463*c4_psi*fL - 1.34639685153848*c4_psi + sqrt(fL)*sqrt(-As2*(As2 - 1))*(c1_psi*(20.7291355912482*pow(helcosthetaL, 2) - 20.7291355912482) + 15.5468516934361*c2_psi - 6.21874067737446*c3_psi + 15.5468516934361*c4_psi + pow(helcosthetaL, 2)*(-15.5468516934361*c2_psi + 6.21874067737446*c3_psi - 15.5468516934361*c4_psi + 15.5468516934361*y_acc) - 15.5468516934361*pow(helcosthetaL, 2) - 15.5468516934361*y_acc + 15.5468516934361)*cos(delta_S) - 15.707963267949*fL + pow(helcosthetaL, 2)*(As2*(c2_psi*(-21.9911485751286*fL + 13.6135681655558) - 14.8103653669233*c4_psi*fL + 7.62958215871807*c4_psi - 47.1238898038469*fL + 47.1238898038469) + c2_psi*(21.9911485751286*fL - 3.14159265358979) + 14.8103653669233*c4_psi*fL - 1.34639685153848*c4_psi + 47.1238898038469*fL - 15.707963267949) - 15.707963267949);
return Integral;
}
else if ( code == 4)
{
Double_t Integral = (0.8*helcosthetaK*(c1_psi*(pow(helcosthetaK, 4) - 1.0) + pow(helcosthetaK, 4)*(c2_psi + c3_psi + c4_psi - 1.0*y_acc) + helcosthetaK*(-1.0*c2_psi + helcosthetaK*(-1.0*c3_psi + helcosthetaK*(-1.0*c4_psi + helcosthetaK)))) - 0.8)*(As2*(c2_theta*(-0.5*fL + 0.333333333333333) - 1.25*fL - 7.06789929214115e-17*fpa + 0.416666666666667) + 0.5*c2_theta*fL - 0.5*c2_theta - 0.577350269189626*sqrt(fL)*helcosthetaK*sqrt(-As2*(As2 - 1))*(1.0*c2_theta + 5.0)*cos(delta_S) + 1.25*fL + 7.06789929214115e-17*fpa + pow(helcosthetaK, 2)*(As2*(c2_theta*(1.0*fL - 0.5) + 3.75*fL + 7.06789929214115e-17*fpa - 1.25) + c2_theta*(-1.0*fL + 0.5) - 3.75*fL - 7.06789929214115e-17*fpa + 1.25) - 1.25);
return Integral;
}
}