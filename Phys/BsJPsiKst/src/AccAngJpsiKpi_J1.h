/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef ACCANGJPSIKPI_J1
#define ACCANGJPSIKPI_J1

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
 
class AccAngJpsiKpi_J1 : public RooAbsPdf {
public:
  AccAngJpsiKpi_J1() {} ; 
  AccAngJpsiKpi_J1(const char *name, const char *title,
	      RooAbsReal& _helcosthetaK,
	      RooAbsReal& _helcosthetaL,
	      RooAbsReal& _helphi,
	      RooAbsReal& _As2,
	      RooAbsReal& _fL,
	      RooAbsReal& _fpa,
	      RooAbsReal& _delta_pa,
	      RooAbsReal& _delta_pe,
	      RooAbsReal& _delta_S,
	      RooAbsReal& _c1_psi,
	      RooAbsReal& _c2_psi,
	      RooAbsReal& _c3_psi,
	      RooAbsReal& _c4_psi,
	      RooAbsReal& _y_acc,
	      RooAbsReal& _c2_theta);
  AccAngJpsiKpi_J1(const AccAngJpsiKpi_J1& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new AccAngJpsiKpi_J1(*this,newname); }
  inline virtual ~AccAngJpsiKpi_J1() { }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

protected:

  RooRealProxy helcosthetaK ;
  RooRealProxy helcosthetaL ;
  RooRealProxy helphi ;
  RooRealProxy As2 ;
  RooRealProxy fL ;
  RooRealProxy fpa ;
  RooRealProxy delta_pa ;
  RooRealProxy delta_pe ;
  RooRealProxy delta_S ;
  RooRealProxy c1_psi ;
  RooRealProxy c2_psi ;
  RooRealProxy c3_psi ;
  RooRealProxy c4_psi ;
  RooRealProxy y_acc ;
  RooRealProxy c2_theta ;
  
  Double_t evaluate() const ;

private:

  ClassDef(AccAngJpsiKpi_J1,1) // Your description goes here...
};
 
#endif
