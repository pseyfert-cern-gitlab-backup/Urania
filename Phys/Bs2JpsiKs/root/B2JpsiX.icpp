// ####################################################################################################
// Phys/Bs2JpsiKs Package
// Functions common to all decay modes
// Authors: Patrick Koppenburg & Kristof De Bruyn
// ####################################################################################################


// ####################################################################################################
// *** Declarations ***
// List of functions whose content is decay channel specific

// Initialization
void defineConstants();

// Selection Cuts
bool applyDecayCuts(unsigned int pv, unsigned int ttype);
bool MCTruth(TString what);
bool teachingRegion(unsigned int pv);
bool noSigRegion(unsigned int pv) ;

// Teacher interaction
unsigned int individualPreproFlag(unsigned int i) ;
void prepareArray(const unsigned int nvar, float* InputArray, unsigned int pv, unsigned int ttype=0);

// Tree Interaction
Int_t TrackType() ;
virtual void Init(TTree *tree, TString module, TString dir, TString what, unsigned int NNtype);


// ####################################################################################################
// *** Accessors ***

// Variables
double mass(unsigned int pv){ return B_FullFit_M[pv]; } ;
double massErr(unsigned int pv){ return B_FullFit_MERR[pv]; } ;
double time(unsigned int pv){ return B_FullFit_ctau[pv]*pow(10.,3)/clight; } ;
Double_t weightVal(unsigned int pv){ return sweight[pv]; };
Float_t neuralnet(unsigned int pv){ return netOutput[pv]; };
UInt_t getRunNumber(){ return runNumber; } ;
ULong64_t getEventNumber(){ return eventNumber; } ;
Float_t getGpsSecond(){ return GpsSecond; } ;
unsigned int primaries(){ return B_FullFit_nPV; } ;

// Tree Manipulation
TTree* GetChain(){ return fChain; } ;
Int_t GetEntry(Long64_t entry){
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
} ;

double DTFchi2(unsigned int pv){ return (B_FullFit_chi2[pv]); } ;
bool getPsiHlt1TrackMuonDecision_TOS(){
  return (b_PsiHlt1TrackMuonDecision_TOS ? PsiHlt1TrackMuonDecision_TOS : Psi_Hlt1TrackMuonDecision_TOS); };
bool getPsiHlt1DiMuonHighMassDecision_TOS(){
 return (b_PsiHlt1DiMuonHighMassDecision_TOS ? PsiHlt1DiMuonHighMassDecision_TOS : Psi_Hlt1DiMuonHighMassDecision_TOS); };
bool getPsiHlt1TrackAllL0Decision_TOS(){
 return (b_PsiHlt1TrackAllL0Decision_TOS ? PsiHlt1TrackAllL0Decision_TOS : Psi_Hlt1TrackAllL0Decision_TOS); };
bool getPsiHlt2DiMuonDetachedJPsiDecision_TOS(){
 return (b_PsiHlt2DiMuonDetachedJPsiDecision_TOS?PsiHlt2DiMuonDetachedJPsiDecision_TOS : 
         Psi_Hlt2DiMuonDetachedJPsiDecision_TOS);};
bool getPsiHlt2DiMuonJPsiHighPTDecision_TOS(){
 return (b_PsiHlt2DiMuonJPsiHighPTDecision_TOS ? PsiHlt2DiMuonJPsiHighPTDecision_TOS : Psi_Hlt2DiMuonJPsiHighPTDecision_TOS); };
bool getPsiHlt2DiMuonJPsiDecision_TOS(){
 return (b_PsiHlt2DiMuonJPsiDecision_TOS ? PsiHlt2DiMuonJPsiDecision_TOS : Psi_Hlt2DiMuonJPsiDecision_TOS); };
bool getPsiHlt2TopoMu2BodyBBDTDecision_TOS(){
 return (b_PsiHlt2TopoMu2BodyBBDTDecision_TOS ? PsiHlt2TopoMu2BodyBBDTDecision_TOS : Psi_Hlt2TopoMu2BodyBBDTDecision_TOS); };
bool getPsiL0Global_Dec(){ return (b_PsiL0Global_Dec ? PsiL0Global_Dec : Psi_L0Global_Dec); };
bool getPsiHlt1Global_Dec(){ return (b_PsiHlt1Global_Dec ? PsiHlt1Global_Dec : Psi_Hlt1Global_Dec); };
bool getPsiHlt2Global_Dec(){ return (b_PsiHlt2Global_Dec ? PsiHlt2Global_Dec : Psi_Hlt2Global_Dec); };
bool getPsiL0Global_TIS(){ return (b_PsiL0Global_TIS ? PsiL0Global_TIS : Psi_L0Global_TIS); };
bool getPsiHlt1Global_TIS(){ return (b_PsiHlt1Global_TIS ? PsiHlt1Global_TIS : Psi_Hlt1Global_TIS); };
bool getPsiHlt2Global_TIS(){ return (b_PsiHlt2Global_TIS ? PsiHlt2Global_TIS : Psi_Hlt2Global_TIS); };


// ####################################################################################################
// *** Numbers ***

// Number of events
Long64_t nEntries(){
  Long64_t tupleEntries = GetChain()->GetEntries();
  //  return 620000 ;
  return std::max(maxEntries,(1-testrun)*tupleEntries);
} ;


// Number of variables for Teacher
unsigned int nVar(TString decay, unsigned int NNtype, unsigned int ttype){ ;
  unsigned int nvar = ((NNtype==m_NNtype_two || !twoNets) ? nvar_without_ttype : NNIvar);
  if ( m_ANY==ttype && decay!=m_Bu2JpsiK && (NNtype==m_NNtype_two || !twoNets)) 
    nvar = nvar_without_ttype + 1 ;// Exclude Bu2JpsiK which has only long tracks
  std::cout << " TType= " << ttype << ", NNType= " <<  NNtype << ", vars = " << nvar << std::endl;
  return nvar;
}


// ####################################################################################################
// *** Selection Cuts ***
// Common Cuts
bool applyCommonCuts(TString what, unsigned int pv){
 bool pass = (B_FullFit_status[pv]==0 && DTFchi2(pv)<DTF_chi2 &&
              B_FullFit_MERR[pv]<MMERR_cut &&
              (what==m_Prescaled || what==m_SigBdPrescaled || what==m_SigBsPrescaled || B_FullFit_ctau[pv]/clight>taucut) &&
              (fabs(B_FullFit_PV_Z[pv])<m_OWNPVZ_range) &&
              (what==m_SigKstarWM || mass(pv) > sideband_low_min()) && 
              mass(pv) < sideband_high_max()
             );
// std::cout << "applyCommonCuts " << pass << std::endl ;
 /*
 std::cout << "Cuts " << pass  << " : " << (B_FullFit_status[pv]==0)
           << " " << (DTFchi2(pv)<DTF_chi2 )
           << " " << (B_FullFit_MERR[pv]<MMERR_cut) 
           << " " << (B_FullFit_ctau[pv]/clight>taucut) 
           << " " << (fabs(B_OWNPV_Z)<m_OWNPVZ_range) 
           << " " << (mass(pv) > sideband_low_min())
           << " " << (mass(pv) < sideband_high_max()) << std::endl ;
 */
 return pass;  
} ;

// Trigger
bool trigger(){
  bool pass = ( ( // HLT 1
          (getPsiHlt1TrackMuonDecision_TOS()==1 || 
           getPsiHlt1DiMuonHighMassDecision_TOS()==1 ||
           getPsiHlt1TrackAllL0Decision_TOS()==1) && 
           // HLT 2
          (getPsiHlt2DiMuonDetachedJPsiDecision_TOS()==1 || 
           getPsiHlt2DiMuonJPsiHighPTDecision_TOS()==1 || 
           getPsiHlt2DiMuonJPsiDecision_TOS()==1 || 
           getPsiHlt2TopoMu2BodyBBDTDecision_TOS()==1 ))) ;
 /*
  std::cout << "trigger " << pass << std::endl ;
 */
  return pass ;
} ;
  
  
// ####################################################################################################
// *** Data Manipulation ***
void fillArray(const int var, const float value, TString name, float* InputArray){
  if (var>=0) {
    //    std::cout << var << " " << name << " " << value << std::endl ;
    InputArray[var] = value;
    if (firstFill) std::cout << "Filling variable " << var+2 << " (ID " << 
      var << ", page " << var+5 << ") ``" << name << "'' with " << value << std::endl ;
  } else {
    if (firstFill) std::cout << "Ignoring variable ``" << name << "''" << std::endl ;
  }    
};


// ####################################################################################################
// *** Printout Candidates with Multiple PV ***

void printCandidates(std::list<unsigned int>& passPVs ){
  if (passPVs.empty()){
    std::cout << "WARNING: Set of (B,PV) pairs is empty." << std::endl;
    return ;
  }
  else{
    std::cout << "Set of " << passPVs.size() << " (B,PV) pairs found that pass selection cuts." << std::endl;
    if (passPVs.size()>1 ){
      std::cout << "Interesting case of multiple PVs passing at event " << runNumber << "/" << eventNumber << std::endl;
      for ( std::list<unsigned int>::const_iterator i = passPVs.begin() ; i!=passPVs.end()  ; ++i){
        printCandidate(*i);
      }
    }
  }
  return ;
} ;

void printCandidate(unsigned int pv){
  std::cout << "PV "  << pv << " at (" << B_FullFit_PV_X[pv] << "," 
            << B_FullFit_PV_Y[pv] << "," << B_FullFit_PV_Z[pv]
            << ") gets mass " << mass(pv) << ", tau " << 1000*B_FullFit_ctau[pv]/clight
            << "ps and chi2 " << DTFchi2(pv) ;
  if (b_netOutput) std::cout << " NN: " << neuralnet(pv) ;
  std::cout << std::endl ;
  return ;
} ;
