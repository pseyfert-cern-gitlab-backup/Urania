/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by Urania using RooClassFactory               *
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooPrior.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooPrior) 

 RooPrior::RooPrior(const char *name, const char *title, 
                        RooAbsReal& _BR) :
   RooAbsPdf(name,title), 
   BR("BR","BR",this,_BR)
 { 
 } 


 RooPrior::RooPrior(const RooPrior& other, const char* name) :  
   RooAbsPdf(other,name), 
   BR("BR",this,other.BR)
 { 
 } 



 Double_t RooPrior::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return 1.765692e-6*pow(BR, 5) - 9.6156e-5*pow(BR, 4) + 0.001929392*pow(BR, 3) - 0.01661805*pow(BR, 2) + 0.042747*BR + 0.113387 ; 
 } 



 Int_t RooPrior::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
 if ( matchArgs(allVars, analVars, BR ) )  return 1;
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   // if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t RooPrior::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
if ( code == 1)
{
  Double_t BR_min = BR.min(rangeName);
  Double_t BR_max = BR.max(rangeName);
  
Double_t Integral = 2.94282e-7*pow(BR_max, 6) - 1.92312e-5*pow(BR_max, 5) + 0.000482348*pow(BR_max, 4) - 0.00553935*pow(BR_max, 3) + 0.0213735*pow(BR_max, 2) + 0.113387*BR_max - 2.94282e-7*pow(BR_min, 6) + 1.92312e-5*pow(BR_min, 5) - 0.000482348*pow(BR_min, 4) + 0.00553935*pow(BR_min, 3) - 0.0213735*pow(BR_min, 2) - 0.113387*BR_min;
return Integral;
}
}
