Package:	PIDPerfScripts

Maintainer:	ANDREW POWELL
Contact:	a.powell1@physics.ox.ac.uk

Twiki Page
----------
Complete details of this package can be found on the following twiki page: https://twiki.cern.ch/twiki/bin/view/LHCb/PIDCalibPackage

Track DataSet Objects
---------------------
Two types of track datasets have been defined within PIDPerfTools; TrackDataSet and EvtTrackDataSet. If you are only concerned with the kinematic variables of your tracks (P, PT, ETA), then using TrackDataSet will suffice. If, however, you also would like the code to consider 'event' type variables as well (nTracks, nPV), then you will need to use EvtTrackDataSet.  

Importing data from an nTuple
-----------------------------
Examples on how to import a given track into either an instance of TrackDataSet or EvtTrackDataSet are shown in the scripts Test_MC.cpp/Test_Data.cpp or Test_EvtMC.cpp/Test_EvtData.cpp in the directory src/. E.g., to import a track into a TrackDataSet

//==========================================
// Obtain signal track TTree
//==========================================
TFile* f_Sig = new TFile("nTupleName.root");
TTree* t_Sig = (TTree*)f_Sig->Get("TTreeName");
 
//==========================================
// First, declare RooRealVars of the track 
// parameters. The name string in each case 
// must match the name of the corresponding
// leaf in the TTree. The desired range of 
// each parameter must also be set. 
//==========================================
RooRealVar Mom("mypion_P", "", 0, 150000, "MeV/c");
RooRealVar Pt("mypion_PT", "", 0, 30000, "MeV/c");
RooRealVar Eta("mypion_TRACK_Eta", "", 1.5, 5.0, "");
RooRealVar DLLK("mypion_PIDK", "", -150, 150, "");
RooRealVar DLLp("mypion_PIDp", "", -150, 150, "");

//==========================================
// If you want to apply a cut to the data 
// you import from the TTree, then these 
// parameters need to be declared as well 
// and their values limited to the desired 
// range. Below, we ensure only +ve tracks 
// are imported, and a tight B Mass is 
// applied
//==========================================
RooRealVar ID("mypion_ID", "", 210, 212, ""); // Select +ve Tracks
RooRealVar BMass("Bu_M","",5279.15-50.0,5279.15+50.0);
  
//==========================================
// Now call the appropriate class 
// constructor. The name in the nTuple of 
// the imported parameters must be listed in 
// the correct order. The internally, the 
// parameters are P, PT, ETA, DLLK, DLLp.
//==========================================
TrackDataSet* Sig_DataSet = new TrackDataSet( "B->DPi Pion",
	                                       "Signal Track",
        	                               t_Sig,
                	                       RooArgSet(Mom,
                        	                         Pt,
                                	                 Eta,
                                        	         DLLK,
                                                	 DLLp,
                                                   	 ID,
                                                    	 BMass),	
                                               "p3_P",
                                               "p3_PT"		,
                                               "p3_TRACK_Eta",	
                                               "p3_PIDK",	
                                               "p3_PIDp");

Weighting a Calibration Sample TrackDataSet
-------------------------------------------
Once an instance of TrackDataSet has been created for the desired signal track, it is then possible to use this to 'weight' a calibration TrackDataSet. To do this, one must declare a binning schema within which the binning will be performed. E.g.,

//==========================================
// Declare RooBinnings and set boundaries 
// for 4 bins in momentum and 4 bins in Eta.
// Bin boundaries will be:
// Mom: 5000, 9300, 15600, 82800, 150000 MeV/c
// Eta: 1.5, 2.375, 3.25, 4.125, 5.0 
//==========================================
RooBinning* Mom_Bin = new RooBinning(5000,150000,"P");
RooBinning* Pt_Bin = new RooBinning(500,30000,"PT");
RooBinning* Eta_Bin = new RooBinning(1.5,5,"ETA");
Mom_Bin->addBoundary(9300); // R1 Kaon Threshold
Mom_Bin->addBoundary(15600);// R2 Kaon Threshold 
Mom_Bin->addUniform(2, 15600, 150000);  
Eta_Bin->addUniform(4, 1.5, 5);

vector<RooBinning*> BinSchema;
BinSchema.push_back(Mom_Bin);
BinSchema.push_back(Pt_Bin);
BinSchema.push_back(Eta_Bin);  

With the vector of RooBinnings declared, this can then be passed to the 'WeightInBins' method of the given calibration TrackDataSet instance along with the signal TrackDataSet with which the weighting is performed against. A pointer to a dynamically declared TrackDataSet is returned, that contains a new parameter (column) containing the new weight for each candidate. The name of this weight parameter is passed to the WeightInBins method, as is the name in the name of the weighting variable in the calibration TrackDataSet. In the example below, these are "Wgt" and "peak_yield_sw", respectively.

//==========================================
// Create a 'Bin' Weigthed Copy of 
// Pion_DataSet and Kaon_DataSet
//==========================================
TrackDataSet* Weighted_PionBin = 
    (TrackDataSet*)Pion_DataSet->WeightInBins(Sig_DataSet,
                                              "Wgt",
                                              BinSchema,
                                              kTRUE,
                                              0,
                                              "peak_yield_sw"
                                              );


Compiling Package
-----------------
In a perfect world, one would compile the package with CMT against lastest version of ROOT int the LCG stack. Unfortunately, at the time of writing, this version (v5.26) is rather old, and the associated version of RooFit (v3.13) possess bugs in the code performing the merging of weighted RooDataSets. Thus, compiling against this version of ROOT results in this package returning invalid results. To get around this, a stand-alone makefile has been written to compile the code against the lastest ROOT version available on afs (v5.28) which possess the necessary patches to RooFit. To use the package, one must ensure the appropriate ROOT environment is configured and then perform make. These steps, and how to run one of the example scripts, will now be given. First, we checkout the head versions of the relevant packages:

> SetupProject Erasmus --build-env
> getpack PIDCalib/PIDPerfScripts head
> getpack PIDCalib/PIDPerfTools head

Now we compile the PIDPerfTools library and then the example scripts in PIDPerfScripts:

> cd ../PIDPerfTool
> source setup_env.csh
> cd lib
> make
> cd ../../PIDPerfScripts/make
> make
> cd exe
> Test_MC


A. Powell 24/03/11