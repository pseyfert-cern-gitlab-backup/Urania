/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooPowerLaw.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooPowerLaw) 

 RooPowerLaw::RooPowerLaw(const char *name, const char *title, 
                        RooAbsReal& _mass,
                        RooAbsReal& _mean,
                        RooAbsReal& _indx) :
   RooAbsPdf(name,title), 
   mass("mass","mass",this,_mass),
   mean("mean","mean",this,_mean),
   indx("indx","indx",this,_indx)
 { 
 } 


 RooPowerLaw::RooPowerLaw(const RooPowerLaw& other, const char* name) :  
   RooAbsPdf(other,name), 
   mass("mass",this,other.mass),
   mean("mean",this,other.mean),
   indx("indx",this,other.indx)
 { 
 } 



 Double_t RooPowerLaw::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return 1.0/pow ( (mass-mean), indx ); 
 } 

//_____________________________________________________________________________
Int_t RooPowerLaw::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
{
  if (matchArgs(allVars,analVars,mass)) return 1 ;
  return 0 ;
}



//_____________________________________________________________________________
Double_t RooPowerLaw::analyticalIntegral(Int_t code, const char* rangeName) const
{
  assert(code==1) ;

  return (pow (mass.max(rangeName)-mean, (1-indx)) - pow (mass.min(rangeName)-mean, 1-indx))/(1-indx) ;

}



