/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "P2VV/RooEfficiencyBin.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include <utility> 
using std::make_pair;
#include "TMath.h" 

//_____________________________________________________________________________
RooEfficiencyBin::RooEfficiencyBin(const char *name, const char *title,
                                   const std::map<RooAbsReal*, bool>& variables)
   : RooAbsReal(name, title)
{
   for (std::map<RooAbsReal*, bool>::const_iterator it = variables.begin(),
           end = variables.end(); it != end; ++it) {
      addEntry(it->first, it->second);
   }
} 

//_____________________________________________________________________________
RooEfficiencyBin::RooEfficiencyBin(const char *name, const char *title)
   : RooAbsReal(name, title)
{
}

//_____________________________________________________________________________
RooEfficiencyBin::RooEfficiencyBin(const RooEfficiencyBin& other, const char* name)
   : RooAbsReal(other,name)
{ 
   for (std::map<RooRealProxy*, bool>::const_iterator it = other._variables.begin(),
           end = other._variables.end(); it != end; ++it) {
      RooRealProxy* proxy = new RooRealProxy(it->first->GetName(), this, *(it->first));
      _variables.insert(make_pair(proxy, it->second));
   }
} 

//_____________________________________________________________________________
RooEfficiencyBin::~RooEfficiencyBin()
{
  for (std::map<RooRealProxy*, bool>::const_iterator it = _variables.begin(),
           end = _variables.end(); it != end; ++it) {
     delete it->first;
  }
  _variables.clear();
}

//_____________________________________________________________________________
void RooEfficiencyBin::addEntry(RooAbsReal* var, const bool flag)
{
   std::string name = var->GetName();
   name += "_proxy";
   RooRealProxy* proxy = new RooRealProxy(name.c_str(), name.c_str(), this, *var);
   _variables.insert(make_pair(proxy, flag));
}

//_____________________________________________________________________________
Double_t RooEfficiencyBin::evaluate() const 
{ 
   // cout << "RooEfficiencyBin::" << GetName() << "::evaluate:" << endl;
   Double_t val = 1;
   for (std::map<RooRealProxy*, bool>::const_iterator it = _variables.begin(),
           end = _variables.end(); it != end; ++it) {
      double bin_val = *(it->first);
      if (it->second) {
         val *= bin_val;
      } else {
         val *= (1. - bin_val);
      }
      // cout << it->first->arg().GetName() << " " << it->second << " " << bin_val << " " << val << endl;
   }
   return val;
} 
