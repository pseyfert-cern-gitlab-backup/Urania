diff --git a/roofit/roofitcore/inc/RooAbsGenContext.h b/roofit/roofitcore/inc/RooAbsGenContext.h
index 23c6fe2..743718c 100644
--- a/roofit/roofitcore/inc/RooAbsGenContext.h
+++ b/roofit/roofitcore/inc/RooAbsGenContext.h
@@ -75,6 +75,7 @@ protected:
   friend class RooSimGenContext ;
   friend class RooSimSplitGenContext ;
   friend class RooEffGenContext ;
+  friend class RooEffConvGenContext;
 
   virtual void initGenerator(const RooArgSet &theEvent);
   virtual void generateEvent(RooArgSet &theEvent, Int_t remaining) = 0;
diff --git a/roofit/roofitcore/src/RooAcceptReject.cxx b/roofit/roofitcore/src/RooAcceptReject.cxx
index 4f3d836..c5ecd2b 100644
--- a/roofit/roofitcore/src/RooAcceptReject.cxx
+++ b/roofit/roofitcore/src/RooAcceptReject.cxx
@@ -105,19 +105,21 @@ RooAcceptReject::RooAcceptReject(const RooAbsReal &func, const RooArgSet &genVar
     else {
       _minTrials= _minTrialsArray[_realSampleDim]*_catSampleMult;
     }
+    if (_realSampleDim > 1) {
+       coutW(Generation) << "RooAcceptReject::ctor(" << fName 
+                         << ") WARNING: performing accept/reject sampling on a p.d.f in " 
+                         << _realSampleDim << " dimensions without prior knowledge on maximum value "
+                         << "of p.d.f. Determining maximum value by taking " << _minTrials 
+                         << " trial samples. If p.d.f contains sharp peaks smaller than average "
+                         << "distance between trial sampling points these may be missed and p.d.f. "
+                         << "may be sampled incorrectly." << endl ;
+    }
   } else {
     // No trials needed if we know the maximum a priori
     _minTrials=0 ;
   }
 
   // Need to fix some things here
-  if (_realSampleDim > 1) {
-    coutW(Generation) << "RooAcceptReject::ctor(" << fName 
-		      << ") WARNING: performing accept/reject sampling on a p.d.f in " << _realSampleDim << " dimensions "
-		      << "without prior knowledge on maximum value of p.d.f. Determining maximum value by taking " << _minTrials 
-		      << " trial samples. If p.d.f contains sharp peaks smaller than average distance between trial sampling points"
-		      << " these may be missed and p.d.f. may be sampled incorrectly." << endl ;
-  }
   if (_minTrials>10000) {
     coutW(Generation) << "RooAcceptReject::ctor(" << fName << "): WARNING: " << _minTrials << " trial samples requested by p.d.f for " 
 		      << _realSampleDim << "-dimensional accept/reject sampling, this may take some time" << endl ;
diff --git a/roofit/roofitcore/src/RooGenContext.cxx b/roofit/roofitcore/src/RooGenContext.cxx
index 4ed2dce..a164769 100644
--- a/roofit/roofitcore/src/RooGenContext.cxx
+++ b/roofit/roofitcore/src/RooGenContext.cxx
@@ -237,21 +237,30 @@ RooGenContext::RooGenContext(const RooAbsPdf &model, const RooArgSet &vars,
     _acceptRejectFunc= (RooRealIntegral*) _pdfClone->createIntegral(*depList,vars) ;
     cxcoutI(Generation) << "RooGenContext::ctor() accept/reject sampling function is " << _acceptRejectFunc->GetName() << endl ;
     
-    if (_directVars.getSize()==0)  {
-      
-      // Check if PDF supports maximum finding
-      Int_t maxFindCode = _pdfClone->getMaxVal(_otherVars) ;
+    // Check if PDF supports maximum finding for the entire phase space
+    RooArgSet allVars(_otherVars);
+    allVars.add(_directVars);
+    Int_t maxFindCode = _pdfClone->getMaxVal(allVars) ;
+    if (maxFindCode != 0) {
+      // Special case: PDF supports max-finding in otherVars, no need to scan other+proto space for maximum
+      coutI(Generation) << "RooGenContext::ctor() prototype data provided, and "
+                        << "model supports analytical maximum finding in the full phase space: " 
+                        << "can provide analytical pdf maximum to numeric generator" << endl ;
+      _maxVar = new RooRealVar("funcMax","function maximum",_pdfClone->maxVal(maxFindCode)) ;
+    } else {
+      maxFindCode = _pdfClone->getMaxVal(_otherVars) ;
       if (maxFindCode != 0) {
-	
-	// Special case: PDF supports max-finding in otherVars, no need to scan other+proto space for maximum
-	coutI(Generation) << "RooGenContext::ctor() prototype data provided, all observables are generated numerically and "
-			    << "model supports analytical maximum finding: can provide analytical pdf maximum to numeric generator" << endl ;
-	_maxVar = new RooRealVar("funcMax","function maximum",1) ;
-	_updateFMaxPerEvent = maxFindCode ;
-	cxcoutD(Generation) << "RooGenContext::ctor() maximum value must be reevaluated for each event with configuration code " << maxFindCode << endl ;
+         _updateFMaxPerEvent = maxFindCode ;
+         coutI(Generation) << "RooGenContext::ctor() prototype data provided, and "
+                           << "model supports analytical maximum finding in the variables which are not"
+                           << " internally generated. Can provide analytical pdf maximum to numeric "
+                           << "generator" << endl;
+         cxcoutD(Generation) << "RooGenContext::ctor() maximum value must be reevaluated for each "
+                             << "event with configuration code " << maxFindCode << endl ;
+         _maxVar = new RooRealVar("funcMax","function maximum",1) ;    
       }
     }
-    
+
     if (!_maxVar) {
       
       // Regular case: First find maximum in other+proto space
