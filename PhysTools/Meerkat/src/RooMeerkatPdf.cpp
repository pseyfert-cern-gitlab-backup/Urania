/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooMeerkatPdf.hh" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include "RooListProxy.h" 
#include <math.h> 
#include "TMath.h" 

#include "AbsDensity.hh"

ClassImp(RooMeerkatPdf) 

RooMeerkatPdf::RooMeerkatPdf(const char *name, const char *title, 
                        RooArgList& varList, AbsDensity* density) :
   RooAbsPdf(name,title), 
   _varList("varList","List of variables", this)
{
  TIterator* varItr = varList.createIterator() ;
  RooAbsArg* var ;
  Int_t num = 0; 
  for (Int_t i=0; (var = (RooAbsArg*)varItr->Next()); ++i) {
    if (!dynamic_cast<RooAbsReal*>(var)) {
      coutE(InputArguments) << "RooMeerkatPdf::ctor(" << GetName() << ") ERROR: variable " << var->GetName() 
            		    << " is not of type RooAbsReal" << std::endl ;
      assert(0) ;
    }
    _varList.add(*var) ;
    num++;
//    _varName.push_back(var->GetName());
  }
  
  _varItr = _varList.createIterator(); 
  
  _dim = num; 
  
  _density = density; 
  
  delete varItr ;
}

RooMeerkatPdf::~RooMeerkatPdf() {
  
}


RooMeerkatPdf::RooMeerkatPdf(const RooMeerkatPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   _varList("varList",this,other._varList)
{
   _dim = other._dim; 
   _varItr = _varList.createIterator(); 
   _density = other._density; 
}

Double_t RooMeerkatPdf::evaluate() const 
{
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 

   std::vector<Double_t> x; 
   x.resize(_dim);
   _varItr->Reset();
   RooAbsReal* var;
   const RooArgSet* nset = _varList.nset();
   for(Int_t j=0; (var=(RooAbsReal*)_varItr->Next()); ++j) {
     x[j] = var->getVal(nset);
   }

   return _density->density(x); 
}
